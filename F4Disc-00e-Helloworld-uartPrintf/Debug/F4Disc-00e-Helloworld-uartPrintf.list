
F4Disc-00e-Helloworld-uartPrintf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009118  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080092a8  080092a8  000192a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009308  08009308  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009308  08009308  00019308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009310  08009310  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009310  08009310  00019310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009314  08009314  00019314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000988  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a10  20000a10  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000182de  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d72  00000000  00000000  000383d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013d8  00000000  00000000  0003c150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f43  00000000  00000000  0003d528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024f26  00000000  00000000  0003e46b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019ef8  00000000  00000000  00063391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf0db  00000000  00000000  0007d289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005a94  00000000  00000000  0014c364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  00151df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009290 	.word	0x08009290

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08009290 	.word	0x08009290

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <__io_putchar>:

/* USER CODE BEGIN PFP */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000574:	1d39      	adds	r1, r7, #4
 8000576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057a:	2201      	movs	r2, #1
 800057c:	4803      	ldr	r0, [pc, #12]	; (800058c <__io_putchar+0x20>)
 800057e:	f004 f901 	bl	8004784 <HAL_UART_Transmit>

  return ch;
 8000582:	687b      	ldr	r3, [r7, #4]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000198 	.word	0x20000198

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fce2 	bl	8000f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f820 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f946 	bl	800082c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005a0:	f000 f886 	bl	80006b0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005a4:	f000 f8b2 	bl	800070c <MX_I2S3_Init>
  MX_SPI1_Init();
 80005a8:	f000 f8e0 	bl	800076c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005ac:	f007 fc34 	bl	8007e18 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80005b0:	f000 f912 	bl	80007d8 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005b4:	f007 fc56 	bl	8007e64 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <main+0x44>)
 80005be:	f001 f82a 	bl	8001616 <HAL_GPIO_TogglePin>
//    HAL_UART_Transmit(&huart2, (uint8_t*) "hello world\n\r", sizeof("hello world\n\r")-1, HAL_MAX_DELAY);
    printf("Hello dunia\n\r");
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <main+0x48>)
 80005c4:	f008 f89c 	bl	8008700 <iprintf>
    HAL_Delay(500);
 80005c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005cc:	f000 fd38 	bl	8001040 <HAL_Delay>
    MX_USB_HOST_Process();
 80005d0:	e7f0      	b.n	80005b4 <main+0x24>
 80005d2:	bf00      	nop
 80005d4:	40020c00 	.word	0x40020c00
 80005d8:	080092a8 	.word	0x080092a8

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f008 f8dd 	bl	80087aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a27      	ldr	r2, [pc, #156]	; (80006a8 <SystemClock_Config+0xcc>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <SystemClock_Config+0xd0>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	2301      	movs	r3, #1
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800064c:	2308      	movs	r3, #8
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000650:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000654:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800065a:	2307      	movs	r3, #7
 800065c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	4618      	mov	r0, r3
 8000664:	f003 f9e0 	bl	8003a28 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800066e:	f000 f9db 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2302      	movs	r3, #2
 8000678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000682:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000688:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2105      	movs	r1, #5
 8000690:	4618      	mov	r0, r3
 8000692:	f003 fc41 	bl	8003f18 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800069c:	f000 f9c4 	bl	8000a28 <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3750      	adds	r7, #80	; 0x50
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_I2C1_Init+0x50>)
 80006b6:	4a13      	ldr	r2, [pc, #76]	; (8000704 <MX_I2C1_Init+0x54>)
 80006b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_I2C1_Init+0x50>)
 80006bc:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_I2C1_Init+0x58>)
 80006be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_I2C1_Init+0x50>)
 80006ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_I2C1_Init+0x50>)
 80006ee:	f002 fbb7 	bl	8002e60 <HAL_I2C_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f8:	f000 f996 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200000a4 	.word	0x200000a4
 8000704:	40005400 	.word	0x40005400
 8000708:	000186a0 	.word	0x000186a0

0800070c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_I2S3_Init+0x54>)
 8000712:	4a14      	ldr	r2, [pc, #80]	; (8000764 <MX_I2S3_Init+0x58>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_I2S3_Init+0x54>)
 8000718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800071c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_I2S3_Init+0x54>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_I2S3_Init+0x54>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <MX_I2S3_Init+0x54>)
 800072c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000730:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_I2S3_Init+0x54>)
 8000734:	4a0c      	ldr	r2, [pc, #48]	; (8000768 <MX_I2S3_Init+0x5c>)
 8000736:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_I2S3_Init+0x54>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_I2S3_Init+0x54>)
 8000740:	2200      	movs	r2, #0
 8000742:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_I2S3_Init+0x54>)
 8000746:	2200      	movs	r2, #0
 8000748:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_I2S3_Init+0x54>)
 800074c:	f002 fccc 	bl	80030e8 <HAL_I2S_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000756:	f000 f967 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000f8 	.word	0x200000f8
 8000764:	40003c00 	.word	0x40003c00
 8000768:	00017700 	.word	0x00017700

0800076c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_SPI1_Init+0x64>)
 8000772:	4a18      	ldr	r2, [pc, #96]	; (80007d4 <MX_SPI1_Init+0x68>)
 8000774:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000776:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_SPI1_Init+0x64>)
 8000778:	f44f 7282 	mov.w	r2, #260	; 0x104
 800077c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_SPI1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_SPI1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_SPI1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_SPI1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_SPI1_Init+0x64>)
 8000798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800079c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_SPI1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_SPI1_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_SPI1_Init+0x64>)
 80007b8:	220a      	movs	r2, #10
 80007ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_SPI1_Init+0x64>)
 80007be:	f003 ff0b 	bl	80045d8 <HAL_SPI_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007c8:	f000 f92e 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000140 	.word	0x20000140
 80007d4:	40013000 	.word	0x40013000

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <MX_USART2_UART_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 8000810:	f003 ff6b 	bl	80046ea <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081a:	f000 f905 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000198 	.word	0x20000198
 8000828:	40004400 	.word	0x40004400

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	4b72      	ldr	r3, [pc, #456]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a71      	ldr	r2, [pc, #452]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b6f      	ldr	r3, [pc, #444]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0310 	and.w	r3, r3, #16
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	4b6b      	ldr	r3, [pc, #428]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a6a      	ldr	r2, [pc, #424]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b68      	ldr	r3, [pc, #416]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b64      	ldr	r3, [pc, #400]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a63      	ldr	r2, [pc, #396]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b61      	ldr	r3, [pc, #388]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b5d      	ldr	r3, [pc, #372]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a5c      	ldr	r2, [pc, #368]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b5a      	ldr	r3, [pc, #360]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b56      	ldr	r3, [pc, #344]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a55      	ldr	r2, [pc, #340]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b53      	ldr	r3, [pc, #332]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b4f      	ldr	r3, [pc, #316]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a4e      	ldr	r2, [pc, #312]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b4c      	ldr	r3, [pc, #304]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2108      	movs	r1, #8
 80008ee:	4849      	ldr	r0, [pc, #292]	; (8000a14 <MX_GPIO_Init+0x1e8>)
 80008f0:	f000 fe78 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	2101      	movs	r1, #1
 80008f8:	4847      	ldr	r0, [pc, #284]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 80008fa:	f000 fe73 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fe:	2200      	movs	r2, #0
 8000900:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000904:	4845      	ldr	r0, [pc, #276]	; (8000a1c <MX_GPIO_Init+0x1f0>)
 8000906:	f000 fe6d 	bl	80015e4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800090a:	2308      	movs	r3, #8
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	483c      	ldr	r0, [pc, #240]	; (8000a14 <MX_GPIO_Init+0x1e8>)
 8000922:	f000 fcc3 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000926:	2301      	movs	r3, #1
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4836      	ldr	r0, [pc, #216]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 800093e:	f000 fcb5 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000942:	2308      	movs	r3, #8
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000952:	2305      	movs	r3, #5
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	482e      	ldr	r0, [pc, #184]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 800095e:	f000 fca5 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000962:	2301      	movs	r3, #1
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000966:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	482a      	ldr	r0, [pc, #168]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 8000978:	f000 fc98 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800097c:	2304      	movs	r3, #4
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4825      	ldr	r0, [pc, #148]	; (8000a24 <MX_GPIO_Init+0x1f8>)
 8000990:	f000 fc8c 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a6:	2305      	movs	r3, #5
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	481c      	ldr	r0, [pc, #112]	; (8000a24 <MX_GPIO_Init+0x1f8>)
 80009b2:	f000 fc7b 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009b6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009ba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4813      	ldr	r0, [pc, #76]	; (8000a1c <MX_GPIO_Init+0x1f0>)
 80009d0:	f000 fc6c 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d4:	2320      	movs	r3, #32
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_GPIO_Init+0x1f0>)
 80009e8:	f000 fc60 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_GPIO_Init+0x1e8>)
 8000a02:	f000 fc53 	bl	80012ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	; 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>
	...

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a72:	2007      	movs	r0, #7
 8000a74:	f000 fbd8 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800

08000a84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <HAL_I2C_MspInit+0x84>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d12c      	bne.n	8000b00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <HAL_I2C_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a17      	ldr	r2, [pc, #92]	; (8000b0c <HAL_I2C_MspInit+0x88>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_I2C_MspInit+0x88>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ac2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac8:	2312      	movs	r3, #18
 8000aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	480c      	ldr	r0, [pc, #48]	; (8000b10 <HAL_I2C_MspInit+0x8c>)
 8000ae0:	f000 fbe4 	bl	80012ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_I2C_MspInit+0x88>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_I2C_MspInit+0x88>)
 8000aee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000af2:	6413      	str	r3, [r2, #64]	; 0x40
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_I2C_MspInit+0x88>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	; 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020400 	.word	0x40020400

08000b14 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08e      	sub	sp, #56	; 0x38
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a31      	ldr	r2, [pc, #196]	; (8000c04 <HAL_I2S_MspInit+0xf0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d15a      	bne.n	8000bfa <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b44:	2301      	movs	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b48:	23c0      	movs	r3, #192	; 0xc0
 8000b4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4618      	mov	r0, r3
 8000b56:	f003 fbff 	bl	8004358 <HAL_RCCEx_PeriphCLKConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b60:	f7ff ff62 	bl	8000a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <HAL_I2S_MspInit+0xf4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a26      	ldr	r2, [pc, #152]	; (8000c08 <HAL_I2S_MspInit+0xf4>)
 8000b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <HAL_I2S_MspInit+0xf4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <HAL_I2S_MspInit+0xf4>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	4a1f      	ldr	r2, [pc, #124]	; (8000c08 <HAL_I2S_MspInit+0xf4>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b90:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <HAL_I2S_MspInit+0xf4>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_I2S_MspInit+0xf4>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	4a18      	ldr	r2, [pc, #96]	; (8000c08 <HAL_I2S_MspInit+0xf4>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_I2S_MspInit+0xf4>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	f003 0304 	and.w	r3, r3, #4
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bb8:	2310      	movs	r3, #16
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bc8:	2306      	movs	r3, #6
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480e      	ldr	r0, [pc, #56]	; (8000c0c <HAL_I2S_MspInit+0xf8>)
 8000bd4:	f000 fb6a 	bl	80012ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bd8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bea:	2306      	movs	r3, #6
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4806      	ldr	r0, [pc, #24]	; (8000c10 <HAL_I2S_MspInit+0xfc>)
 8000bf6:	f000 fb59 	bl	80012ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3738      	adds	r7, #56	; 0x38
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40003c00 	.word	0x40003c00
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40020800 	.word	0x40020800

08000c14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <HAL_SPI_MspInit+0x84>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d12b      	bne.n	8000c8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c6e:	23e0      	movs	r3, #224	; 0xe0
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c7e:	2305      	movs	r3, #5
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <HAL_SPI_MspInit+0x8c>)
 8000c8a:	f000 fb0f 	bl	80012ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c8e:	bf00      	nop
 8000c90:	3728      	adds	r7, #40	; 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40013000 	.word	0x40013000
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020000 	.word	0x40020000

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <HAL_UART_MspInit+0x84>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d12b      	bne.n	8000d1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cfe:	230c      	movs	r3, #12
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0e:	2307      	movs	r3, #7
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <HAL_UART_MspInit+0x8c>)
 8000d1a:	f000 fac7 	bl	80012ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40004400 	.word	0x40004400
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d80:	f000 f93e 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <OTG_FS_IRQHandler+0x10>)
 8000d8e:	f000 fec7 	bl	8001b20 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200005c0 	.word	0x200005c0

08000d9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	e00a      	b.n	8000dc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dae:	f3af 8000 	nop.w
 8000db2:	4601      	mov	r1, r0
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	60ba      	str	r2, [r7, #8]
 8000dba:	b2ca      	uxtb	r2, r1
 8000dbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dbf0      	blt.n	8000dae <_read+0x12>
  }

  return len;
 8000dcc:	687b      	ldr	r3, [r7, #4]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	60f8      	str	r0, [r7, #12]
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	e009      	b.n	8000dfc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	1c5a      	adds	r2, r3, #1
 8000dec:	60ba      	str	r2, [r7, #8]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fbbb 	bl	800056c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	dbf1      	blt.n	8000de8 <_write+0x12>
  }
  return len;
 8000e04:	687b      	ldr	r3, [r7, #4]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_close>:

int _close(int file)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e36:	605a      	str	r2, [r3, #4]
  return 0;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <_isatty>:

int _isatty(int file)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e80:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <_sbrk+0x5c>)
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <_sbrk+0x60>)
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <_sbrk+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <_sbrk+0x64>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <_sbrk+0x68>)
 8000e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d207      	bcs.n	8000eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea8:	f007 fcde 	bl	8008868 <__errno>
 8000eac:	4603      	mov	r3, r0
 8000eae:	220c      	movs	r2, #12
 8000eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eb6:	e009      	b.n	8000ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <_sbrk+0x64>)
 8000ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20020000 	.word	0x20020000
 8000ed8:	00000400 	.word	0x00000400
 8000edc:	200001dc 	.word	0x200001dc
 8000ee0:	20000a10 	.word	0x20000a10

08000ee4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <SystemInit+0x20>)
 8000eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <SystemInit+0x20>)
 8000ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f0e:	490e      	ldr	r1, [pc, #56]	; (8000f48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f10:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f24:	4c0b      	ldr	r4, [pc, #44]	; (8000f54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f32:	f7ff ffd7 	bl	8000ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f36:	f007 fc9d 	bl	8008874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3a:	f7ff fb29 	bl	8000590 <main>
  bx  lr    
 8000f3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f48:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000f4c:	08009318 	.word	0x08009318
  ldr r2, =_sbss
 8000f50:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000f54:	20000a10 	.word	0x20000a10

08000f58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC_IRQHandler>
	...

08000f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <HAL_Init+0x40>)
 8000f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_Init+0x40>)
 8000f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_Init+0x40>)
 8000f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f000 f94f 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 f808 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f7ff fd50 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023c00 	.word	0x40023c00

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x58>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f967 	bl	8001292 <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00e      	b.n	8000fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d80a      	bhi.n	8000fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fdc:	f000 f92f 	bl	800123e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <HAL_InitTick+0x5c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000004 	.word	0x20000004

08001000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008
 8001024:	200001e0 	.word	0x200001e0

08001028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	200001e0 	.word	0x200001e0

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff ffee 	bl	8001028 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_Delay+0x44>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001066:	bf00      	nop
 8001068:	f7ff ffde 	bl	8001028 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000008 	.word	0x20000008

08001088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db0b      	blt.n	8001116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	4907      	ldr	r1, [pc, #28]	; (8001124 <__NVIC_EnableIRQ+0x38>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	2001      	movs	r0, #1
 800110e:	fa00 f202 	lsl.w	r2, r0, r2
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000e100 	.word	0xe000e100

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	; (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	; (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f4:	d301      	bcc.n	80011fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00f      	b.n	800121a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <SysTick_Config+0x40>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001202:	210f      	movs	r1, #15
 8001204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001208:	f7ff ff8e 	bl	8001128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <SysTick_Config+0x40>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SysTick_Config+0x40>)
 8001214:	2207      	movs	r2, #7
 8001216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	e000e010 	.word	0xe000e010

08001228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff29 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001250:	f7ff ff3e 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 8001254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff ff8e 	bl	800117c <NVIC_EncodePriority>
 8001260:	4602      	mov	r2, r0
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff5d 	bl	8001128 <__NVIC_SetPriority>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff31 	bl	80010ec <__NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffa2 	bl	80011e4 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	e16b      	b.n	80015a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	f040 815a 	bne.w	800159a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d005      	beq.n	80012fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d130      	bne.n	8001360 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001334:	2201      	movs	r2, #1
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	f003 0201 	and.w	r2, r3, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b03      	cmp	r3, #3
 800136a:	d017      	beq.n	800139c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d123      	bne.n	80013f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	69b9      	ldr	r1, [r7, #24]
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0203 	and.w	r2, r3, #3
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80b4 	beq.w	800159a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b60      	ldr	r3, [pc, #384]	; (80015b8 <HAL_GPIO_Init+0x30c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a5f      	ldr	r2, [pc, #380]	; (80015b8 <HAL_GPIO_Init+0x30c>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b5d      	ldr	r3, [pc, #372]	; (80015b8 <HAL_GPIO_Init+0x30c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800144e:	4a5b      	ldr	r2, [pc, #364]	; (80015bc <HAL_GPIO_Init+0x310>)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	3302      	adds	r3, #2
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	220f      	movs	r2, #15
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a52      	ldr	r2, [pc, #328]	; (80015c0 <HAL_GPIO_Init+0x314>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d02b      	beq.n	80014d2 <HAL_GPIO_Init+0x226>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a51      	ldr	r2, [pc, #324]	; (80015c4 <HAL_GPIO_Init+0x318>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d025      	beq.n	80014ce <HAL_GPIO_Init+0x222>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a50      	ldr	r2, [pc, #320]	; (80015c8 <HAL_GPIO_Init+0x31c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d01f      	beq.n	80014ca <HAL_GPIO_Init+0x21e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4f      	ldr	r2, [pc, #316]	; (80015cc <HAL_GPIO_Init+0x320>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d019      	beq.n	80014c6 <HAL_GPIO_Init+0x21a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4e      	ldr	r2, [pc, #312]	; (80015d0 <HAL_GPIO_Init+0x324>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_GPIO_Init+0x216>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4d      	ldr	r2, [pc, #308]	; (80015d4 <HAL_GPIO_Init+0x328>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00d      	beq.n	80014be <HAL_GPIO_Init+0x212>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4c      	ldr	r2, [pc, #304]	; (80015d8 <HAL_GPIO_Init+0x32c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d007      	beq.n	80014ba <HAL_GPIO_Init+0x20e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4b      	ldr	r2, [pc, #300]	; (80015dc <HAL_GPIO_Init+0x330>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_GPIO_Init+0x20a>
 80014b2:	2307      	movs	r3, #7
 80014b4:	e00e      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014b6:	2308      	movs	r3, #8
 80014b8:	e00c      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014ba:	2306      	movs	r3, #6
 80014bc:	e00a      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014be:	2305      	movs	r3, #5
 80014c0:	e008      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014c2:	2304      	movs	r3, #4
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014d2:	2300      	movs	r3, #0
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	f002 0203 	and.w	r2, r2, #3
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4093      	lsls	r3, r2
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e4:	4935      	ldr	r1, [pc, #212]	; (80015bc <HAL_GPIO_Init+0x310>)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <HAL_GPIO_Init+0x334>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001516:	4a32      	ldr	r2, [pc, #200]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800151c:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <HAL_GPIO_Init+0x334>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001540:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156a:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <HAL_GPIO_Init+0x334>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001594:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3301      	adds	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	2b0f      	cmp	r3, #15
 80015a4:	f67f ae90 	bls.w	80012c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40013800 	.word	0x40013800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40021400 	.word	0x40021400
 80015d8:	40021800 	.word	0x40021800
 80015dc:	40021c00 	.word	0x40021c00
 80015e0:	40013c00 	.word	0x40013c00

080015e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
 80015f0:	4613      	mov	r3, r2
 80015f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f4:	787b      	ldrb	r3, [r7, #1]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015fa:	887a      	ldrh	r2, [r7, #2]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001600:	e003      	b.n	800160a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001602:	887b      	ldrh	r3, [r7, #2]
 8001604:	041a      	lsls	r2, r3, #16
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	619a      	str	r2, [r3, #24]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001616:	b480      	push	{r7}
 8001618:	b085      	sub	sp, #20
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	460b      	mov	r3, r1
 8001620:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001628:	887a      	ldrh	r2, [r7, #2]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4013      	ands	r3, r2
 800162e:	041a      	lsls	r2, r3, #16
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43d9      	mvns	r1, r3
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	400b      	ands	r3, r1
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	619a      	str	r2, [r3, #24]
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800164a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164c:	b08f      	sub	sp, #60	; 0x3c
 800164e:	af0a      	add	r7, sp, #40	; 0x28
 8001650:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e054      	b.n	8001706 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d106      	bne.n	800167c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f006 fc2c 	bl	8007ed4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2203      	movs	r2, #3
 8001680:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fc58 	bl	8004f50 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	687e      	ldr	r6, [r7, #4]
 80016a8:	466d      	mov	r5, sp
 80016aa:	f106 0410 	add.w	r4, r6, #16
 80016ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80016be:	1d33      	adds	r3, r6, #4
 80016c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c2:	6838      	ldr	r0, [r7, #0]
 80016c4:	f003 fbd2 	bl	8004e6c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2101      	movs	r1, #1
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 fc4f 	bl	8004f72 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	687e      	ldr	r6, [r7, #4]
 80016dc:	466d      	mov	r5, sp
 80016de:	f106 0410 	add.w	r4, r6, #16
 80016e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80016f2:	1d33      	adds	r3, r6, #4
 80016f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f6:	6838      	ldr	r0, [r7, #0]
 80016f8:	f003 fdd8 	bl	80052ac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800170e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800170e:	b590      	push	{r4, r7, lr}
 8001710:	b089      	sub	sp, #36	; 0x24
 8001712:	af04      	add	r7, sp, #16
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	4608      	mov	r0, r1
 8001718:	4611      	mov	r1, r2
 800171a:	461a      	mov	r2, r3
 800171c:	4603      	mov	r3, r0
 800171e:	70fb      	strb	r3, [r7, #3]
 8001720:	460b      	mov	r3, r1
 8001722:	70bb      	strb	r3, [r7, #2]
 8001724:	4613      	mov	r3, r2
 8001726:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_HCD_HC_Init+0x28>
 8001732:	2302      	movs	r3, #2
 8001734:	e076      	b.n	8001824 <HAL_HCD_HC_Init+0x116>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	212c      	movs	r1, #44	; 0x2c
 8001744:	fb01 f303 	mul.w	r3, r1, r3
 8001748:	4413      	add	r3, r2
 800174a:	333d      	adds	r3, #61	; 0x3d
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	212c      	movs	r1, #44	; 0x2c
 8001756:	fb01 f303 	mul.w	r3, r1, r3
 800175a:	4413      	add	r3, r2
 800175c:	3338      	adds	r3, #56	; 0x38
 800175e:	787a      	ldrb	r2, [r7, #1]
 8001760:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	212c      	movs	r1, #44	; 0x2c
 8001768:	fb01 f303 	mul.w	r3, r1, r3
 800176c:	4413      	add	r3, r2
 800176e:	3340      	adds	r3, #64	; 0x40
 8001770:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001772:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	212c      	movs	r1, #44	; 0x2c
 800177a:	fb01 f303 	mul.w	r3, r1, r3
 800177e:	4413      	add	r3, r2
 8001780:	3339      	adds	r3, #57	; 0x39
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	212c      	movs	r1, #44	; 0x2c
 800178c:	fb01 f303 	mul.w	r3, r1, r3
 8001790:	4413      	add	r3, r2
 8001792:	333f      	adds	r3, #63	; 0x3f
 8001794:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001798:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	78ba      	ldrb	r2, [r7, #2]
 800179e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017a2:	b2d0      	uxtb	r0, r2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	212c      	movs	r1, #44	; 0x2c
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	333a      	adds	r3, #58	; 0x3a
 80017b0:	4602      	mov	r2, r0
 80017b2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80017b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	da09      	bge.n	80017d0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	212c      	movs	r1, #44	; 0x2c
 80017c2:	fb01 f303 	mul.w	r3, r1, r3
 80017c6:	4413      	add	r3, r2
 80017c8:	333b      	adds	r3, #59	; 0x3b
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	e008      	b.n	80017e2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	212c      	movs	r1, #44	; 0x2c
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	4413      	add	r3, r2
 80017dc:	333b      	adds	r3, #59	; 0x3b
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	212c      	movs	r1, #44	; 0x2c
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	333c      	adds	r3, #60	; 0x3c
 80017f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017f4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	787c      	ldrb	r4, [r7, #1]
 80017fc:	78ba      	ldrb	r2, [r7, #2]
 80017fe:	78f9      	ldrb	r1, [r7, #3]
 8001800:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001802:	9302      	str	r3, [sp, #8]
 8001804:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	4623      	mov	r3, r4
 8001812:	f003 fed1 	bl	80055b8 <USB_HC_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001822:	7bfb      	ldrb	r3, [r7, #15]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	bd90      	pop	{r4, r7, pc}

0800182c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_HCD_HC_Halt+0x1e>
 8001846:	2302      	movs	r3, #2
 8001848:	e00f      	b.n	800186a <HAL_HCD_HC_Halt+0x3e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f004 f921 	bl	8005aa2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	4608      	mov	r0, r1
 800187e:	4611      	mov	r1, r2
 8001880:	461a      	mov	r2, r3
 8001882:	4603      	mov	r3, r0
 8001884:	70fb      	strb	r3, [r7, #3]
 8001886:	460b      	mov	r3, r1
 8001888:	70bb      	strb	r3, [r7, #2]
 800188a:	4613      	mov	r3, r2
 800188c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	212c      	movs	r1, #44	; 0x2c
 8001894:	fb01 f303 	mul.w	r3, r1, r3
 8001898:	4413      	add	r3, r2
 800189a:	333b      	adds	r3, #59	; 0x3b
 800189c:	78ba      	ldrb	r2, [r7, #2]
 800189e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	212c      	movs	r1, #44	; 0x2c
 80018a6:	fb01 f303 	mul.w	r3, r1, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	333f      	adds	r3, #63	; 0x3f
 80018ae:	787a      	ldrb	r2, [r7, #1]
 80018b0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80018b2:	7c3b      	ldrb	r3, [r7, #16]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d112      	bne.n	80018de <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	212c      	movs	r1, #44	; 0x2c
 80018be:	fb01 f303 	mul.w	r3, r1, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	3342      	adds	r3, #66	; 0x42
 80018c6:	2203      	movs	r2, #3
 80018c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	212c      	movs	r1, #44	; 0x2c
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	333d      	adds	r3, #61	; 0x3d
 80018d8:	7f3a      	ldrb	r2, [r7, #28]
 80018da:	701a      	strb	r2, [r3, #0]
 80018dc:	e008      	b.n	80018f0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	212c      	movs	r1, #44	; 0x2c
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	3342      	adds	r3, #66	; 0x42
 80018ec:	2202      	movs	r2, #2
 80018ee:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018f0:	787b      	ldrb	r3, [r7, #1]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	f200 80c6 	bhi.w	8001a84 <HAL_HCD_HC_SubmitRequest+0x210>
 80018f8:	a201      	add	r2, pc, #4	; (adr r2, 8001900 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80018fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fe:	bf00      	nop
 8001900:	08001911 	.word	0x08001911
 8001904:	08001a71 	.word	0x08001a71
 8001908:	08001975 	.word	0x08001975
 800190c:	080019f3 	.word	0x080019f3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001910:	7c3b      	ldrb	r3, [r7, #16]
 8001912:	2b01      	cmp	r3, #1
 8001914:	f040 80b8 	bne.w	8001a88 <HAL_HCD_HC_SubmitRequest+0x214>
 8001918:	78bb      	ldrb	r3, [r7, #2]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f040 80b4 	bne.w	8001a88 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001920:	8b3b      	ldrh	r3, [r7, #24]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d108      	bne.n	8001938 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	212c      	movs	r1, #44	; 0x2c
 800192c:	fb01 f303 	mul.w	r3, r1, r3
 8001930:	4413      	add	r3, r2
 8001932:	3355      	adds	r3, #85	; 0x55
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	212c      	movs	r1, #44	; 0x2c
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	4413      	add	r3, r2
 8001944:	3355      	adds	r3, #85	; 0x55
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d109      	bne.n	8001960 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	212c      	movs	r1, #44	; 0x2c
 8001952:	fb01 f303 	mul.w	r3, r1, r3
 8001956:	4413      	add	r3, r2
 8001958:	3342      	adds	r3, #66	; 0x42
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800195e:	e093      	b.n	8001a88 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	212c      	movs	r1, #44	; 0x2c
 8001966:	fb01 f303 	mul.w	r3, r1, r3
 800196a:	4413      	add	r3, r2
 800196c:	3342      	adds	r3, #66	; 0x42
 800196e:	2202      	movs	r2, #2
 8001970:	701a      	strb	r2, [r3, #0]
      break;
 8001972:	e089      	b.n	8001a88 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001974:	78bb      	ldrb	r3, [r7, #2]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d11d      	bne.n	80019b6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	212c      	movs	r1, #44	; 0x2c
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	3355      	adds	r3, #85	; 0x55
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	212c      	movs	r1, #44	; 0x2c
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	3342      	adds	r3, #66	; 0x42
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019a0:	e073      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	212c      	movs	r1, #44	; 0x2c
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	3342      	adds	r3, #66	; 0x42
 80019b0:	2202      	movs	r2, #2
 80019b2:	701a      	strb	r2, [r3, #0]
      break;
 80019b4:	e069      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	212c      	movs	r1, #44	; 0x2c
 80019bc:	fb01 f303 	mul.w	r3, r1, r3
 80019c0:	4413      	add	r3, r2
 80019c2:	3354      	adds	r3, #84	; 0x54
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d109      	bne.n	80019de <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	212c      	movs	r1, #44	; 0x2c
 80019d0:	fb01 f303 	mul.w	r3, r1, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	3342      	adds	r3, #66	; 0x42
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
      break;
 80019dc:	e055      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	212c      	movs	r1, #44	; 0x2c
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	3342      	adds	r3, #66	; 0x42
 80019ec:	2202      	movs	r2, #2
 80019ee:	701a      	strb	r2, [r3, #0]
      break;
 80019f0:	e04b      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019f2:	78bb      	ldrb	r3, [r7, #2]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d11d      	bne.n	8001a34 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	212c      	movs	r1, #44	; 0x2c
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	3355      	adds	r3, #85	; 0x55
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d109      	bne.n	8001a20 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	212c      	movs	r1, #44	; 0x2c
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	3342      	adds	r3, #66	; 0x42
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a1e:	e034      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	212c      	movs	r1, #44	; 0x2c
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3342      	adds	r3, #66	; 0x42
 8001a2e:	2202      	movs	r2, #2
 8001a30:	701a      	strb	r2, [r3, #0]
      break;
 8001a32:	e02a      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	212c      	movs	r1, #44	; 0x2c
 8001a3a:	fb01 f303 	mul.w	r3, r1, r3
 8001a3e:	4413      	add	r3, r2
 8001a40:	3354      	adds	r3, #84	; 0x54
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d109      	bne.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	212c      	movs	r1, #44	; 0x2c
 8001a4e:	fb01 f303 	mul.w	r3, r1, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	3342      	adds	r3, #66	; 0x42
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
      break;
 8001a5a:	e016      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	212c      	movs	r1, #44	; 0x2c
 8001a62:	fb01 f303 	mul.w	r3, r1, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	3342      	adds	r3, #66	; 0x42
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	701a      	strb	r2, [r3, #0]
      break;
 8001a6e:	e00c      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	212c      	movs	r1, #44	; 0x2c
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3342      	adds	r3, #66	; 0x42
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
      break;
 8001a82:	e002      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a84:	bf00      	nop
 8001a86:	e000      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a88:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	212c      	movs	r1, #44	; 0x2c
 8001a90:	fb01 f303 	mul.w	r3, r1, r3
 8001a94:	4413      	add	r3, r2
 8001a96:	3344      	adds	r3, #68	; 0x44
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	8b3a      	ldrh	r2, [r7, #24]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	202c      	movs	r0, #44	; 0x2c
 8001aa4:	fb00 f303 	mul.w	r3, r0, r3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	334c      	adds	r3, #76	; 0x4c
 8001aac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	212c      	movs	r1, #44	; 0x2c
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	3360      	adds	r3, #96	; 0x60
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	212c      	movs	r1, #44	; 0x2c
 8001ac6:	fb01 f303 	mul.w	r3, r1, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	3350      	adds	r3, #80	; 0x50
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	212c      	movs	r1, #44	; 0x2c
 8001ad8:	fb01 f303 	mul.w	r3, r1, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	3339      	adds	r3, #57	; 0x39
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	212c      	movs	r1, #44	; 0x2c
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	3361      	adds	r3, #97	; 0x61
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	222c      	movs	r2, #44	; 0x2c
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	3338      	adds	r3, #56	; 0x38
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	18d1      	adds	r1, r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	f003 fe74 	bl	80057fc <USB_HC_StartXfer>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop

08001b20 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fb75 	bl	8005226 <USB_GetMode>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	f040 80f6 	bne.w	8001d30 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 fb59 	bl	8005200 <USB_ReadInterrupts>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80ec 	beq.w	8001d2e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 fb50 	bl	8005200 <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b6a:	d104      	bne.n	8001b76 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 fb40 	bl	8005200 <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b8a:	d104      	bne.n	8001b96 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 fb30 	bl	8005200 <USB_ReadInterrupts>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ba6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001baa:	d104      	bne.n	8001bb6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bb4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 fb20 	bl	8005200 <USB_ReadInterrupts>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d103      	bne.n	8001bd2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 fb12 	bl	8005200 <USB_ReadInterrupts>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001be6:	d11c      	bne.n	8001c22 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bf0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10f      	bne.n	8001c22 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c02:	2110      	movs	r1, #16
 8001c04:	6938      	ldr	r0, [r7, #16]
 8001c06:	f003 fa01 	bl	800500c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c0a:	6938      	ldr	r0, [r7, #16]
 8001c0c:	f003 fa32 	bl	8005074 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2101      	movs	r1, #1
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fc08 	bl	800542c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f006 f9d7 	bl	8007fd0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 faea 	bl	8005200 <USB_ReadInterrupts>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c36:	d102      	bne.n	8001c3e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f001 f89e 	bl	8002d7a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 fadc 	bl	8005200 <USB_ReadInterrupts>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d106      	bne.n	8001c60 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f006 f9a0 	bl	8007f98 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 facb 	bl	8005200 <USB_ReadInterrupts>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b10      	cmp	r3, #16
 8001c72:	d101      	bne.n	8001c78 <HAL_HCD_IRQHandler+0x158>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <HAL_HCD_IRQHandler+0x15a>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d012      	beq.n	8001ca4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699a      	ldr	r2, [r3, #24]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0210 	bic.w	r2, r2, #16
 8001c8c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 ffa1 	bl	8002bd6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699a      	ldr	r2, [r3, #24]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0210 	orr.w	r2, r2, #16
 8001ca2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f003 faa9 	bl	8005200 <USB_ReadInterrupts>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cb8:	d13a      	bne.n	8001d30 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f003 fede 	bl	8005a80 <USB_HC_ReadInterrupt>
 8001cc4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e025      	b.n	8001d18 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d018      	beq.n	8001d12 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cf6:	d106      	bne.n	8001d06 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8ab 	bl	8001e5a <HCD_HC_IN_IRQHandler>
 8001d04:	e005      	b.n	8001d12 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fbf9 	bl	8002504 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3301      	adds	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d3d4      	bcc.n	8001ccc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d2a:	615a      	str	r2, [r3, #20]
 8001d2c:	e000      	b.n	8001d30 <HAL_HCD_IRQHandler+0x210>
      return;
 8001d2e:	bf00      	nop
    }
  }
}
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_HCD_Start+0x16>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e013      	b.n	8001d74 <HAL_HCD_Start+0x3e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2101      	movs	r1, #1
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 fbca 	bl	80054f4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 f8e2 	bl	8004f2e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_HCD_Stop+0x16>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e00d      	b.n	8001dae <HAL_HCD_Stop+0x32>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 ffb8 	bl	8005d14 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 fb6c 	bl	80054a0 <USB_ResetPort>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	212c      	movs	r1, #44	; 0x2c
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	3360      	adds	r3, #96	; 0x60
 8001dec:	781b      	ldrb	r3, [r3, #0]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	212c      	movs	r1, #44	; 0x2c
 8001e0c:	fb01 f303 	mul.w	r3, r1, r3
 8001e10:	4413      	add	r3, r2
 8001e12:	3350      	adds	r3, #80	; 0x50
 8001e14:	681b      	ldr	r3, [r3, #0]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 fbb0 	bl	8005594 <USB_GetCurrentFrame>
 8001e34:	4603      	mov	r3, r0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 fb8b 	bl	8005566 <USB_GetHostSpeed>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	460b      	mov	r3, r1
 8001e64:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d11a      	bne.n	8001ec0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	015a      	lsls	r2, r3, #5
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e96:	461a      	mov	r2, r3
 8001e98:	2304      	movs	r3, #4
 8001e9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	212c      	movs	r1, #44	; 0x2c
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3361      	adds	r3, #97	; 0x61
 8001eaa:	2206      	movs	r2, #6
 8001eac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 fdf2 	bl	8005aa2 <USB_HC_Halt>
 8001ebe:	e0af      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed6:	d11b      	bne.n	8001f10 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	015a      	lsls	r2, r3, #5
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	212c      	movs	r1, #44	; 0x2c
 8001ef2:	fb01 f303 	mul.w	r3, r1, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3361      	adds	r3, #97	; 0x61
 8001efa:	2207      	movs	r2, #7
 8001efc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 fdca 	bl	8005aa2 <USB_HC_Halt>
 8001f0e:	e087      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 0320 	and.w	r3, r3, #32
 8001f22:	2b20      	cmp	r3, #32
 8001f24:	d109      	bne.n	8001f3a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f32:	461a      	mov	r2, r3
 8001f34:	2320      	movs	r3, #32
 8001f36:	6093      	str	r3, [r2, #8]
 8001f38:	e072      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d11a      	bne.n	8001f86 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	2308      	movs	r3, #8
 8001f60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	212c      	movs	r1, #44	; 0x2c
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3361      	adds	r3, #97	; 0x61
 8001f70:	2205      	movs	r2, #5
 8001f72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fd8f 	bl	8005aa2 <USB_HC_Halt>
 8001f84:	e04c      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9c:	d11b      	bne.n	8001fd6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001faa:	461a      	mov	r2, r3
 8001fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	212c      	movs	r1, #44	; 0x2c
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3361      	adds	r3, #97	; 0x61
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 fd67 	bl	8005aa2 <USB_HC_Halt>
 8001fd4:	e024      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe8:	2b80      	cmp	r3, #128	; 0x80
 8001fea:	d119      	bne.n	8002020 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	212c      	movs	r1, #44	; 0x2c
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	4413      	add	r3, r2
 800200a:	3361      	adds	r3, #97	; 0x61
 800200c:	2206      	movs	r2, #6
 800200e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f003 fd41 	bl	8005aa2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002036:	d112      	bne.n	800205e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f003 fd2d 	bl	8005aa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002054:	461a      	mov	r2, r3
 8002056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800205a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800205c:	e24e      	b.n	80024fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4413      	add	r3, r2
 8002066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	f040 80df 	bne.w	8002234 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d019      	beq.n	80020b2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	212c      	movs	r1, #44	; 0x2c
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	4413      	add	r3, r2
 800208a:	3348      	adds	r3, #72	; 0x48
 800208c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	0159      	lsls	r1, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	440b      	add	r3, r1
 8002096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80020a0:	1ad2      	subs	r2, r2, r3
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	202c      	movs	r0, #44	; 0x2c
 80020a8:	fb00 f303 	mul.w	r3, r0, r3
 80020ac:	440b      	add	r3, r1
 80020ae:	3350      	adds	r3, #80	; 0x50
 80020b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	212c      	movs	r1, #44	; 0x2c
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	3361      	adds	r3, #97	; 0x61
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	212c      	movs	r1, #44	; 0x2c
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	335c      	adds	r3, #92	; 0x5c
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e2:	461a      	mov	r2, r3
 80020e4:	2301      	movs	r3, #1
 80020e6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	212c      	movs	r1, #44	; 0x2c
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	333f      	adds	r3, #63	; 0x3f
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d009      	beq.n	8002110 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	333f      	adds	r3, #63	; 0x3f
 800210a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800210c:	2b02      	cmp	r3, #2
 800210e:	d111      	bne.n	8002134 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f003 fcc1 	bl	8005aa2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212c:	461a      	mov	r2, r3
 800212e:	2310      	movs	r3, #16
 8002130:	6093      	str	r3, [r2, #8]
 8002132:	e03a      	b.n	80021aa <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	333f      	adds	r3, #63	; 0x3f
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d009      	beq.n	800215c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	212c      	movs	r1, #44	; 0x2c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	333f      	adds	r3, #63	; 0x3f
 8002156:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002158:	2b01      	cmp	r3, #1
 800215a:	d126      	bne.n	80021aa <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4413      	add	r3, r2
 8002164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	0151      	lsls	r1, r2, #5
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	440a      	add	r2, r1
 8002172:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002176:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800217a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	3360      	adds	r3, #96	; 0x60
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	b2d9      	uxtb	r1, r3
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	202c      	movs	r0, #44	; 0x2c
 8002198:	fb00 f303 	mul.w	r3, r0, r3
 800219c:	4413      	add	r3, r2
 800219e:	3360      	adds	r3, #96	; 0x60
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f005 ff21 	bl	8007fec <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d12b      	bne.n	800220a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	212c      	movs	r1, #44	; 0x2c
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	3348      	adds	r3, #72	; 0x48
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	202c      	movs	r0, #44	; 0x2c
 80021c8:	fb00 f202 	mul.w	r2, r0, r2
 80021cc:	440a      	add	r2, r1
 80021ce:	3240      	adds	r2, #64	; 0x40
 80021d0:	8812      	ldrh	r2, [r2, #0]
 80021d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 818e 	beq.w	80024fc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3354      	adds	r3, #84	; 0x54
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	f083 0301 	eor.w	r3, r3, #1
 80021f4:	b2d8      	uxtb	r0, r3
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	212c      	movs	r1, #44	; 0x2c
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	3354      	adds	r3, #84	; 0x54
 8002204:	4602      	mov	r2, r0
 8002206:	701a      	strb	r2, [r3, #0]
}
 8002208:	e178      	b.n	80024fc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	3354      	adds	r3, #84	; 0x54
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	f083 0301 	eor.w	r3, r3, #1
 800221e:	b2d8      	uxtb	r0, r3
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	212c      	movs	r1, #44	; 0x2c
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	3354      	adds	r3, #84	; 0x54
 800222e:	4602      	mov	r2, r0
 8002230:	701a      	strb	r2, [r3, #0]
}
 8002232:	e163      	b.n	80024fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4413      	add	r3, r2
 800223c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b02      	cmp	r3, #2
 8002248:	f040 80f6 	bne.w	8002438 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	212c      	movs	r1, #44	; 0x2c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	3361      	adds	r3, #97	; 0x61
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d109      	bne.n	8002274 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	212c      	movs	r1, #44	; 0x2c
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	3360      	adds	r3, #96	; 0x60
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	e0c9      	b.n	8002408 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3361      	adds	r3, #97	; 0x61
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b05      	cmp	r3, #5
 8002286:	d109      	bne.n	800229c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	3360      	adds	r3, #96	; 0x60
 8002296:	2205      	movs	r2, #5
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e0b5      	b.n	8002408 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	3361      	adds	r3, #97	; 0x61
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b06      	cmp	r3, #6
 80022ae:	d009      	beq.n	80022c4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	3361      	adds	r3, #97	; 0x61
 80022be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d150      	bne.n	8002366 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	212c      	movs	r1, #44	; 0x2c
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	335c      	adds	r3, #92	; 0x5c
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	202c      	movs	r0, #44	; 0x2c
 80022dc:	fb00 f303 	mul.w	r3, r0, r3
 80022e0:	440b      	add	r3, r1
 80022e2:	335c      	adds	r3, #92	; 0x5c
 80022e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	335c      	adds	r3, #92	; 0x5c
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d912      	bls.n	8002320 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	335c      	adds	r3, #92	; 0x5c
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	212c      	movs	r1, #44	; 0x2c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	3360      	adds	r3, #96	; 0x60
 800231a:	2204      	movs	r2, #4
 800231c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800231e:	e073      	b.n	8002408 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	3360      	adds	r3, #96	; 0x60
 800232e:	2202      	movs	r2, #2
 8002330:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002348:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002350:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4413      	add	r3, r2
 800235a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235e:	461a      	mov	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002364:	e050      	b.n	8002408 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	212c      	movs	r1, #44	; 0x2c
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	4413      	add	r3, r2
 8002372:	3361      	adds	r3, #97	; 0x61
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d122      	bne.n	80023c0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	212c      	movs	r1, #44	; 0x2c
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	3360      	adds	r3, #96	; 0x60
 8002388:	2202      	movs	r2, #2
 800238a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b8:	461a      	mov	r2, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e023      	b.n	8002408 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	212c      	movs	r1, #44	; 0x2c
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	3361      	adds	r3, #97	; 0x61
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b07      	cmp	r3, #7
 80023d2:	d119      	bne.n	8002408 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	335c      	adds	r3, #92	; 0x5c
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	202c      	movs	r0, #44	; 0x2c
 80023ec:	fb00 f303 	mul.w	r3, r0, r3
 80023f0:	440b      	add	r3, r1
 80023f2:	335c      	adds	r3, #92	; 0x5c
 80023f4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	212c      	movs	r1, #44	; 0x2c
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	3360      	adds	r3, #96	; 0x60
 8002404:	2204      	movs	r2, #4
 8002406:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002414:	461a      	mov	r2, r3
 8002416:	2302      	movs	r3, #2
 8002418:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	b2d9      	uxtb	r1, r3
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	202c      	movs	r0, #44	; 0x2c
 8002424:	fb00 f303 	mul.w	r3, r0, r3
 8002428:	4413      	add	r3, r2
 800242a:	3360      	adds	r3, #96	; 0x60
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f005 fddb 	bl	8007fec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002436:	e061      	b.n	80024fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b10      	cmp	r3, #16
 800244c:	d156      	bne.n	80024fc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	333f      	adds	r3, #63	; 0x3f
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d111      	bne.n	8002486 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	335c      	adds	r3, #92	; 0x5c
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f003 fb0f 	bl	8005aa2 <USB_HC_Halt>
 8002484:	e031      	b.n	80024ea <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	333f      	adds	r3, #63	; 0x3f
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	333f      	adds	r3, #63	; 0x3f
 80024a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d11d      	bne.n	80024ea <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	335c      	adds	r3, #92	; 0x5c
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d110      	bne.n	80024ea <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3361      	adds	r3, #97	; 0x61
 80024d6:	2203      	movs	r2, #3
 80024d8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f003 fadc 	bl	8005aa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f6:	461a      	mov	r2, r3
 80024f8:	2310      	movs	r3, #16
 80024fa:	6093      	str	r3, [r2, #8]
}
 80024fc:	bf00      	nop
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	4413      	add	r3, r2
 8002526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b04      	cmp	r3, #4
 8002532:	d11a      	bne.n	800256a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	461a      	mov	r2, r3
 8002542:	2304      	movs	r3, #4
 8002544:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	212c      	movs	r1, #44	; 0x2c
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	3361      	adds	r3, #97	; 0x61
 8002554:	2206      	movs	r2, #6
 8002556:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f003 fa9d 	bl	8005aa2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002568:	e331      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b20      	cmp	r3, #32
 800257e:	d12e      	bne.n	80025de <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258c:	461a      	mov	r2, r3
 800258e:	2320      	movs	r3, #32
 8002590:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	212c      	movs	r1, #44	; 0x2c
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	4413      	add	r3, r2
 800259e:	333d      	adds	r3, #61	; 0x3d
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	f040 8313 	bne.w	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	333d      	adds	r3, #61	; 0x3d
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	3360      	adds	r3, #96	; 0x60
 80025c8:	2202      	movs	r2, #2
 80025ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f003 fa63 	bl	8005aa2 <USB_HC_Halt>
}
 80025dc:	e2f7      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025f4:	d112      	bne.n	800261c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002602:	461a      	mov	r2, r3
 8002604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002608:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f003 fa44 	bl	8005aa2 <USB_HC_Halt>
}
 800261a:	e2d8      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b01      	cmp	r3, #1
 8002630:	d140      	bne.n	80026b4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	212c      	movs	r1, #44	; 0x2c
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	4413      	add	r3, r2
 800263e:	335c      	adds	r3, #92	; 0x5c
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002656:	2b40      	cmp	r3, #64	; 0x40
 8002658:	d111      	bne.n	800267e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	333d      	adds	r3, #61	; 0x3d
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002678:	461a      	mov	r2, r3
 800267a:	2340      	movs	r3, #64	; 0x40
 800267c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268a:	461a      	mov	r2, r3
 800268c:	2301      	movs	r3, #1
 800268e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	212c      	movs	r1, #44	; 0x2c
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	4413      	add	r3, r2
 800269c:	3361      	adds	r3, #97	; 0x61
 800269e:	2201      	movs	r2, #1
 80026a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f003 f9f8 	bl	8005aa2 <USB_HC_Halt>
}
 80026b2:	e28c      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c6:	2b40      	cmp	r3, #64	; 0x40
 80026c8:	d12c      	bne.n	8002724 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	212c      	movs	r1, #44	; 0x2c
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	3361      	adds	r3, #97	; 0x61
 80026d8:	2204      	movs	r2, #4
 80026da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	212c      	movs	r1, #44	; 0x2c
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	333d      	adds	r3, #61	; 0x3d
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	335c      	adds	r3, #92	; 0x5c
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f003 f9c9 	bl	8005aa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	4413      	add	r3, r2
 8002718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271c:	461a      	mov	r2, r3
 800271e:	2340      	movs	r3, #64	; 0x40
 8002720:	6093      	str	r3, [r2, #8]
}
 8002722:	e254      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b08      	cmp	r3, #8
 8002738:	d11a      	bne.n	8002770 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	4413      	add	r3, r2
 8002742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002746:	461a      	mov	r2, r3
 8002748:	2308      	movs	r3, #8
 800274a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	3361      	adds	r3, #97	; 0x61
 800275a:	2205      	movs	r2, #5
 800275c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f003 f99a 	bl	8005aa2 <USB_HC_Halt>
}
 800276e:	e22e      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b10      	cmp	r3, #16
 8002784:	d140      	bne.n	8002808 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	335c      	adds	r3, #92	; 0x5c
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	212c      	movs	r1, #44	; 0x2c
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	3361      	adds	r3, #97	; 0x61
 80027a6:	2203      	movs	r2, #3
 80027a8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	212c      	movs	r1, #44	; 0x2c
 80027b0:	fb01 f303 	mul.w	r3, r1, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	333d      	adds	r3, #61	; 0x3d
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d112      	bne.n	80027e4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	333c      	adds	r3, #60	; 0x3c
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d108      	bne.n	80027e4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	212c      	movs	r1, #44	; 0x2c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	333d      	adds	r3, #61	; 0x3d
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f003 f957 	bl	8005aa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002800:	461a      	mov	r2, r3
 8002802:	2310      	movs	r3, #16
 8002804:	6093      	str	r3, [r2, #8]
}
 8002806:	e1e2      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281a:	2b80      	cmp	r3, #128	; 0x80
 800281c:	d164      	bne.n	80028e8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d111      	bne.n	800284a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	212c      	movs	r1, #44	; 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	3361      	adds	r3, #97	; 0x61
 8002834:	2206      	movs	r2, #6
 8002836:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f003 f92d 	bl	8005aa2 <USB_HC_Halt>
 8002848:	e044      	b.n	80028d4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	212c      	movs	r1, #44	; 0x2c
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	4413      	add	r3, r2
 8002856:	335c      	adds	r3, #92	; 0x5c
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	202c      	movs	r0, #44	; 0x2c
 8002862:	fb00 f303 	mul.w	r3, r0, r3
 8002866:	440b      	add	r3, r1
 8002868:	335c      	adds	r3, #92	; 0x5c
 800286a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	335c      	adds	r3, #92	; 0x5c
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d920      	bls.n	80028c2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	335c      	adds	r3, #92	; 0x5c
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	3360      	adds	r3, #96	; 0x60
 80028a0:	2204      	movs	r2, #4
 80028a2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	b2d9      	uxtb	r1, r3
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	202c      	movs	r0, #44	; 0x2c
 80028ae:	fb00 f303 	mul.w	r3, r0, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	3360      	adds	r3, #96	; 0x60
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f005 fb96 	bl	8007fec <HAL_HCD_HC_NotifyURBChange_Callback>
 80028c0:	e008      	b.n	80028d4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	3360      	adds	r3, #96	; 0x60
 80028d0:	2202      	movs	r2, #2
 80028d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e0:	461a      	mov	r2, r3
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	6093      	str	r3, [r2, #8]
}
 80028e6:	e172      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028fe:	d11b      	bne.n	8002938 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3361      	adds	r3, #97	; 0x61
 800290e:	2208      	movs	r2, #8
 8002910:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f003 f8c0 	bl	8005aa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4413      	add	r3, r2
 800292a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292e:	461a      	mov	r2, r3
 8002930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002934:	6093      	str	r3, [r2, #8]
}
 8002936:	e14a      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	4413      	add	r3, r2
 8002940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b02      	cmp	r3, #2
 800294c:	f040 813f 	bne.w	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	3361      	adds	r3, #97	; 0x61
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d17d      	bne.n	8002a60 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	3360      	adds	r3, #96	; 0x60
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	333f      	adds	r3, #63	; 0x3f
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d00a      	beq.n	80029a0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	212c      	movs	r1, #44	; 0x2c
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	4413      	add	r3, r2
 8002996:	333f      	adds	r3, #63	; 0x3f
 8002998:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800299a:	2b03      	cmp	r3, #3
 800299c:	f040 8100 	bne.w	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d113      	bne.n	80029d0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	3355      	adds	r3, #85	; 0x55
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	f083 0301 	eor.w	r3, r3, #1
 80029bc:	b2d8      	uxtb	r0, r3
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	3355      	adds	r3, #85	; 0x55
 80029cc:	4602      	mov	r2, r0
 80029ce:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	f040 80e3 	bne.w	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	212c      	movs	r1, #44	; 0x2c
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	334c      	adds	r3, #76	; 0x4c
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80d8 	beq.w	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	334c      	adds	r3, #76	; 0x4c
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	202c      	movs	r0, #44	; 0x2c
 8002a06:	fb00 f202 	mul.w	r2, r0, r2
 8002a0a:	440a      	add	r2, r1
 8002a0c:	3240      	adds	r2, #64	; 0x40
 8002a0e:	8812      	ldrh	r2, [r2, #0]
 8002a10:	4413      	add	r3, r2
 8002a12:	3b01      	subs	r3, #1
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	202c      	movs	r0, #44	; 0x2c
 8002a1a:	fb00 f202 	mul.w	r2, r0, r2
 8002a1e:	440a      	add	r2, r1
 8002a20:	3240      	adds	r2, #64	; 0x40
 8002a22:	8812      	ldrh	r2, [r2, #0]
 8002a24:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80b5 	beq.w	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	212c      	movs	r1, #44	; 0x2c
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	3355      	adds	r3, #85	; 0x55
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	f083 0301 	eor.w	r3, r3, #1
 8002a4a:	b2d8      	uxtb	r0, r3
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	3355      	adds	r3, #85	; 0x55
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	e09f      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	212c      	movs	r1, #44	; 0x2c
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3361      	adds	r3, #97	; 0x61
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d109      	bne.n	8002a88 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3360      	adds	r3, #96	; 0x60
 8002a82:	2202      	movs	r2, #2
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	e08b      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3361      	adds	r3, #97	; 0x61
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d109      	bne.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3360      	adds	r3, #96	; 0x60
 8002aaa:	2202      	movs	r2, #2
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	e077      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	3361      	adds	r3, #97	; 0x61
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	d109      	bne.n	8002ad8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3360      	adds	r3, #96	; 0x60
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e063      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3361      	adds	r3, #97	; 0x61
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b06      	cmp	r3, #6
 8002aea:	d009      	beq.n	8002b00 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3361      	adds	r3, #97	; 0x61
 8002afa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d14f      	bne.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	212c      	movs	r1, #44	; 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	335c      	adds	r3, #92	; 0x5c
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	202c      	movs	r0, #44	; 0x2c
 8002b18:	fb00 f303 	mul.w	r3, r0, r3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	335c      	adds	r3, #92	; 0x5c
 8002b20:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	335c      	adds	r3, #92	; 0x5c
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d912      	bls.n	8002b5c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	335c      	adds	r3, #92	; 0x5c
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	212c      	movs	r1, #44	; 0x2c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	3360      	adds	r3, #96	; 0x60
 8002b56:	2204      	movs	r2, #4
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	e021      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	3360      	adds	r3, #96	; 0x60
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b84:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b8c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bac:	461a      	mov	r2, r3
 8002bae:	2302      	movs	r3, #2
 8002bb0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	b2d9      	uxtb	r1, r3
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	202c      	movs	r0, #44	; 0x2c
 8002bbc:	fb00 f303 	mul.w	r3, r0, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3360      	adds	r3, #96	; 0x60
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f005 fa0f 	bl	8007fec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bce:	bf00      	nop
 8002bd0:	3720      	adds	r7, #32
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b08a      	sub	sp, #40	; 0x28
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	0c5b      	lsrs	r3, r3, #17
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c0a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d004      	beq.n	8002c1c <HCD_RXQLVL_IRQHandler+0x46>
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	f000 80a9 	beq.w	8002d6c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c1a:	e0aa      	b.n	8002d72 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 80a6 	beq.w	8002d70 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3344      	adds	r3, #68	; 0x44
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 809b 	beq.w	8002d70 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	3350      	adds	r3, #80	; 0x50
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	441a      	add	r2, r3
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	202c      	movs	r0, #44	; 0x2c
 8002c54:	fb00 f303 	mul.w	r3, r0, r3
 8002c58:	440b      	add	r3, r1
 8002c5a:	334c      	adds	r3, #76	; 0x4c
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d87a      	bhi.n	8002d58 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	212c      	movs	r1, #44	; 0x2c
 8002c6c:	fb01 f303 	mul.w	r3, r1, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	3344      	adds	r3, #68	; 0x44
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	b292      	uxth	r2, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f002 fa68 	bl	8005150 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3344      	adds	r3, #68	; 0x44
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	441a      	add	r2, r3
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	202c      	movs	r0, #44	; 0x2c
 8002c9a:	fb00 f303 	mul.w	r3, r0, r3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3344      	adds	r3, #68	; 0x44
 8002ca2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3350      	adds	r3, #80	; 0x50
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	441a      	add	r2, r3
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	202c      	movs	r0, #44	; 0x2c
 8002cbe:	fb00 f303 	mul.w	r3, r0, r3
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3350      	adds	r3, #80	; 0x50
 8002cc6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	0cdb      	lsrs	r3, r3, #19
 8002cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cdc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	3340      	adds	r3, #64	; 0x40
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d13c      	bne.n	8002d70 <HCD_RXQLVL_IRQHandler+0x19a>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d039      	beq.n	8002d70 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d12:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d1a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d28:	461a      	mov	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3354      	adds	r3, #84	; 0x54
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	f083 0301 	eor.w	r3, r3, #1
 8002d42:	b2d8      	uxtb	r0, r3
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3354      	adds	r3, #84	; 0x54
 8002d52:	4602      	mov	r2, r0
 8002d54:	701a      	strb	r2, [r3, #0]
      break;
 8002d56:	e00b      	b.n	8002d70 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3360      	adds	r3, #96	; 0x60
 8002d66:	2204      	movs	r2, #4
 8002d68:	701a      	strb	r2, [r3, #0]
      break;
 8002d6a:	e001      	b.n	8002d70 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d6c:	bf00      	nop
 8002d6e:	e000      	b.n	8002d72 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d70:	bf00      	nop
  }
}
 8002d72:	bf00      	nop
 8002d74:	3728      	adds	r7, #40	; 0x28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002da6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d10b      	bne.n	8002dca <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d102      	bne.n	8002dc2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f005 f8f9 	bl	8007fb4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f043 0302 	orr.w	r3, r3, #2
 8002dc8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d132      	bne.n	8002e3a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f043 0308 	orr.w	r3, r3, #8
 8002dda:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d126      	bne.n	8002e34 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d113      	bne.n	8002e16 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002df4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002df8:	d106      	bne.n	8002e08 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2102      	movs	r1, #2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f002 fb13 	bl	800542c <USB_InitFSLSPClkSel>
 8002e06:	e011      	b.n	8002e2c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f002 fb0c 	bl	800542c <USB_InitFSLSPClkSel>
 8002e14:	e00a      	b.n	8002e2c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d106      	bne.n	8002e2c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e24:	461a      	mov	r2, r3
 8002e26:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e2a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f005 f8eb 	bl	8008008 <HAL_HCD_PortEnabled_Callback>
 8002e32:	e002      	b.n	8002e3a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f005 f8f5 	bl	8008024 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d103      	bne.n	8002e4c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f043 0320 	orr.w	r3, r3, #32
 8002e4a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e52:	461a      	mov	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	6013      	str	r3, [r2, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e12b      	b.n	80030ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fd fdfc 	bl	8000a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2224      	movs	r2, #36	; 0x24
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0201 	bic.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ec2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ec4:	f001 fa20 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 8002ec8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4a81      	ldr	r2, [pc, #516]	; (80030d4 <HAL_I2C_Init+0x274>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d807      	bhi.n	8002ee4 <HAL_I2C_Init+0x84>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4a80      	ldr	r2, [pc, #512]	; (80030d8 <HAL_I2C_Init+0x278>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	bf94      	ite	ls
 8002edc:	2301      	movls	r3, #1
 8002ede:	2300      	movhi	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e006      	b.n	8002ef2 <HAL_I2C_Init+0x92>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4a7d      	ldr	r2, [pc, #500]	; (80030dc <HAL_I2C_Init+0x27c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	bf94      	ite	ls
 8002eec:	2301      	movls	r3, #1
 8002eee:	2300      	movhi	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e0e7      	b.n	80030ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4a78      	ldr	r2, [pc, #480]	; (80030e0 <HAL_I2C_Init+0x280>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	0c9b      	lsrs	r3, r3, #18
 8002f04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4a6a      	ldr	r2, [pc, #424]	; (80030d4 <HAL_I2C_Init+0x274>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d802      	bhi.n	8002f34 <HAL_I2C_Init+0xd4>
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	3301      	adds	r3, #1
 8002f32:	e009      	b.n	8002f48 <HAL_I2C_Init+0xe8>
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f3a:	fb02 f303 	mul.w	r3, r2, r3
 8002f3e:	4a69      	ldr	r2, [pc, #420]	; (80030e4 <HAL_I2C_Init+0x284>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	099b      	lsrs	r3, r3, #6
 8002f46:	3301      	adds	r3, #1
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	495c      	ldr	r1, [pc, #368]	; (80030d4 <HAL_I2C_Init+0x274>)
 8002f64:	428b      	cmp	r3, r1
 8002f66:	d819      	bhi.n	8002f9c <HAL_I2C_Init+0x13c>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1e59      	subs	r1, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f76:	1c59      	adds	r1, r3, #1
 8002f78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f7c:	400b      	ands	r3, r1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_I2C_Init+0x138>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1e59      	subs	r1, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f90:	3301      	adds	r3, #1
 8002f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f96:	e051      	b.n	800303c <HAL_I2C_Init+0x1dc>
 8002f98:	2304      	movs	r3, #4
 8002f9a:	e04f      	b.n	800303c <HAL_I2C_Init+0x1dc>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d111      	bne.n	8002fc8 <HAL_I2C_Init+0x168>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1e58      	subs	r0, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	440b      	add	r3, r1
 8002fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2301      	moveq	r3, #1
 8002fc2:	2300      	movne	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	e012      	b.n	8002fee <HAL_I2C_Init+0x18e>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	1e58      	subs	r0, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	0099      	lsls	r1, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_I2C_Init+0x196>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e022      	b.n	800303c <HAL_I2C_Init+0x1dc>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10e      	bne.n	800301c <HAL_I2C_Init+0x1bc>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	1e58      	subs	r0, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6859      	ldr	r1, [r3, #4]
 8003006:	460b      	mov	r3, r1
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	440b      	add	r3, r1
 800300c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003010:	3301      	adds	r3, #1
 8003012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800301a:	e00f      	b.n	800303c <HAL_I2C_Init+0x1dc>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1e58      	subs	r0, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	0099      	lsls	r1, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003032:	3301      	adds	r3, #1
 8003034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003038:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	6809      	ldr	r1, [r1, #0]
 8003040:	4313      	orrs	r3, r2
 8003042:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800306a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6911      	ldr	r1, [r2, #16]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68d2      	ldr	r2, [r2, #12]
 8003076:	4311      	orrs	r1, r2
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	430b      	orrs	r3, r1
 800307e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	000186a0 	.word	0x000186a0
 80030d8:	001e847f 	.word	0x001e847f
 80030dc:	003d08ff 	.word	0x003d08ff
 80030e0:	431bde83 	.word	0x431bde83
 80030e4:	10624dd3 	.word	0x10624dd3

080030e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e128      	b.n	800334c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a90      	ldr	r2, [pc, #576]	; (8003354 <HAL_I2S_Init+0x26c>)
 8003112:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7fd fcfd 	bl	8000b14 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2202      	movs	r2, #2
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003130:	f023 030f 	bic.w	r3, r3, #15
 8003134:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2202      	movs	r2, #2
 800313c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d060      	beq.n	8003208 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d102      	bne.n	8003154 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800314e:	2310      	movs	r3, #16
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	e001      	b.n	8003158 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003154:	2320      	movs	r3, #32
 8003156:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b20      	cmp	r3, #32
 800315e:	d802      	bhi.n	8003166 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003166:	2001      	movs	r0, #1
 8003168:	f001 f9d8 	bl	800451c <HAL_RCCEx_GetPeriphCLKFreq>
 800316c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003176:	d125      	bne.n	80031c4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d010      	beq.n	80031a2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	fbb2 f2f3 	udiv	r2, r2, r3
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	461a      	mov	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	3305      	adds	r3, #5
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	e01f      	b.n	80031e2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	461a      	mov	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80031be:	3305      	adds	r3, #5
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	e00e      	b.n	80031e2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	461a      	mov	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	fbb2 f3f3 	udiv	r3, r2, r3
 80031de:	3305      	adds	r3, #5
 80031e0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4a5c      	ldr	r2, [pc, #368]	; (8003358 <HAL_I2S_Init+0x270>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	08db      	lsrs	r3, r3, #3
 80031ec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	085b      	lsrs	r3, r3, #1
 80031fe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	61bb      	str	r3, [r7, #24]
 8003206:	e003      	b.n	8003210 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003208:	2302      	movs	r3, #2
 800320a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d902      	bls.n	800321c <HAL_I2S_Init+0x134>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	2bff      	cmp	r3, #255	; 0xff
 800321a:	d907      	bls.n	800322c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	f043 0210 	orr.w	r2, r3, #16
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e08f      	b.n	800334c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	ea42 0103 	orr.w	r1, r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	430a      	orrs	r2, r1
 800323e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800324a:	f023 030f 	bic.w	r3, r3, #15
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6851      	ldr	r1, [r2, #4]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6892      	ldr	r2, [r2, #8]
 8003256:	4311      	orrs	r1, r2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	68d2      	ldr	r2, [r2, #12]
 800325c:	4311      	orrs	r1, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6992      	ldr	r2, [r2, #24]
 8003262:	430a      	orrs	r2, r1
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800326e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d161      	bne.n	800333c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a38      	ldr	r2, [pc, #224]	; (800335c <HAL_I2S_Init+0x274>)
 800327c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a37      	ldr	r2, [pc, #220]	; (8003360 <HAL_I2S_Init+0x278>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d101      	bne.n	800328c <HAL_I2S_Init+0x1a4>
 8003288:	4b36      	ldr	r3, [pc, #216]	; (8003364 <HAL_I2S_Init+0x27c>)
 800328a:	e001      	b.n	8003290 <HAL_I2S_Init+0x1a8>
 800328c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	4932      	ldr	r1, [pc, #200]	; (8003360 <HAL_I2S_Init+0x278>)
 8003298:	428a      	cmp	r2, r1
 800329a:	d101      	bne.n	80032a0 <HAL_I2S_Init+0x1b8>
 800329c:	4a31      	ldr	r2, [pc, #196]	; (8003364 <HAL_I2S_Init+0x27c>)
 800329e:	e001      	b.n	80032a4 <HAL_I2S_Init+0x1bc>
 80032a0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80032a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032a8:	f023 030f 	bic.w	r3, r3, #15
 80032ac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a2b      	ldr	r2, [pc, #172]	; (8003360 <HAL_I2S_Init+0x278>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d101      	bne.n	80032bc <HAL_I2S_Init+0x1d4>
 80032b8:	4b2a      	ldr	r3, [pc, #168]	; (8003364 <HAL_I2S_Init+0x27c>)
 80032ba:	e001      	b.n	80032c0 <HAL_I2S_Init+0x1d8>
 80032bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032c0:	2202      	movs	r2, #2
 80032c2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a25      	ldr	r2, [pc, #148]	; (8003360 <HAL_I2S_Init+0x278>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d101      	bne.n	80032d2 <HAL_I2S_Init+0x1ea>
 80032ce:	4b25      	ldr	r3, [pc, #148]	; (8003364 <HAL_I2S_Init+0x27c>)
 80032d0:	e001      	b.n	80032d6 <HAL_I2S_Init+0x1ee>
 80032d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e2:	d003      	beq.n	80032ec <HAL_I2S_Init+0x204>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d103      	bne.n	80032f4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80032ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	e001      	b.n	80032f8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032f4:	2300      	movs	r3, #0
 80032f6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003302:	4313      	orrs	r3, r2
 8003304:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800330c:	4313      	orrs	r3, r2
 800330e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003316:	4313      	orrs	r3, r2
 8003318:	b29a      	uxth	r2, r3
 800331a:	897b      	ldrh	r3, [r7, #10]
 800331c:	4313      	orrs	r3, r2
 800331e:	b29b      	uxth	r3, r3
 8003320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003324:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a0d      	ldr	r2, [pc, #52]	; (8003360 <HAL_I2S_Init+0x278>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d101      	bne.n	8003334 <HAL_I2S_Init+0x24c>
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <HAL_I2S_Init+0x27c>)
 8003332:	e001      	b.n	8003338 <HAL_I2S_Init+0x250>
 8003334:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003338:	897a      	ldrh	r2, [r7, #10]
 800333a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3720      	adds	r7, #32
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	0800345f 	.word	0x0800345f
 8003358:	cccccccd 	.word	0xcccccccd
 800335c:	08003575 	.word	0x08003575
 8003360:	40003800 	.word	0x40003800
 8003364:	40003400 	.word	0x40003400

08003368 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	881a      	ldrh	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	1c9a      	adds	r2, r3, #2
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10e      	bne.n	80033f8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033e8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff ffb8 	bl	8003368 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	b292      	uxth	r2, r2
 8003414:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	1c9a      	adds	r2, r3, #2
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003432:	b29b      	uxth	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10e      	bne.n	8003456 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003446:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ff93 	bl	800337c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b04      	cmp	r3, #4
 8003478:	d13a      	bne.n	80034f0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b01      	cmp	r3, #1
 8003482:	d109      	bne.n	8003498 <I2S_IRQHandler+0x3a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	d102      	bne.n	8003498 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff ffb4 	bl	8003400 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b40      	cmp	r3, #64	; 0x40
 80034a0:	d126      	bne.n	80034f0 <I2S_IRQHandler+0x92>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d11f      	bne.n	80034f0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034c0:	2300      	movs	r3, #0
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	613b      	str	r3, [r7, #16]
 80034d4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	f043 0202 	orr.w	r2, r3, #2
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff ff50 	bl	8003390 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d136      	bne.n	800356a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b02      	cmp	r3, #2
 8003504:	d109      	bne.n	800351a <I2S_IRQHandler+0xbc>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	2b80      	cmp	r3, #128	; 0x80
 8003512:	d102      	bne.n	800351a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff ff45 	bl	80033a4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b08      	cmp	r3, #8
 8003522:	d122      	bne.n	800356a <I2S_IRQHandler+0x10c>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b20      	cmp	r3, #32
 8003530:	d11b      	bne.n	800356a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003540:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	f043 0204 	orr.w	r2, r3, #4
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ff13 	bl	8003390 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800356a:	bf00      	nop
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a92      	ldr	r2, [pc, #584]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d101      	bne.n	8003592 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800358e:	4b92      	ldr	r3, [pc, #584]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003590:	e001      	b.n	8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003592:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a8b      	ldr	r2, [pc, #556]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d101      	bne.n	80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035ac:	4b8a      	ldr	r3, [pc, #552]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035ae:	e001      	b.n	80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c0:	d004      	beq.n	80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f040 8099 	bne.w	80036fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d107      	bne.n	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f925 	bl	8003830 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d107      	bne.n	8003600 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f9c8 	bl	8003990 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003606:	2b40      	cmp	r3, #64	; 0x40
 8003608:	d13a      	bne.n	8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d035      	beq.n	8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a6e      	ldr	r2, [pc, #440]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800361e:	4b6e      	ldr	r3, [pc, #440]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003620:	e001      	b.n	8003626 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003622:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4969      	ldr	r1, [pc, #420]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800362e:	428b      	cmp	r3, r1
 8003630:	d101      	bne.n	8003636 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003632:	4b69      	ldr	r3, [pc, #420]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003634:	e001      	b.n	800363a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003636:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800363a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800363e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800364e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	f043 0202 	orr.w	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff fe88 	bl	8003390 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b08      	cmp	r3, #8
 8003688:	f040 80c3 	bne.w	8003812 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80bd 	beq.w	8003812 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a49      	ldr	r2, [pc, #292]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036b2:	4b49      	ldr	r3, [pc, #292]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036b4:	e001      	b.n	80036ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4944      	ldr	r1, [pc, #272]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036c2:	428b      	cmp	r3, r1
 80036c4:	d101      	bne.n	80036ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036c6:	4b44      	ldr	r3, [pc, #272]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036c8:	e001      	b.n	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036d4:	2300      	movs	r3, #0
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	f043 0204 	orr.w	r2, r3, #4
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff fe4a 	bl	8003390 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036fc:	e089      	b.n	8003812 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b02      	cmp	r3, #2
 8003706:	d107      	bne.n	8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f8be 	bl	8003894 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b01      	cmp	r3, #1
 8003720:	d107      	bne.n	8003732 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f8fd 	bl	800392c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003738:	2b40      	cmp	r3, #64	; 0x40
 800373a:	d12f      	bne.n	800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b00      	cmp	r3, #0
 8003744:	d02a      	beq.n	800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003754:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1e      	ldr	r2, [pc, #120]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003760:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003762:	e001      	b.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003764:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4919      	ldr	r1, [pc, #100]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003770:	428b      	cmp	r3, r1
 8003772:	d101      	bne.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003774:	4b18      	ldr	r3, [pc, #96]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003776:	e001      	b.n	800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003778:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003780:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f043 0202 	orr.w	r2, r3, #2
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff fdfa 	bl	8003390 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d136      	bne.n	8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d031      	beq.n	8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a07      	ldr	r2, [pc, #28]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d101      	bne.n	80037be <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037ba:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037bc:	e001      	b.n	80037c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4902      	ldr	r1, [pc, #8]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ca:	428b      	cmp	r3, r1
 80037cc:	d106      	bne.n	80037dc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80037ce:	4b02      	ldr	r3, [pc, #8]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037d0:	e006      	b.n	80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80037d2:	bf00      	nop
 80037d4:	40003800 	.word	0x40003800
 80037d8:	40003400 	.word	0x40003400
 80037dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037e4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f043 0204 	orr.w	r2, r3, #4
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fdc0 	bl	8003390 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003810:	e000      	b.n	8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003812:	bf00      	nop
}
 8003814:	bf00      	nop
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	1c99      	adds	r1, r3, #2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6251      	str	r1, [r2, #36]	; 0x24
 8003842:	881a      	ldrh	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d113      	bne.n	800388a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003870:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff ffc9 	bl	800381c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c99      	adds	r1, r3, #2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6251      	str	r1, [r2, #36]	; 0x24
 80038a6:	8819      	ldrh	r1, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1d      	ldr	r2, [pc, #116]	; (8003924 <I2SEx_TxISR_I2SExt+0x90>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <I2SEx_TxISR_I2SExt+0x22>
 80038b2:	4b1d      	ldr	r3, [pc, #116]	; (8003928 <I2SEx_TxISR_I2SExt+0x94>)
 80038b4:	e001      	b.n	80038ba <I2SEx_TxISR_I2SExt+0x26>
 80038b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ba:	460a      	mov	r2, r1
 80038bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d121      	bne.n	800391a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a12      	ldr	r2, [pc, #72]	; (8003924 <I2SEx_TxISR_I2SExt+0x90>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d101      	bne.n	80038e4 <I2SEx_TxISR_I2SExt+0x50>
 80038e0:	4b11      	ldr	r3, [pc, #68]	; (8003928 <I2SEx_TxISR_I2SExt+0x94>)
 80038e2:	e001      	b.n	80038e8 <I2SEx_TxISR_I2SExt+0x54>
 80038e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	490d      	ldr	r1, [pc, #52]	; (8003924 <I2SEx_TxISR_I2SExt+0x90>)
 80038f0:	428b      	cmp	r3, r1
 80038f2:	d101      	bne.n	80038f8 <I2SEx_TxISR_I2SExt+0x64>
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <I2SEx_TxISR_I2SExt+0x94>)
 80038f6:	e001      	b.n	80038fc <I2SEx_TxISR_I2SExt+0x68>
 80038f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003900:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d106      	bne.n	800391a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff ff81 	bl	800381c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40003800 	.word	0x40003800
 8003928:	40003400 	.word	0x40003400

0800392c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68d8      	ldr	r0, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	1c99      	adds	r1, r3, #2
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003944:	b282      	uxth	r2, r0
 8003946:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d113      	bne.n	8003988 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800396e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ff4a 	bl	800381c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a20      	ldr	r2, [pc, #128]	; (8003a20 <I2SEx_RxISR_I2SExt+0x90>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d101      	bne.n	80039a6 <I2SEx_RxISR_I2SExt+0x16>
 80039a2:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <I2SEx_RxISR_I2SExt+0x94>)
 80039a4:	e001      	b.n	80039aa <I2SEx_RxISR_I2SExt+0x1a>
 80039a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039aa:	68d8      	ldr	r0, [r3, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	1c99      	adds	r1, r3, #2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039b6:	b282      	uxth	r2, r0
 80039b8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d121      	bne.n	8003a16 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <I2SEx_RxISR_I2SExt+0x90>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d101      	bne.n	80039e0 <I2SEx_RxISR_I2SExt+0x50>
 80039dc:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <I2SEx_RxISR_I2SExt+0x94>)
 80039de:	e001      	b.n	80039e4 <I2SEx_RxISR_I2SExt+0x54>
 80039e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	490d      	ldr	r1, [pc, #52]	; (8003a20 <I2SEx_RxISR_I2SExt+0x90>)
 80039ec:	428b      	cmp	r3, r1
 80039ee:	d101      	bne.n	80039f4 <I2SEx_RxISR_I2SExt+0x64>
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <I2SEx_RxISR_I2SExt+0x94>)
 80039f2:	e001      	b.n	80039f8 <I2SEx_RxISR_I2SExt+0x68>
 80039f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039fc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d106      	bne.n	8003a16 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ff03 	bl	800381c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40003800 	.word	0x40003800
 8003a24:	40003400 	.word	0x40003400

08003a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e267      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d075      	beq.n	8003b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a46:	4b88      	ldr	r3, [pc, #544]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d00c      	beq.n	8003a6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a52:	4b85      	ldr	r3, [pc, #532]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d112      	bne.n	8003a84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a5e:	4b82      	ldr	r3, [pc, #520]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a6a:	d10b      	bne.n	8003a84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6c:	4b7e      	ldr	r3, [pc, #504]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d05b      	beq.n	8003b30 <HAL_RCC_OscConfig+0x108>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d157      	bne.n	8003b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e242      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8c:	d106      	bne.n	8003a9c <HAL_RCC_OscConfig+0x74>
 8003a8e:	4b76      	ldr	r3, [pc, #472]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a75      	ldr	r2, [pc, #468]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e01d      	b.n	8003ad8 <HAL_RCC_OscConfig+0xb0>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x98>
 8003aa6:	4b70      	ldr	r3, [pc, #448]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a6f      	ldr	r2, [pc, #444]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	4b6d      	ldr	r3, [pc, #436]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a6c      	ldr	r2, [pc, #432]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e00b      	b.n	8003ad8 <HAL_RCC_OscConfig+0xb0>
 8003ac0:	4b69      	ldr	r3, [pc, #420]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a68      	ldr	r2, [pc, #416]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	4b66      	ldr	r3, [pc, #408]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a65      	ldr	r2, [pc, #404]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d013      	beq.n	8003b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae0:	f7fd faa2 	bl	8001028 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae8:	f7fd fa9e 	bl	8001028 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b64      	cmp	r3, #100	; 0x64
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e207      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afa:	4b5b      	ldr	r3, [pc, #364]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0xc0>
 8003b06:	e014      	b.n	8003b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fd fa8e 	bl	8001028 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b10:	f7fd fa8a 	bl	8001028 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b64      	cmp	r3, #100	; 0x64
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e1f3      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b22:	4b51      	ldr	r3, [pc, #324]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0xe8>
 8003b2e:	e000      	b.n	8003b32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d063      	beq.n	8003c06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b3e:	4b4a      	ldr	r3, [pc, #296]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b4a:	4b47      	ldr	r3, [pc, #284]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d11c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b56:	4b44      	ldr	r3, [pc, #272]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d116      	bne.n	8003b90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b62:	4b41      	ldr	r3, [pc, #260]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_RCC_OscConfig+0x152>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d001      	beq.n	8003b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e1c7      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7a:	4b3b      	ldr	r3, [pc, #236]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4937      	ldr	r1, [pc, #220]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8e:	e03a      	b.n	8003c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d020      	beq.n	8003bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b98:	4b34      	ldr	r3, [pc, #208]	; (8003c6c <HAL_RCC_OscConfig+0x244>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9e:	f7fd fa43 	bl	8001028 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba6:	f7fd fa3f 	bl	8001028 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e1a8      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb8:	4b2b      	ldr	r3, [pc, #172]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc4:	4b28      	ldr	r3, [pc, #160]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	4925      	ldr	r1, [pc, #148]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	600b      	str	r3, [r1, #0]
 8003bd8:	e015      	b.n	8003c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bda:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <HAL_RCC_OscConfig+0x244>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fd fa22 	bl	8001028 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be8:	f7fd fa1e 	bl	8001028 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e187      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfa:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d036      	beq.n	8003c80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d016      	beq.n	8003c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1a:	4b15      	ldr	r3, [pc, #84]	; (8003c70 <HAL_RCC_OscConfig+0x248>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fd fa02 	bl	8001028 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c28:	f7fd f9fe 	bl	8001028 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e167      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCC_OscConfig+0x200>
 8003c46:	e01b      	b.n	8003c80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c48:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <HAL_RCC_OscConfig+0x248>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4e:	f7fd f9eb 	bl	8001028 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c54:	e00e      	b.n	8003c74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c56:	f7fd f9e7 	bl	8001028 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d907      	bls.n	8003c74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e150      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	42470000 	.word	0x42470000
 8003c70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c74:	4b88      	ldr	r3, [pc, #544]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ea      	bne.n	8003c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8097 	beq.w	8003dbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c92:	4b81      	ldr	r3, [pc, #516]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10f      	bne.n	8003cbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	4b7d      	ldr	r3, [pc, #500]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	4a7c      	ldr	r2, [pc, #496]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cac:	6413      	str	r3, [r2, #64]	; 0x40
 8003cae:	4b7a      	ldr	r3, [pc, #488]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbe:	4b77      	ldr	r3, [pc, #476]	; (8003e9c <HAL_RCC_OscConfig+0x474>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d118      	bne.n	8003cfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cca:	4b74      	ldr	r3, [pc, #464]	; (8003e9c <HAL_RCC_OscConfig+0x474>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a73      	ldr	r2, [pc, #460]	; (8003e9c <HAL_RCC_OscConfig+0x474>)
 8003cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd6:	f7fd f9a7 	bl	8001028 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cde:	f7fd f9a3 	bl	8001028 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e10c      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf0:	4b6a      	ldr	r3, [pc, #424]	; (8003e9c <HAL_RCC_OscConfig+0x474>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d106      	bne.n	8003d12 <HAL_RCC_OscConfig+0x2ea>
 8003d04:	4b64      	ldr	r3, [pc, #400]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d08:	4a63      	ldr	r2, [pc, #396]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d10:	e01c      	b.n	8003d4c <HAL_RCC_OscConfig+0x324>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b05      	cmp	r3, #5
 8003d18:	d10c      	bne.n	8003d34 <HAL_RCC_OscConfig+0x30c>
 8003d1a:	4b5f      	ldr	r3, [pc, #380]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1e:	4a5e      	ldr	r2, [pc, #376]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d20:	f043 0304 	orr.w	r3, r3, #4
 8003d24:	6713      	str	r3, [r2, #112]	; 0x70
 8003d26:	4b5c      	ldr	r3, [pc, #368]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	4a5b      	ldr	r2, [pc, #364]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6713      	str	r3, [r2, #112]	; 0x70
 8003d32:	e00b      	b.n	8003d4c <HAL_RCC_OscConfig+0x324>
 8003d34:	4b58      	ldr	r3, [pc, #352]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	4a57      	ldr	r2, [pc, #348]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d40:	4b55      	ldr	r3, [pc, #340]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d44:	4a54      	ldr	r2, [pc, #336]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d46:	f023 0304 	bic.w	r3, r3, #4
 8003d4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d015      	beq.n	8003d80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d54:	f7fd f968 	bl	8001028 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d5c:	f7fd f964 	bl	8001028 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e0cb      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d72:	4b49      	ldr	r3, [pc, #292]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0ee      	beq.n	8003d5c <HAL_RCC_OscConfig+0x334>
 8003d7e:	e014      	b.n	8003daa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d80:	f7fd f952 	bl	8001028 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d88:	f7fd f94e 	bl	8001028 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e0b5      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9e:	4b3e      	ldr	r3, [pc, #248]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1ee      	bne.n	8003d88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d105      	bne.n	8003dbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db0:	4b39      	ldr	r3, [pc, #228]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	4a38      	ldr	r2, [pc, #224]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003db6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80a1 	beq.w	8003f08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dc6:	4b34      	ldr	r3, [pc, #208]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d05c      	beq.n	8003e8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d141      	bne.n	8003e5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dda:	4b31      	ldr	r3, [pc, #196]	; (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fd f922 	bl	8001028 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fd f91e 	bl	8001028 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e087      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	019b      	lsls	r3, r3, #6
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	061b      	lsls	r3, r3, #24
 8003e2a:	491b      	ldr	r1, [pc, #108]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e30:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e36:	f7fd f8f7 	bl	8001028 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e3e:	f7fd f8f3 	bl	8001028 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e05c      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e50:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCC_OscConfig+0x416>
 8003e5c:	e054      	b.n	8003f08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e64:	f7fd f8e0 	bl	8001028 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e6c:	f7fd f8dc 	bl	8001028 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e045      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f0      	bne.n	8003e6c <HAL_RCC_OscConfig+0x444>
 8003e8a:	e03d      	b.n	8003f08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d107      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e038      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	40007000 	.word	0x40007000
 8003ea0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ea4:	4b1b      	ldr	r3, [pc, #108]	; (8003f14 <HAL_RCC_OscConfig+0x4ec>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d028      	beq.n	8003f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d121      	bne.n	8003f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d11a      	bne.n	8003f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d111      	bne.n	8003f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	085b      	lsrs	r3, r3, #1
 8003eec:	3b01      	subs	r3, #1
 8003eee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d107      	bne.n	8003f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d001      	beq.n	8003f08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	40023800 	.word	0x40023800

08003f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0cc      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f2c:	4b68      	ldr	r3, [pc, #416]	; (80040d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d90c      	bls.n	8003f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3a:	4b65      	ldr	r3, [pc, #404]	; (80040d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f42:	4b63      	ldr	r3, [pc, #396]	; (80040d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0b8      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d020      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f6c:	4b59      	ldr	r3, [pc, #356]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4a58      	ldr	r2, [pc, #352]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f84:	4b53      	ldr	r3, [pc, #332]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	4a52      	ldr	r2, [pc, #328]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f90:	4b50      	ldr	r3, [pc, #320]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	494d      	ldr	r1, [pc, #308]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d044      	beq.n	8004038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d107      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb6:	4b47      	ldr	r3, [pc, #284]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d119      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e07f      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d003      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d107      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd6:	4b3f      	ldr	r3, [pc, #252]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e06f      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe6:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e067      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ff6:	4b37      	ldr	r3, [pc, #220]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f023 0203 	bic.w	r2, r3, #3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	4934      	ldr	r1, [pc, #208]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	4313      	orrs	r3, r2
 8004006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004008:	f7fd f80e 	bl	8001028 <HAL_GetTick>
 800400c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400e:	e00a      	b.n	8004026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004010:	f7fd f80a 	bl	8001028 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f241 3288 	movw	r2, #5000	; 0x1388
 800401e:	4293      	cmp	r3, r2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e04f      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004026:	4b2b      	ldr	r3, [pc, #172]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 020c 	and.w	r2, r3, #12
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	429a      	cmp	r2, r3
 8004036:	d1eb      	bne.n	8004010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004038:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <HAL_RCC_ClockConfig+0x1b8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d20c      	bcs.n	8004060 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004046:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800404e:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d001      	beq.n	8004060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e032      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4916      	ldr	r1, [pc, #88]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	4313      	orrs	r3, r2
 800407c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d009      	beq.n	800409e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800408a:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	490e      	ldr	r1, [pc, #56]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	4313      	orrs	r3, r2
 800409c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800409e:	f000 f821 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 80040a2:	4602      	mov	r2, r0
 80040a4:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	490a      	ldr	r1, [pc, #40]	; (80040d8 <HAL_RCC_ClockConfig+0x1c0>)
 80040b0:	5ccb      	ldrb	r3, [r1, r3]
 80040b2:	fa22 f303 	lsr.w	r3, r2, r3
 80040b6:	4a09      	ldr	r2, [pc, #36]	; (80040dc <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040ba:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <HAL_RCC_ClockConfig+0x1c8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fc ff6e 	bl	8000fa0 <HAL_InitTick>

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40023c00 	.word	0x40023c00
 80040d4:	40023800 	.word	0x40023800
 80040d8:	080092bc 	.word	0x080092bc
 80040dc:	20000000 	.word	0x20000000
 80040e0:	20000004 	.word	0x20000004

080040e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e8:	b094      	sub	sp, #80	; 0x50
 80040ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	647b      	str	r3, [r7, #68]	; 0x44
 80040f0:	2300      	movs	r3, #0
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f4:	2300      	movs	r3, #0
 80040f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040fc:	4b79      	ldr	r3, [pc, #484]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 030c 	and.w	r3, r3, #12
 8004104:	2b08      	cmp	r3, #8
 8004106:	d00d      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0x40>
 8004108:	2b08      	cmp	r3, #8
 800410a:	f200 80e1 	bhi.w	80042d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0x34>
 8004112:	2b04      	cmp	r3, #4
 8004114:	d003      	beq.n	800411e <HAL_RCC_GetSysClockFreq+0x3a>
 8004116:	e0db      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004118:	4b73      	ldr	r3, [pc, #460]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800411a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800411c:	e0db      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800411e:	4b73      	ldr	r3, [pc, #460]	; (80042ec <HAL_RCC_GetSysClockFreq+0x208>)
 8004120:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004122:	e0d8      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004124:	4b6f      	ldr	r3, [pc, #444]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800412c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800412e:	4b6d      	ldr	r3, [pc, #436]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d063      	beq.n	8004202 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800413a:	4b6a      	ldr	r3, [pc, #424]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	099b      	lsrs	r3, r3, #6
 8004140:	2200      	movs	r2, #0
 8004142:	63bb      	str	r3, [r7, #56]	; 0x38
 8004144:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414c:	633b      	str	r3, [r7, #48]	; 0x30
 800414e:	2300      	movs	r3, #0
 8004150:	637b      	str	r3, [r7, #52]	; 0x34
 8004152:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004156:	4622      	mov	r2, r4
 8004158:	462b      	mov	r3, r5
 800415a:	f04f 0000 	mov.w	r0, #0
 800415e:	f04f 0100 	mov.w	r1, #0
 8004162:	0159      	lsls	r1, r3, #5
 8004164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004168:	0150      	lsls	r0, r2, #5
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4621      	mov	r1, r4
 8004170:	1a51      	subs	r1, r2, r1
 8004172:	6139      	str	r1, [r7, #16]
 8004174:	4629      	mov	r1, r5
 8004176:	eb63 0301 	sbc.w	r3, r3, r1
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004188:	4659      	mov	r1, fp
 800418a:	018b      	lsls	r3, r1, #6
 800418c:	4651      	mov	r1, sl
 800418e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004192:	4651      	mov	r1, sl
 8004194:	018a      	lsls	r2, r1, #6
 8004196:	4651      	mov	r1, sl
 8004198:	ebb2 0801 	subs.w	r8, r2, r1
 800419c:	4659      	mov	r1, fp
 800419e:	eb63 0901 	sbc.w	r9, r3, r1
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041b6:	4690      	mov	r8, r2
 80041b8:	4699      	mov	r9, r3
 80041ba:	4623      	mov	r3, r4
 80041bc:	eb18 0303 	adds.w	r3, r8, r3
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	462b      	mov	r3, r5
 80041c4:	eb49 0303 	adc.w	r3, r9, r3
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041d6:	4629      	mov	r1, r5
 80041d8:	024b      	lsls	r3, r1, #9
 80041da:	4621      	mov	r1, r4
 80041dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041e0:	4621      	mov	r1, r4
 80041e2:	024a      	lsls	r2, r1, #9
 80041e4:	4610      	mov	r0, r2
 80041e6:	4619      	mov	r1, r3
 80041e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ea:	2200      	movs	r2, #0
 80041ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041f4:	f7fc f83c 	bl	8000270 <__aeabi_uldivmod>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4613      	mov	r3, r2
 80041fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004200:	e058      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004202:	4b38      	ldr	r3, [pc, #224]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	099b      	lsrs	r3, r3, #6
 8004208:	2200      	movs	r2, #0
 800420a:	4618      	mov	r0, r3
 800420c:	4611      	mov	r1, r2
 800420e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004212:	623b      	str	r3, [r7, #32]
 8004214:	2300      	movs	r3, #0
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
 8004218:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800421c:	4642      	mov	r2, r8
 800421e:	464b      	mov	r3, r9
 8004220:	f04f 0000 	mov.w	r0, #0
 8004224:	f04f 0100 	mov.w	r1, #0
 8004228:	0159      	lsls	r1, r3, #5
 800422a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800422e:	0150      	lsls	r0, r2, #5
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4641      	mov	r1, r8
 8004236:	ebb2 0a01 	subs.w	sl, r2, r1
 800423a:	4649      	mov	r1, r9
 800423c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800424c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004250:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004254:	ebb2 040a 	subs.w	r4, r2, sl
 8004258:	eb63 050b 	sbc.w	r5, r3, fp
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	00eb      	lsls	r3, r5, #3
 8004266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800426a:	00e2      	lsls	r2, r4, #3
 800426c:	4614      	mov	r4, r2
 800426e:	461d      	mov	r5, r3
 8004270:	4643      	mov	r3, r8
 8004272:	18e3      	adds	r3, r4, r3
 8004274:	603b      	str	r3, [r7, #0]
 8004276:	464b      	mov	r3, r9
 8004278:	eb45 0303 	adc.w	r3, r5, r3
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800428a:	4629      	mov	r1, r5
 800428c:	028b      	lsls	r3, r1, #10
 800428e:	4621      	mov	r1, r4
 8004290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004294:	4621      	mov	r1, r4
 8004296:	028a      	lsls	r2, r1, #10
 8004298:	4610      	mov	r0, r2
 800429a:	4619      	mov	r1, r3
 800429c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800429e:	2200      	movs	r2, #0
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	61fa      	str	r2, [r7, #28]
 80042a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042a8:	f7fb ffe2 	bl	8000270 <__aeabi_uldivmod>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4613      	mov	r3, r2
 80042b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042b4:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	0c1b      	lsrs	r3, r3, #16
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	3301      	adds	r3, #1
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042ce:	e002      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80042d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3750      	adds	r7, #80	; 0x50
 80042dc:	46bd      	mov	sp, r7
 80042de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e2:	bf00      	nop
 80042e4:	40023800 	.word	0x40023800
 80042e8:	00f42400 	.word	0x00f42400
 80042ec:	007a1200 	.word	0x007a1200

080042f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f4:	4b03      	ldr	r3, [pc, #12]	; (8004304 <HAL_RCC_GetHCLKFreq+0x14>)
 80042f6:	681b      	ldr	r3, [r3, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20000000 	.word	0x20000000

08004308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800430c:	f7ff fff0 	bl	80042f0 <HAL_RCC_GetHCLKFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	0a9b      	lsrs	r3, r3, #10
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	4903      	ldr	r1, [pc, #12]	; (800432c <HAL_RCC_GetPCLK1Freq+0x24>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004324:	4618      	mov	r0, r3
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40023800 	.word	0x40023800
 800432c:	080092cc 	.word	0x080092cc

08004330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004334:	f7ff ffdc 	bl	80042f0 <HAL_RCC_GetHCLKFreq>
 8004338:	4602      	mov	r2, r0
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	0b5b      	lsrs	r3, r3, #13
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	4903      	ldr	r1, [pc, #12]	; (8004354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004346:	5ccb      	ldrb	r3, [r1, r3]
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800434c:	4618      	mov	r0, r3
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40023800 	.word	0x40023800
 8004354:	080092cc 	.word	0x080092cc

08004358 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d105      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800437c:	2b00      	cmp	r3, #0
 800437e:	d035      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004380:	4b62      	ldr	r3, [pc, #392]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004386:	f7fc fe4f 	bl	8001028 <HAL_GetTick>
 800438a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800438c:	e008      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800438e:	f7fc fe4b 	bl	8001028 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e0b0      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043a0:	4b5b      	ldr	r3, [pc, #364]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f0      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	019a      	lsls	r2, r3, #6
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	071b      	lsls	r3, r3, #28
 80043b8:	4955      	ldr	r1, [pc, #340]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043c0:	4b52      	ldr	r3, [pc, #328]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043c6:	f7fc fe2f 	bl	8001028 <HAL_GetTick>
 80043ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043ce:	f7fc fe2b 	bl	8001028 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e090      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043e0:	4b4b      	ldr	r3, [pc, #300]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8083 	beq.w	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	4b44      	ldr	r3, [pc, #272]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	4a43      	ldr	r2, [pc, #268]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004408:	6413      	str	r3, [r2, #64]	; 0x40
 800440a:	4b41      	ldr	r3, [pc, #260]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004416:	4b3f      	ldr	r3, [pc, #252]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a3e      	ldr	r2, [pc, #248]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800441c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004420:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004422:	f7fc fe01 	bl	8001028 <HAL_GetTick>
 8004426:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004428:	e008      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800442a:	f7fc fdfd 	bl	8001028 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e062      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800443c:	4b35      	ldr	r3, [pc, #212]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004448:	4b31      	ldr	r3, [pc, #196]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004450:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d02f      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	429a      	cmp	r2, r3
 8004464:	d028      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004466:	4b2a      	ldr	r3, [pc, #168]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800446e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004470:	4b29      	ldr	r3, [pc, #164]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004472:	2201      	movs	r2, #1
 8004474:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004476:	4b28      	ldr	r3, [pc, #160]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800447c:	4a24      	ldr	r2, [pc, #144]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004482:	4b23      	ldr	r3, [pc, #140]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	d114      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800448e:	f7fc fdcb 	bl	8001028 <HAL_GetTick>
 8004492:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004494:	e00a      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004496:	f7fc fdc7 	bl	8001028 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d901      	bls.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e02a      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ac:	4b18      	ldr	r3, [pc, #96]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0ee      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044c4:	d10d      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80044c6:	4b12      	ldr	r3, [pc, #72]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044da:	490d      	ldr	r1, [pc, #52]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	608b      	str	r3, [r1, #8]
 80044e0:	e005      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	4a0a      	ldr	r2, [pc, #40]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044ec:	6093      	str	r3, [r2, #8]
 80044ee:	4b08      	ldr	r3, [pc, #32]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fa:	4905      	ldr	r1, [pc, #20]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	42470068 	.word	0x42470068
 8004510:	40023800 	.word	0x40023800
 8004514:	40007000 	.word	0x40007000
 8004518:	42470e40 	.word	0x42470e40

0800451c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d13e      	bne.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800453a:	4b23      	ldr	r3, [pc, #140]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d12f      	bne.n	80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004550:	4b1e      	ldr	r3, [pc, #120]	; (80045cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004552:	617b      	str	r3, [r7, #20]
          break;
 8004554:	e02f      	b.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004556:	4b1c      	ldr	r3, [pc, #112]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004562:	d108      	bne.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004564:	4b18      	ldr	r3, [pc, #96]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800456c:	4a18      	ldr	r2, [pc, #96]	; (80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800456e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004572:	613b      	str	r3, [r7, #16]
 8004574:	e007      	b.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004576:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800457e:	4a15      	ldr	r2, [pc, #84]	; (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004580:	fbb2 f3f3 	udiv	r3, r2, r3
 8004584:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004586:	4b10      	ldr	r3, [pc, #64]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800458c:	099b      	lsrs	r3, r3, #6
 800458e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	fb02 f303 	mul.w	r3, r2, r3
 8004598:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800459a:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800459c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a0:	0f1b      	lsrs	r3, r3, #28
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ac:	617b      	str	r3, [r7, #20]
          break;
 80045ae:	e002      	b.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
          break;
 80045b4:	bf00      	nop
        }
      }
      break;
 80045b6:	bf00      	nop
    }
  }
  return frequency;
 80045b8:	697b      	ldr	r3, [r7, #20]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40023800 	.word	0x40023800
 80045cc:	00bb8000 	.word	0x00bb8000
 80045d0:	007a1200 	.word	0x007a1200
 80045d4:	00f42400 	.word	0x00f42400

080045d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e07b      	b.n	80046e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d108      	bne.n	8004604 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045fa:	d009      	beq.n	8004610 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	61da      	str	r2, [r3, #28]
 8004602:	e005      	b.n	8004610 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fc faf2 	bl	8000c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004646:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	ea42 0103 	orr.w	r1, r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	0c1b      	lsrs	r3, r3, #16
 80046ae:	f003 0104 	and.w	r1, r3, #4
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	f003 0210 	and.w	r2, r3, #16
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e03f      	b.n	800477c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7fc fac7 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2224      	movs	r2, #36	; 0x24
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800472c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f928 	bl	8004984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004742:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695a      	ldr	r2, [r3, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004752:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004762:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08a      	sub	sp, #40	; 0x28
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	4613      	mov	r3, r2
 8004792:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	d17c      	bne.n	800489e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_UART_Transmit+0x2c>
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e075      	b.n	80048a0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_UART_Transmit+0x3e>
 80047be:	2302      	movs	r3, #2
 80047c0:	e06e      	b.n	80048a0 <HAL_UART_Transmit+0x11c>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2221      	movs	r2, #33	; 0x21
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047d8:	f7fc fc26 	bl	8001028 <HAL_GetTick>
 80047dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	88fa      	ldrh	r2, [r7, #6]
 80047e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	88fa      	ldrh	r2, [r7, #6]
 80047e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f2:	d108      	bne.n	8004806 <HAL_UART_Transmit+0x82>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d104      	bne.n	8004806 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	61bb      	str	r3, [r7, #24]
 8004804:	e003      	b.n	800480e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800480a:	2300      	movs	r3, #0
 800480c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004816:	e02a      	b.n	800486e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2200      	movs	r2, #0
 8004820:	2180      	movs	r1, #128	; 0x80
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f840 	bl	80048a8 <UART_WaitOnFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e036      	b.n	80048a0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10b      	bne.n	8004850 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004846:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	3302      	adds	r3, #2
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	e007      	b.n	8004860 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	781a      	ldrb	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	3301      	adds	r3, #1
 800485e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1cf      	bne.n	8004818 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2200      	movs	r2, #0
 8004880:	2140      	movs	r1, #64	; 0x40
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 f810 	bl	80048a8 <UART_WaitOnFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e006      	b.n	80048a0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	e000      	b.n	80048a0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800489e:	2302      	movs	r3, #2
  }
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3720      	adds	r7, #32
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b090      	sub	sp, #64	; 0x40
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	4613      	mov	r3, r2
 80048b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b8:	e050      	b.n	800495c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048c0:	d04c      	beq.n	800495c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d007      	beq.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80048c8:	f7fc fbae 	bl	8001028 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d241      	bcs.n	800495c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	330c      	adds	r3, #12
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	e853 3f00 	ldrex	r3, [r3]
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	330c      	adds	r3, #12
 80048f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048f8:	637a      	str	r2, [r7, #52]	; 0x34
 80048fa:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e5      	bne.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3314      	adds	r3, #20
 8004912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	e853 3f00 	ldrex	r3, [r3]
 800491a:	613b      	str	r3, [r7, #16]
   return(result);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f023 0301 	bic.w	r3, r3, #1
 8004922:	63bb      	str	r3, [r7, #56]	; 0x38
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3314      	adds	r3, #20
 800492a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800492c:	623a      	str	r2, [r7, #32]
 800492e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004930:	69f9      	ldr	r1, [r7, #28]
 8004932:	6a3a      	ldr	r2, [r7, #32]
 8004934:	e841 2300 	strex	r3, r2, [r1]
 8004938:	61bb      	str	r3, [r7, #24]
   return(result);
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1e5      	bne.n	800490c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e00f      	b.n	800497c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4013      	ands	r3, r2
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	429a      	cmp	r2, r3
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	429a      	cmp	r2, r3
 8004978:	d09f      	beq.n	80048ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3740      	adds	r7, #64	; 0x40
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004988:	b0c0      	sub	sp, #256	; 0x100
 800498a:	af00      	add	r7, sp, #0
 800498c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a0:	68d9      	ldr	r1, [r3, #12]
 80049a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	ea40 0301 	orr.w	r3, r0, r1
 80049ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049dc:	f021 010c 	bic.w	r1, r1, #12
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049ea:	430b      	orrs	r3, r1
 80049ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fe:	6999      	ldr	r1, [r3, #24]
 8004a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	ea40 0301 	orr.w	r3, r0, r1
 8004a0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4b8f      	ldr	r3, [pc, #572]	; (8004c50 <UART_SetConfig+0x2cc>)
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d005      	beq.n	8004a24 <UART_SetConfig+0xa0>
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4b8d      	ldr	r3, [pc, #564]	; (8004c54 <UART_SetConfig+0x2d0>)
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d104      	bne.n	8004a2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a24:	f7ff fc84 	bl	8004330 <HAL_RCC_GetPCLK2Freq>
 8004a28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a2c:	e003      	b.n	8004a36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a2e:	f7ff fc6b 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 8004a32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a40:	f040 810c 	bne.w	8004c5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a56:	4622      	mov	r2, r4
 8004a58:	462b      	mov	r3, r5
 8004a5a:	1891      	adds	r1, r2, r2
 8004a5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a5e:	415b      	adcs	r3, r3
 8004a60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a66:	4621      	mov	r1, r4
 8004a68:	eb12 0801 	adds.w	r8, r2, r1
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	eb43 0901 	adc.w	r9, r3, r1
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a86:	4690      	mov	r8, r2
 8004a88:	4699      	mov	r9, r3
 8004a8a:	4623      	mov	r3, r4
 8004a8c:	eb18 0303 	adds.w	r3, r8, r3
 8004a90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a94:	462b      	mov	r3, r5
 8004a96:	eb49 0303 	adc.w	r3, r9, r3
 8004a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004aaa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004aae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	18db      	adds	r3, r3, r3
 8004ab6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ab8:	4613      	mov	r3, r2
 8004aba:	eb42 0303 	adc.w	r3, r2, r3
 8004abe:	657b      	str	r3, [r7, #84]	; 0x54
 8004ac0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ac4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ac8:	f7fb fbd2 	bl	8000270 <__aeabi_uldivmod>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4b61      	ldr	r3, [pc, #388]	; (8004c58 <UART_SetConfig+0x2d4>)
 8004ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	011c      	lsls	r4, r3, #4
 8004ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ae4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ae8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004aec:	4642      	mov	r2, r8
 8004aee:	464b      	mov	r3, r9
 8004af0:	1891      	adds	r1, r2, r2
 8004af2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004af4:	415b      	adcs	r3, r3
 8004af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004af8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004afc:	4641      	mov	r1, r8
 8004afe:	eb12 0a01 	adds.w	sl, r2, r1
 8004b02:	4649      	mov	r1, r9
 8004b04:	eb43 0b01 	adc.w	fp, r3, r1
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b1c:	4692      	mov	sl, r2
 8004b1e:	469b      	mov	fp, r3
 8004b20:	4643      	mov	r3, r8
 8004b22:	eb1a 0303 	adds.w	r3, sl, r3
 8004b26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	18db      	adds	r3, r3, r3
 8004b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b4e:	4613      	mov	r3, r2
 8004b50:	eb42 0303 	adc.w	r3, r2, r3
 8004b54:	647b      	str	r3, [r7, #68]	; 0x44
 8004b56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b5e:	f7fb fb87 	bl	8000270 <__aeabi_uldivmod>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4611      	mov	r1, r2
 8004b68:	4b3b      	ldr	r3, [pc, #236]	; (8004c58 <UART_SetConfig+0x2d4>)
 8004b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	2264      	movs	r2, #100	; 0x64
 8004b72:	fb02 f303 	mul.w	r3, r2, r3
 8004b76:	1acb      	subs	r3, r1, r3
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b7e:	4b36      	ldr	r3, [pc, #216]	; (8004c58 <UART_SetConfig+0x2d4>)
 8004b80:	fba3 2302 	umull	r2, r3, r3, r2
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b8c:	441c      	add	r4, r3
 8004b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ba0:	4642      	mov	r2, r8
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	1891      	adds	r1, r2, r2
 8004ba6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ba8:	415b      	adcs	r3, r3
 8004baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bb0:	4641      	mov	r1, r8
 8004bb2:	1851      	adds	r1, r2, r1
 8004bb4:	6339      	str	r1, [r7, #48]	; 0x30
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	414b      	adcs	r3, r1
 8004bba:	637b      	str	r3, [r7, #52]	; 0x34
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004bc8:	4659      	mov	r1, fp
 8004bca:	00cb      	lsls	r3, r1, #3
 8004bcc:	4651      	mov	r1, sl
 8004bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bd2:	4651      	mov	r1, sl
 8004bd4:	00ca      	lsls	r2, r1, #3
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4603      	mov	r3, r0
 8004bdc:	4642      	mov	r2, r8
 8004bde:	189b      	adds	r3, r3, r2
 8004be0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004be4:	464b      	mov	r3, r9
 8004be6:	460a      	mov	r2, r1
 8004be8:	eb42 0303 	adc.w	r3, r2, r3
 8004bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c04:	460b      	mov	r3, r1
 8004c06:	18db      	adds	r3, r3, r3
 8004c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	eb42 0303 	adc.w	r3, r2, r3
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c1a:	f7fb fb29 	bl	8000270 <__aeabi_uldivmod>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <UART_SetConfig+0x2d4>)
 8004c24:	fba3 1302 	umull	r1, r3, r3, r2
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	2164      	movs	r1, #100	; 0x64
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	3332      	adds	r3, #50	; 0x32
 8004c36:	4a08      	ldr	r2, [pc, #32]	; (8004c58 <UART_SetConfig+0x2d4>)
 8004c38:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	f003 0207 	and.w	r2, r3, #7
 8004c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4422      	add	r2, r4
 8004c4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c4c:	e106      	b.n	8004e5c <UART_SetConfig+0x4d8>
 8004c4e:	bf00      	nop
 8004c50:	40011000 	.word	0x40011000
 8004c54:	40011400 	.word	0x40011400
 8004c58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c6e:	4642      	mov	r2, r8
 8004c70:	464b      	mov	r3, r9
 8004c72:	1891      	adds	r1, r2, r2
 8004c74:	6239      	str	r1, [r7, #32]
 8004c76:	415b      	adcs	r3, r3
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c7e:	4641      	mov	r1, r8
 8004c80:	1854      	adds	r4, r2, r1
 8004c82:	4649      	mov	r1, r9
 8004c84:	eb43 0501 	adc.w	r5, r3, r1
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	00eb      	lsls	r3, r5, #3
 8004c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c96:	00e2      	lsls	r2, r4, #3
 8004c98:	4614      	mov	r4, r2
 8004c9a:	461d      	mov	r5, r3
 8004c9c:	4643      	mov	r3, r8
 8004c9e:	18e3      	adds	r3, r4, r3
 8004ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ca4:	464b      	mov	r3, r9
 8004ca6:	eb45 0303 	adc.w	r3, r5, r3
 8004caa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cca:	4629      	mov	r1, r5
 8004ccc:	008b      	lsls	r3, r1, #2
 8004cce:	4621      	mov	r1, r4
 8004cd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	008a      	lsls	r2, r1, #2
 8004cd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cdc:	f7fb fac8 	bl	8000270 <__aeabi_uldivmod>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4b60      	ldr	r3, [pc, #384]	; (8004e68 <UART_SetConfig+0x4e4>)
 8004ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	011c      	lsls	r4, r3, #4
 8004cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cf8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d00:	4642      	mov	r2, r8
 8004d02:	464b      	mov	r3, r9
 8004d04:	1891      	adds	r1, r2, r2
 8004d06:	61b9      	str	r1, [r7, #24]
 8004d08:	415b      	adcs	r3, r3
 8004d0a:	61fb      	str	r3, [r7, #28]
 8004d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d10:	4641      	mov	r1, r8
 8004d12:	1851      	adds	r1, r2, r1
 8004d14:	6139      	str	r1, [r7, #16]
 8004d16:	4649      	mov	r1, r9
 8004d18:	414b      	adcs	r3, r1
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d28:	4659      	mov	r1, fp
 8004d2a:	00cb      	lsls	r3, r1, #3
 8004d2c:	4651      	mov	r1, sl
 8004d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d32:	4651      	mov	r1, sl
 8004d34:	00ca      	lsls	r2, r1, #3
 8004d36:	4610      	mov	r0, r2
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d44:	464b      	mov	r3, r9
 8004d46:	460a      	mov	r2, r1
 8004d48:	eb42 0303 	adc.w	r3, r2, r3
 8004d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d68:	4649      	mov	r1, r9
 8004d6a:	008b      	lsls	r3, r1, #2
 8004d6c:	4641      	mov	r1, r8
 8004d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d72:	4641      	mov	r1, r8
 8004d74:	008a      	lsls	r2, r1, #2
 8004d76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d7a:	f7fb fa79 	bl	8000270 <__aeabi_uldivmod>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4611      	mov	r1, r2
 8004d84:	4b38      	ldr	r3, [pc, #224]	; (8004e68 <UART_SetConfig+0x4e4>)
 8004d86:	fba3 2301 	umull	r2, r3, r3, r1
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	2264      	movs	r2, #100	; 0x64
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	1acb      	subs	r3, r1, r3
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	3332      	adds	r3, #50	; 0x32
 8004d98:	4a33      	ldr	r2, [pc, #204]	; (8004e68 <UART_SetConfig+0x4e4>)
 8004d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004da4:	441c      	add	r4, r3
 8004da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004daa:	2200      	movs	r2, #0
 8004dac:	673b      	str	r3, [r7, #112]	; 0x70
 8004dae:	677a      	str	r2, [r7, #116]	; 0x74
 8004db0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004db4:	4642      	mov	r2, r8
 8004db6:	464b      	mov	r3, r9
 8004db8:	1891      	adds	r1, r2, r2
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	415b      	adcs	r3, r3
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dc4:	4641      	mov	r1, r8
 8004dc6:	1851      	adds	r1, r2, r1
 8004dc8:	6039      	str	r1, [r7, #0]
 8004dca:	4649      	mov	r1, r9
 8004dcc:	414b      	adcs	r3, r1
 8004dce:	607b      	str	r3, [r7, #4]
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ddc:	4659      	mov	r1, fp
 8004dde:	00cb      	lsls	r3, r1, #3
 8004de0:	4651      	mov	r1, sl
 8004de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004de6:	4651      	mov	r1, sl
 8004de8:	00ca      	lsls	r2, r1, #3
 8004dea:	4610      	mov	r0, r2
 8004dec:	4619      	mov	r1, r3
 8004dee:	4603      	mov	r3, r0
 8004df0:	4642      	mov	r2, r8
 8004df2:	189b      	adds	r3, r3, r2
 8004df4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004df6:	464b      	mov	r3, r9
 8004df8:	460a      	mov	r2, r1
 8004dfa:	eb42 0303 	adc.w	r3, r2, r3
 8004dfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	663b      	str	r3, [r7, #96]	; 0x60
 8004e0a:	667a      	str	r2, [r7, #100]	; 0x64
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e18:	4649      	mov	r1, r9
 8004e1a:	008b      	lsls	r3, r1, #2
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e22:	4641      	mov	r1, r8
 8004e24:	008a      	lsls	r2, r1, #2
 8004e26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e2a:	f7fb fa21 	bl	8000270 <__aeabi_uldivmod>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4b0d      	ldr	r3, [pc, #52]	; (8004e68 <UART_SetConfig+0x4e4>)
 8004e34:	fba3 1302 	umull	r1, r3, r3, r2
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	2164      	movs	r1, #100	; 0x64
 8004e3c:	fb01 f303 	mul.w	r3, r1, r3
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	3332      	adds	r3, #50	; 0x32
 8004e46:	4a08      	ldr	r2, [pc, #32]	; (8004e68 <UART_SetConfig+0x4e4>)
 8004e48:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	f003 020f 	and.w	r2, r3, #15
 8004e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4422      	add	r2, r4
 8004e5a:	609a      	str	r2, [r3, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e62:	46bd      	mov	sp, r7
 8004e64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e68:	51eb851f 	.word	0x51eb851f

08004e6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b084      	sub	sp, #16
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	f107 001c 	add.w	r0, r7, #28
 8004e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d122      	bne.n	8004eca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d105      	bne.n	8004ebe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f9c0 	bl	8005244 <USB_CoreReset>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	73fb      	strb	r3, [r7, #15]
 8004ec8:	e01a      	b.n	8004f00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f9b4 	bl	8005244 <USB_CoreReset>
 8004edc:	4603      	mov	r3, r0
 8004ede:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ef2:	e005      	b.n	8004f00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d10b      	bne.n	8004f1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f043 0206 	orr.w	r2, r3, #6
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f043 0220 	orr.w	r2, r3, #32
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f2a:	b004      	add	sp, #16
 8004f2c:	4770      	bx	lr

08004f2e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f043 0201 	orr.w	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f023 0201 	bic.w	r2, r3, #1
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b084      	sub	sp, #16
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d115      	bne.n	8004fc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fa0:	2001      	movs	r0, #1
 8004fa2:	f7fc f84d 	bl	8001040 <HAL_Delay>
      ms++;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f93a 	bl	8005226 <USB_GetMode>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d01e      	beq.n	8004ff6 <USB_SetCurrentMode+0x84>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b31      	cmp	r3, #49	; 0x31
 8004fbc:	d9f0      	bls.n	8004fa0 <USB_SetCurrentMode+0x2e>
 8004fbe:	e01a      	b.n	8004ff6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d115      	bne.n	8004ff2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fd2:	2001      	movs	r0, #1
 8004fd4:	f7fc f834 	bl	8001040 <HAL_Delay>
      ms++;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f921 	bl	8005226 <USB_GetMode>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d005      	beq.n	8004ff6 <USB_SetCurrentMode+0x84>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b31      	cmp	r3, #49	; 0x31
 8004fee:	d9f0      	bls.n	8004fd2 <USB_SetCurrentMode+0x60>
 8004ff0:	e001      	b.n	8004ff6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e005      	b.n	8005002 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b32      	cmp	r3, #50	; 0x32
 8004ffa:	d101      	bne.n	8005000 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3301      	adds	r3, #1
 800501e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4a13      	ldr	r2, [pc, #76]	; (8005070 <USB_FlushTxFifo+0x64>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d901      	bls.n	800502c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e01b      	b.n	8005064 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	daf2      	bge.n	800501a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	019b      	lsls	r3, r3, #6
 800503c:	f043 0220 	orr.w	r2, r3, #32
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	3301      	adds	r3, #1
 8005048:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4a08      	ldr	r2, [pc, #32]	; (8005070 <USB_FlushTxFifo+0x64>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d901      	bls.n	8005056 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e006      	b.n	8005064 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b20      	cmp	r3, #32
 8005060:	d0f0      	beq.n	8005044 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	00030d40 	.word	0x00030d40

08005074 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3301      	adds	r3, #1
 8005084:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4a11      	ldr	r2, [pc, #68]	; (80050d0 <USB_FlushRxFifo+0x5c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d901      	bls.n	8005092 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e018      	b.n	80050c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	daf2      	bge.n	8005080 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2210      	movs	r2, #16
 80050a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3301      	adds	r3, #1
 80050a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4a08      	ldr	r2, [pc, #32]	; (80050d0 <USB_FlushRxFifo+0x5c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d901      	bls.n	80050b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e006      	b.n	80050c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	2b10      	cmp	r3, #16
 80050c0:	d0f0      	beq.n	80050a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	00030d40 	.word	0x00030d40

080050d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b089      	sub	sp, #36	; 0x24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	4611      	mov	r1, r2
 80050e0:	461a      	mov	r2, r3
 80050e2:	460b      	mov	r3, r1
 80050e4:	71fb      	strb	r3, [r7, #7]
 80050e6:	4613      	mov	r3, r2
 80050e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d123      	bne.n	8005142 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050fa:	88bb      	ldrh	r3, [r7, #4]
 80050fc:	3303      	adds	r3, #3
 80050fe:	089b      	lsrs	r3, r3, #2
 8005100:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005102:	2300      	movs	r3, #0
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	e018      	b.n	800513a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	031a      	lsls	r2, r3, #12
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	4413      	add	r3, r2
 8005110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005114:	461a      	mov	r2, r3
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	3301      	adds	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	3301      	adds	r3, #1
 8005126:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	3301      	adds	r3, #1
 800512c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	3301      	adds	r3, #1
 8005132:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	3301      	adds	r3, #1
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	429a      	cmp	r2, r3
 8005140:	d3e2      	bcc.n	8005108 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3724      	adds	r7, #36	; 0x24
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005150:	b480      	push	{r7}
 8005152:	b08b      	sub	sp, #44	; 0x2c
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	089b      	lsrs	r3, r3, #2
 800516a:	b29b      	uxth	r3, r3
 800516c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800516e:	88fb      	ldrh	r3, [r7, #6]
 8005170:	f003 0303 	and.w	r3, r3, #3
 8005174:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005176:	2300      	movs	r3, #0
 8005178:	623b      	str	r3, [r7, #32]
 800517a:	e014      	b.n	80051a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	601a      	str	r2, [r3, #0]
    pDest++;
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	3301      	adds	r3, #1
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	3301      	adds	r3, #1
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	3301      	adds	r3, #1
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	3301      	adds	r3, #1
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	3301      	adds	r3, #1
 80051a4:	623b      	str	r3, [r7, #32]
 80051a6:	6a3a      	ldr	r2, [r7, #32]
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d3e6      	bcc.n	800517c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051ae:	8bfb      	ldrh	r3, [r7, #30]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01e      	beq.n	80051f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051be:	461a      	mov	r2, r3
 80051c0:	f107 0310 	add.w	r3, r7, #16
 80051c4:	6812      	ldr	r2, [r2, #0]
 80051c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	701a      	strb	r2, [r3, #0]
      i++;
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	3301      	adds	r3, #1
 80051de:	623b      	str	r3, [r7, #32]
      pDest++;
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	3301      	adds	r3, #1
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80051e6:	8bfb      	ldrh	r3, [r7, #30]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051ec:	8bfb      	ldrh	r3, [r7, #30]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1ea      	bne.n	80051c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	372c      	adds	r7, #44	; 0x2c
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4013      	ands	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005218:	68fb      	ldr	r3, [r7, #12]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	f003 0301 	and.w	r3, r3, #1
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3301      	adds	r3, #1
 8005254:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4a13      	ldr	r2, [pc, #76]	; (80052a8 <USB_CoreReset+0x64>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e01b      	b.n	800529a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	daf2      	bge.n	8005250 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f043 0201 	orr.w	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	3301      	adds	r3, #1
 800527e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4a09      	ldr	r2, [pc, #36]	; (80052a8 <USB_CoreReset+0x64>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d901      	bls.n	800528c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e006      	b.n	800529a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b01      	cmp	r3, #1
 8005296:	d0f0      	beq.n	800527a <USB_CoreReset+0x36>

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	00030d40 	.word	0x00030d40

080052ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052ac:	b084      	sub	sp, #16
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b086      	sub	sp, #24
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052cc:	461a      	mov	r2, r3
 80052ce:	2300      	movs	r3, #0
 80052d0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d018      	beq.n	8005334 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	2b01      	cmp	r3, #1
 8005306:	d10a      	bne.n	800531e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005316:	f043 0304 	orr.w	r3, r3, #4
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	e014      	b.n	8005348 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800532c:	f023 0304 	bic.w	r3, r3, #4
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	e009      	b.n	8005348 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005342:	f023 0304 	bic.w	r3, r3, #4
 8005346:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005348:	2110      	movs	r1, #16
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff fe5e 	bl	800500c <USB_FlushTxFifo>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff fe8a 	bl	8005074 <USB_FlushRxFifo>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800536a:	2300      	movs	r3, #0
 800536c:	613b      	str	r3, [r7, #16]
 800536e:	e015      	b.n	800539c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4413      	add	r3, r2
 8005378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537c:	461a      	mov	r2, r3
 800537e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005382:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005390:	461a      	mov	r2, r3
 8005392:	2300      	movs	r3, #0
 8005394:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	3301      	adds	r3, #1
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d3e5      	bcc.n	8005370 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053b0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00b      	beq.n	80053d6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053c4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a13      	ldr	r2, [pc, #76]	; (8005418 <USB_HostInit+0x16c>)
 80053ca:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a13      	ldr	r2, [pc, #76]	; (800541c <USB_HostInit+0x170>)
 80053d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80053d4:	e009      	b.n	80053ea <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2280      	movs	r2, #128	; 0x80
 80053da:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a10      	ldr	r2, [pc, #64]	; (8005420 <USB_HostInit+0x174>)
 80053e0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a0f      	ldr	r2, [pc, #60]	; (8005424 <USB_HostInit+0x178>)
 80053e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d105      	bne.n	80053fc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	f043 0210 	orr.w	r2, r3, #16
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699a      	ldr	r2, [r3, #24]
 8005400:	4b09      	ldr	r3, [pc, #36]	; (8005428 <USB_HostInit+0x17c>)
 8005402:	4313      	orrs	r3, r2
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005408:	7dfb      	ldrb	r3, [r7, #23]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005414:	b004      	add	sp, #16
 8005416:	4770      	bx	lr
 8005418:	01000200 	.word	0x01000200
 800541c:	00e00300 	.word	0x00e00300
 8005420:	00600080 	.word	0x00600080
 8005424:	004000e0 	.word	0x004000e0
 8005428:	a3200008 	.word	0xa3200008

0800542c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	68f9      	ldr	r1, [r7, #12]
 8005460:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005464:	4313      	orrs	r3, r2
 8005466:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d107      	bne.n	800547e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005474:	461a      	mov	r2, r3
 8005476:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800547a:	6053      	str	r3, [r2, #4]
 800547c:	e009      	b.n	8005492 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800547e:	78fb      	ldrb	r3, [r7, #3]
 8005480:	2b02      	cmp	r3, #2
 8005482:	d106      	bne.n	8005492 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800548a:	461a      	mov	r2, r3
 800548c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005490:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80054c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80054d0:	2064      	movs	r0, #100	; 0x64
 80054d2:	f7fb fdb5 	bl	8001040 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80054e4:	200a      	movs	r0, #10
 80054e6:	f7fb fdab 	bl	8001040 <HAL_Delay>

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005518:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d109      	bne.n	8005538 <USB_DriveVbus+0x44>
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d106      	bne.n	8005538 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005532:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005536:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800553e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005542:	d109      	bne.n	8005558 <USB_DriveVbus+0x64>
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005556:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	0c5b      	lsrs	r3, r3, #17
 8005584:	f003 0303 	and.w	r3, r3, #3
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	b29b      	uxth	r3, r3
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	4608      	mov	r0, r1
 80055c2:	4611      	mov	r1, r2
 80055c4:	461a      	mov	r2, r3
 80055c6:	4603      	mov	r3, r0
 80055c8:	70fb      	strb	r3, [r7, #3]
 80055ca:	460b      	mov	r3, r1
 80055cc:	70bb      	strb	r3, [r7, #2]
 80055ce:	4613      	mov	r3, r2
 80055d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e6:	461a      	mov	r2, r3
 80055e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80055ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d87e      	bhi.n	80056f4 <USB_HC_Init+0x13c>
 80055f6:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <USB_HC_Init+0x44>)
 80055f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fc:	0800560d 	.word	0x0800560d
 8005600:	080056b7 	.word	0x080056b7
 8005604:	0800560d 	.word	0x0800560d
 8005608:	08005679 	.word	0x08005679
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	4413      	add	r3, r2
 8005614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005618:	461a      	mov	r2, r3
 800561a:	f240 439d 	movw	r3, #1181	; 0x49d
 800561e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005620:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005624:	2b00      	cmp	r3, #0
 8005626:	da10      	bge.n	800564a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	4413      	add	r3, r2
 8005630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	78fa      	ldrb	r2, [r7, #3]
 8005638:	0151      	lsls	r1, r2, #5
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	440a      	add	r2, r1
 800563e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005646:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005648:	e057      	b.n	80056fa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800564e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005652:	2b00      	cmp	r3, #0
 8005654:	d051      	beq.n	80056fa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	4413      	add	r3, r2
 800565e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	78fa      	ldrb	r2, [r7, #3]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	440a      	add	r2, r1
 800566c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005670:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005674:	60d3      	str	r3, [r2, #12]
      break;
 8005676:	e040      	b.n	80056fa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	4413      	add	r3, r2
 8005680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005684:	461a      	mov	r2, r3
 8005686:	f240 639d 	movw	r3, #1693	; 0x69d
 800568a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800568c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005690:	2b00      	cmp	r3, #0
 8005692:	da34      	bge.n	80056fe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005694:	78fb      	ldrb	r3, [r7, #3]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	4413      	add	r3, r2
 800569c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	78fa      	ldrb	r2, [r7, #3]
 80056a4:	0151      	lsls	r1, r2, #5
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	440a      	add	r2, r1
 80056aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80056b4:	e023      	b.n	80056fe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c2:	461a      	mov	r2, r3
 80056c4:	f240 2325 	movw	r3, #549	; 0x225
 80056c8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	da17      	bge.n	8005702 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	78fa      	ldrb	r2, [r7, #3]
 80056e2:	0151      	lsls	r1, r2, #5
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	440a      	add	r2, r1
 80056e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80056f0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80056f2:	e006      	b.n	8005702 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	77fb      	strb	r3, [r7, #31]
      break;
 80056f8:	e004      	b.n	8005704 <USB_HC_Init+0x14c>
      break;
 80056fa:	bf00      	nop
 80056fc:	e002      	b.n	8005704 <USB_HC_Init+0x14c>
      break;
 80056fe:	bf00      	nop
 8005700:	e000      	b.n	8005704 <USB_HC_Init+0x14c>
      break;
 8005702:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4413      	add	r3, r2
 800570c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	78fa      	ldrb	r2, [r7, #3]
 8005714:	0151      	lsls	r1, r2, #5
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	440a      	add	r2, r1
 800571a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800571e:	f043 0302 	orr.w	r3, r3, #2
 8005722:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	78fb      	ldrb	r3, [r7, #3]
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	2101      	movs	r1, #1
 8005734:	fa01 f303 	lsl.w	r3, r1, r3
 8005738:	6939      	ldr	r1, [r7, #16]
 800573a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800573e:	4313      	orrs	r3, r2
 8005740:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800574e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005752:	2b00      	cmp	r3, #0
 8005754:	da03      	bge.n	800575e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800575a:	61bb      	str	r3, [r7, #24]
 800575c:	e001      	b.n	8005762 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff feff 	bl	8005566 <USB_GetHostSpeed>
 8005768:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800576a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800576e:	2b02      	cmp	r3, #2
 8005770:	d106      	bne.n	8005780 <USB_HC_Init+0x1c8>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d003      	beq.n	8005780 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005778:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	e001      	b.n	8005784 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005784:	787b      	ldrb	r3, [r7, #1]
 8005786:	059b      	lsls	r3, r3, #22
 8005788:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800578c:	78bb      	ldrb	r3, [r7, #2]
 800578e:	02db      	lsls	r3, r3, #11
 8005790:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005794:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005796:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800579a:	049b      	lsls	r3, r3, #18
 800579c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80057a0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80057a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057a8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057ae:	78fb      	ldrb	r3, [r7, #3]
 80057b0:	0159      	lsls	r1, r3, #5
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	440b      	add	r3, r1
 80057b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ba:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057c0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80057c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d003      	beq.n	80057d2 <USB_HC_Init+0x21a>
 80057ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d10f      	bne.n	80057f2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80057d2:	78fb      	ldrb	r3, [r7, #3]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	78fa      	ldrb	r2, [r7, #3]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057f0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80057f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3720      	adds	r7, #32
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08c      	sub	sp, #48	; 0x30
 8005800:	af02      	add	r7, sp, #8
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	4613      	mov	r3, r2
 8005808:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	785b      	ldrb	r3, [r3, #1]
 8005812:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005818:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005822:	2b00      	cmp	r3, #0
 8005824:	d02d      	beq.n	8005882 <USB_HC_StartXfer+0x86>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	791b      	ldrb	r3, [r3, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d129      	bne.n	8005882 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d117      	bne.n	8005864 <USB_HC_StartXfer+0x68>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	79db      	ldrb	r3, [r3, #7]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <USB_HC_StartXfer+0x48>
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	79db      	ldrb	r3, [r3, #7]
 8005840:	2b02      	cmp	r3, #2
 8005842:	d10f      	bne.n	8005864 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	4413      	add	r3, r2
 800584c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	6a3a      	ldr	r2, [r7, #32]
 8005858:	440a      	add	r2, r1
 800585a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800585e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005862:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005864:	79fb      	ldrb	r3, [r7, #7]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10b      	bne.n	8005882 <USB_HC_StartXfer+0x86>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	795b      	ldrb	r3, [r3, #5]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d107      	bne.n	8005882 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	785b      	ldrb	r3, [r3, #1]
 8005876:	4619      	mov	r1, r3
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 fa0f 	bl	8005c9c <USB_DoPing>
      return HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	e0f8      	b.n	8005a74 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d018      	beq.n	80058bc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	8912      	ldrh	r2, [r2, #8]
 8005892:	4413      	add	r3, r2
 8005894:	3b01      	subs	r3, #1
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	8912      	ldrh	r2, [r2, #8]
 800589a:	fbb3 f3f2 	udiv	r3, r3, r2
 800589e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80058a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80058a2:	8b7b      	ldrh	r3, [r7, #26]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d90b      	bls.n	80058c0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80058a8:	8b7b      	ldrh	r3, [r7, #26]
 80058aa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	8912      	ldrh	r2, [r2, #8]
 80058b2:	fb03 f202 	mul.w	r2, r3, r2
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	611a      	str	r2, [r3, #16]
 80058ba:	e001      	b.n	80058c0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80058bc:	2301      	movs	r3, #1
 80058be:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	78db      	ldrb	r3, [r3, #3]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d007      	beq.n	80058d8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	8912      	ldrh	r2, [r2, #8]
 80058ce:	fb03 f202 	mul.w	r2, r3, r2
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	611a      	str	r2, [r3, #16]
 80058d6:	e003      	b.n	80058e0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	695a      	ldr	r2, [r3, #20]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058ea:	04d9      	lsls	r1, r3, #19
 80058ec:	4b63      	ldr	r3, [pc, #396]	; (8005a7c <USB_HC_StartXfer+0x280>)
 80058ee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058f0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	7a9b      	ldrb	r3, [r3, #10]
 80058f6:	075b      	lsls	r3, r3, #29
 80058f8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058fc:	69f9      	ldr	r1, [r7, #28]
 80058fe:	0148      	lsls	r0, r1, #5
 8005900:	6a39      	ldr	r1, [r7, #32]
 8005902:	4401      	add	r1, r0
 8005904:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005908:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800590a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	68d9      	ldr	r1, [r3, #12]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	4413      	add	r3, r2
 800591e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005922:	460a      	mov	r2, r1
 8005924:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	bf0c      	ite	eq
 8005936:	2301      	moveq	r3, #1
 8005938:	2300      	movne	r3, #0
 800593a:	b2db      	uxtb	r3, r3
 800593c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	4413      	add	r3, r2
 8005946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	6a3a      	ldr	r2, [r7, #32]
 8005952:	440a      	add	r2, r1
 8005954:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005958:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800595c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	4413      	add	r3, r2
 8005966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	7e7b      	ldrb	r3, [r7, #25]
 800596e:	075b      	lsls	r3, r3, #29
 8005970:	69f9      	ldr	r1, [r7, #28]
 8005972:	0148      	lsls	r0, r1, #5
 8005974:	6a39      	ldr	r1, [r7, #32]
 8005976:	4401      	add	r1, r0
 8005978:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800597c:	4313      	orrs	r3, r2
 800597e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	4413      	add	r3, r2
 8005988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005996:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	78db      	ldrb	r3, [r3, #3]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d004      	beq.n	80059aa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	e003      	b.n	80059b2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059b0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059b8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c6:	461a      	mov	r2, r3
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e04e      	b.n	8005a74 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	78db      	ldrb	r3, [r3, #3]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d149      	bne.n	8005a72 <USB_HC_StartXfer+0x276>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d045      	beq.n	8005a72 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	79db      	ldrb	r3, [r3, #7]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d830      	bhi.n	8005a50 <USB_HC_StartXfer+0x254>
 80059ee:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <USB_HC_StartXfer+0x1f8>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a05 	.word	0x08005a05
 80059f8:	08005a29 	.word	0x08005a29
 80059fc:	08005a05 	.word	0x08005a05
 8005a00:	08005a29 	.word	0x08005a29
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	3303      	adds	r3, #3
 8005a0a:	089b      	lsrs	r3, r3, #2
 8005a0c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005a0e:	8afa      	ldrh	r2, [r7, #22]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d91c      	bls.n	8005a54 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	f043 0220 	orr.w	r2, r3, #32
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a26:	e015      	b.n	8005a54 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	3303      	adds	r3, #3
 8005a2e:	089b      	lsrs	r3, r3, #2
 8005a30:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005a32:	8afa      	ldrh	r2, [r7, #22]
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d90a      	bls.n	8005a58 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a4e:	e003      	b.n	8005a58 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005a50:	bf00      	nop
 8005a52:	e002      	b.n	8005a5a <USB_HC_StartXfer+0x25e>
        break;
 8005a54:	bf00      	nop
 8005a56:	e000      	b.n	8005a5a <USB_HC_StartXfer+0x25e>
        break;
 8005a58:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	68d9      	ldr	r1, [r3, #12]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	785a      	ldrb	r2, [r3, #1]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	2000      	movs	r0, #0
 8005a6a:	9000      	str	r0, [sp, #0]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7ff fb31 	bl	80050d4 <USB_WritePacket>
  }

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3728      	adds	r7, #40	; 0x28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	1ff80000 	.word	0x1ff80000

08005a80 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	b29b      	uxth	r3, r3
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b089      	sub	sp, #36	; 0x24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005ab2:	78fb      	ldrb	r3, [r7, #3]
 8005ab4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	0c9b      	lsrs	r3, r3, #18
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	0fdb      	lsrs	r3, r3, #31
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b20      	cmp	r3, #32
 8005af0:	d104      	bne.n	8005afc <USB_HC_Halt+0x5a>
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	e0c8      	b.n	8005c8e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <USB_HC_Halt+0x66>
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d163      	bne.n	8005bd0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	69fa      	ldr	r2, [r7, #28]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b26:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f040 80ab 	bne.w	8005c8c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d133      	bne.n	8005baa <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	0151      	lsls	r1, r2, #5
 8005b54:	69fa      	ldr	r2, [r7, #28]
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b60:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	0151      	lsls	r1, r2, #5
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	440a      	add	r2, r1
 8005b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b80:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3301      	adds	r3, #1
 8005b86:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b8e:	d81d      	bhi.n	8005bcc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ba6:	d0ec      	beq.n	8005b82 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ba8:	e070      	b.n	8005c8c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bc8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bca:	e05f      	b.n	8005c8c <USB_HC_Halt+0x1ea>
            break;
 8005bcc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bce:	e05d      	b.n	8005c8c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	0151      	lsls	r1, r2, #5
 8005be2:	69fa      	ldr	r2, [r7, #28]
 8005be4:	440a      	add	r2, r1
 8005be6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d133      	bne.n	8005c68 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c3e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3301      	adds	r3, #1
 8005c44:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c4c:	d81d      	bhi.n	8005c8a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c64:	d0ec      	beq.n	8005c40 <USB_HC_Halt+0x19e>
 8005c66:	e011      	b.n	8005c8c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	0151      	lsls	r1, r2, #5
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	440a      	add	r2, r1
 8005c7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	e000      	b.n	8005c8c <USB_HC_Halt+0x1ea>
          break;
 8005c8a:	bf00      	nop
    }
  }

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3724      	adds	r7, #36	; 0x24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	04da      	lsls	r2, r3, #19
 8005cb8:	4b15      	ldr	r3, [pc, #84]	; (8005d10 <USB_DoPing+0x74>)
 8005cba:	4013      	ands	r3, r2
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	0151      	lsls	r1, r2, #5
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ccc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ce4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	1ff80000 	.word	0x1ff80000

08005d14 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff f911 	bl	8004f50 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d2e:	2110      	movs	r1, #16
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff f96b 	bl	800500c <USB_FlushTxFifo>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff f997 	bl	8005074 <USB_FlushRxFifo>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005d50:	2300      	movs	r3, #0
 8005d52:	61bb      	str	r3, [r7, #24]
 8005d54:	e01f      	b.n	8005d96 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d6c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d7c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	3301      	adds	r3, #1
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b0f      	cmp	r3, #15
 8005d9a:	d9dc      	bls.n	8005d56 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
 8005da0:	e034      	b.n	8005e0c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005db8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dc0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dc8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3301      	adds	r3, #1
 8005de0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005de8:	d80c      	bhi.n	8005e04 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e00:	d0ec      	beq.n	8005ddc <USB_StopHost+0xc8>
 8005e02:	e000      	b.n	8005e06 <USB_StopHost+0xf2>
        break;
 8005e04:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	61bb      	str	r3, [r7, #24]
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	2b0f      	cmp	r3, #15
 8005e10:	d9c7      	bls.n	8005da2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e1e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e26:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff f880 	bl	8004f2e <USB_EnableGlobalInt>

  return ret;
 8005e2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005e38:	b590      	push	{r4, r7, lr}
 8005e3a:	b089      	sub	sp, #36	; 0x24
 8005e3c:	af04      	add	r7, sp, #16
 8005e3e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005e40:	2301      	movs	r3, #1
 8005e42:	2202      	movs	r2, #2
 8005e44:	2102      	movs	r1, #2
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fc66 	bl	8006718 <USBH_FindInterface>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	2bff      	cmp	r3, #255	; 0xff
 8005e54:	d002      	beq.n	8005e5c <USBH_CDC_InterfaceInit+0x24>
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d901      	bls.n	8005e60 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e13d      	b.n	80060dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fc3b 	bl	80066e0 <USBH_SelectInterface>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005e6e:	7bbb      	ldrb	r3, [r7, #14]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005e74:	2302      	movs	r3, #2
 8005e76:	e131      	b.n	80060dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005e7e:	2050      	movs	r0, #80	; 0x50
 8005e80:	f002 fad2 	bl	8008428 <malloc>
 8005e84:	4603      	mov	r3, r0
 8005e86:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e11f      	b.n	80060dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005e9c:	2250      	movs	r2, #80	; 0x50
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	68b8      	ldr	r0, [r7, #8]
 8005ea2:	f002 fc82 	bl	80087aa <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	211a      	movs	r1, #26
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	b25b      	sxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	da15      	bge.n	8005eea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	211a      	movs	r1, #26
 8005ec4:	fb01 f303 	mul.w	r3, r1, r3
 8005ec8:	4413      	add	r3, r2
 8005eca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ece:	781a      	ldrb	r2, [r3, #0]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	211a      	movs	r1, #26
 8005eda:	fb01 f303 	mul.w	r3, r1, r3
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ee4:	881a      	ldrh	r2, [r3, #0]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f001 ff2e 	bl	8007d52 <USBH_AllocPipe>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	461a      	mov	r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	7819      	ldrb	r1, [r3, #0]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	7858      	ldrb	r0, [r3, #1]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	8952      	ldrh	r2, [r2, #10]
 8005f16:	9202      	str	r2, [sp, #8]
 8005f18:	2203      	movs	r2, #3
 8005f1a:	9201      	str	r2, [sp, #4]
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	4623      	mov	r3, r4
 8005f20:	4602      	mov	r2, r0
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f001 fee6 	bl	8007cf4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	4619      	mov	r1, r3
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f002 f9f5 	bl	8008320 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005f36:	2300      	movs	r3, #0
 8005f38:	2200      	movs	r2, #0
 8005f3a:	210a      	movs	r1, #10
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fbeb 	bl	8006718 <USBH_FindInterface>
 8005f42:	4603      	mov	r3, r0
 8005f44:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	2bff      	cmp	r3, #255	; 0xff
 8005f4a:	d002      	beq.n	8005f52 <USBH_CDC_InterfaceInit+0x11a>
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d901      	bls.n	8005f56 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f52:	2302      	movs	r3, #2
 8005f54:	e0c2      	b.n	80060dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	211a      	movs	r1, #26
 8005f5c:	fb01 f303 	mul.w	r3, r1, r3
 8005f60:	4413      	add	r3, r2
 8005f62:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	b25b      	sxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	da16      	bge.n	8005f9c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	211a      	movs	r1, #26
 8005f74:	fb01 f303 	mul.w	r3, r1, r3
 8005f78:	4413      	add	r3, r2
 8005f7a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f7e:	781a      	ldrb	r2, [r3, #0]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	211a      	movs	r1, #26
 8005f8a:	fb01 f303 	mul.w	r3, r1, r3
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f94:	881a      	ldrh	r2, [r3, #0]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	835a      	strh	r2, [r3, #26]
 8005f9a:	e015      	b.n	8005fc8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	211a      	movs	r1, #26
 8005fa2:	fb01 f303 	mul.w	r3, r1, r3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fac:	781a      	ldrb	r2, [r3, #0]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	211a      	movs	r1, #26
 8005fb8:	fb01 f303 	mul.w	r3, r1, r3
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005fc2:	881a      	ldrh	r2, [r3, #0]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	211a      	movs	r1, #26
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	b25b      	sxtb	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	da16      	bge.n	800600e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	211a      	movs	r1, #26
 8005fe6:	fb01 f303 	mul.w	r3, r1, r3
 8005fea:	4413      	add	r3, r2
 8005fec:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ff0:	781a      	ldrb	r2, [r3, #0]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	211a      	movs	r1, #26
 8005ffc:	fb01 f303 	mul.w	r3, r1, r3
 8006000:	4413      	add	r3, r2
 8006002:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006006:	881a      	ldrh	r2, [r3, #0]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	835a      	strh	r2, [r3, #26]
 800600c:	e015      	b.n	800603a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	211a      	movs	r1, #26
 8006014:	fb01 f303 	mul.w	r3, r1, r3
 8006018:	4413      	add	r3, r2
 800601a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800601e:	781a      	ldrb	r2, [r3, #0]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	211a      	movs	r1, #26
 800602a:	fb01 f303 	mul.w	r3, r1, r3
 800602e:	4413      	add	r3, r2
 8006030:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006034:	881a      	ldrh	r2, [r3, #0]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	7b9b      	ldrb	r3, [r3, #14]
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f001 fe86 	bl	8007d52 <USBH_AllocPipe>
 8006046:	4603      	mov	r3, r0
 8006048:	461a      	mov	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	7bdb      	ldrb	r3, [r3, #15]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 fe7c 	bl	8007d52 <USBH_AllocPipe>
 800605a:	4603      	mov	r3, r0
 800605c:	461a      	mov	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	7b59      	ldrb	r1, [r3, #13]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	7b98      	ldrb	r0, [r3, #14]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	8b12      	ldrh	r2, [r2, #24]
 800607a:	9202      	str	r2, [sp, #8]
 800607c:	2202      	movs	r2, #2
 800607e:	9201      	str	r2, [sp, #4]
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	4623      	mov	r3, r4
 8006084:	4602      	mov	r2, r0
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f001 fe34 	bl	8007cf4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	7b19      	ldrb	r1, [r3, #12]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	7bd8      	ldrb	r0, [r3, #15]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	8b52      	ldrh	r2, [r2, #26]
 80060a4:	9202      	str	r2, [sp, #8]
 80060a6:	2202      	movs	r2, #2
 80060a8:	9201      	str	r2, [sp, #4]
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4623      	mov	r3, r4
 80060ae:	4602      	mov	r2, r0
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 fe1f 	bl	8007cf4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	7b5b      	ldrb	r3, [r3, #13]
 80060c2:	2200      	movs	r2, #0
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f002 f92a 	bl	8008320 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	7b1b      	ldrb	r3, [r3, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f002 f923 	bl	8008320 <USBH_LL_SetToggle>

  return USBH_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd90      	pop	{r4, r7, pc}

080060e4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00e      	beq.n	800611c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f001 fe14 	bl	8007d32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 fe3f 	bl	8007d94 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	7b1b      	ldrb	r3, [r3, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00e      	beq.n	8006142 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	7b1b      	ldrb	r3, [r3, #12]
 8006128:	4619      	mov	r1, r3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f001 fe01 	bl	8007d32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	7b1b      	ldrb	r3, [r3, #12]
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f001 fe2c 	bl	8007d94 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	7b5b      	ldrb	r3, [r3, #13]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00e      	beq.n	8006168 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	7b5b      	ldrb	r3, [r3, #13]
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f001 fdee 	bl	8007d32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	7b5b      	ldrb	r3, [r3, #13]
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 fe19 	bl	8007d94 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00b      	beq.n	800618c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	4618      	mov	r0, r3
 800617e:	f002 f95b 	bl	8008438 <free>
    phost->pActiveClass->pData = 0U;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006188:	2200      	movs	r2, #0
 800618a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b084      	sub	sp, #16
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3340      	adds	r3, #64	; 0x40
 80061ac:	4619      	mov	r1, r3
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f8b1 	bl	8006316 <GetLineCoding>
 80061b4:	4603      	mov	r3, r0
 80061b6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80061b8:	7afb      	ldrb	r3, [r7, #11]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d105      	bne.n	80061ca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061c4:	2102      	movs	r1, #2
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80061ca:	7afb      	ldrb	r3, [r7, #11]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80061dc:	2301      	movs	r3, #1
 80061de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d877      	bhi.n	80062e8 <USBH_CDC_Process+0x114>
 80061f8:	a201      	add	r2, pc, #4	; (adr r2, 8006200 <USBH_CDC_Process+0x2c>)
 80061fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fe:	bf00      	nop
 8006200:	08006215 	.word	0x08006215
 8006204:	0800621b 	.word	0x0800621b
 8006208:	0800624b 	.word	0x0800624b
 800620c:	080062bf 	.word	0x080062bf
 8006210:	080062cd 	.word	0x080062cd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	73fb      	strb	r3, [r7, #15]
      break;
 8006218:	e06d      	b.n	80062f6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f897 	bl	8006354 <SetLineCoding>
 8006226:	4603      	mov	r3, r0
 8006228:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800622a:	7bbb      	ldrb	r3, [r7, #14]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006238:	e058      	b.n	80062ec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800623a:	7bbb      	ldrb	r3, [r7, #14]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d055      	beq.n	80062ec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2204      	movs	r2, #4
 8006244:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006248:	e050      	b.n	80062ec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	3340      	adds	r3, #64	; 0x40
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f860 	bl	8006316 <GetLineCoding>
 8006256:	4603      	mov	r3, r0
 8006258:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800625a:	7bbb      	ldrb	r3, [r7, #14]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d126      	bne.n	80062ae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006272:	791b      	ldrb	r3, [r3, #4]
 8006274:	429a      	cmp	r2, r3
 8006276:	d13b      	bne.n	80062f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006282:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006284:	429a      	cmp	r2, r3
 8006286:	d133      	bne.n	80062f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006292:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006294:	429a      	cmp	r2, r3
 8006296:	d12b      	bne.n	80062f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062a0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d124      	bne.n	80062f0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f958 	bl	800655c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80062ac:	e020      	b.n	80062f0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80062ae:	7bbb      	ldrb	r3, [r7, #14]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d01d      	beq.n	80062f0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2204      	movs	r2, #4
 80062b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80062bc:	e018      	b.n	80062f0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f867 	bl	8006392 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f8da 	bl	800647e <CDC_ProcessReception>
      break;
 80062ca:	e014      	b.n	80062f6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80062cc:	2100      	movs	r1, #0
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 ffef 	bl	80072b2 <USBH_ClrFeature>
 80062d4:	4603      	mov	r3, r0
 80062d6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80062d8:	7bbb      	ldrb	r3, [r7, #14]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80062e6:	e005      	b.n	80062f4 <USBH_CDC_Process+0x120>

    default:
      break;
 80062e8:	bf00      	nop
 80062ea:	e004      	b.n	80062f6 <USBH_CDC_Process+0x122>
      break;
 80062ec:	bf00      	nop
 80062ee:	e002      	b.n	80062f6 <USBH_CDC_Process+0x122>
      break;
 80062f0:	bf00      	nop
 80062f2:	e000      	b.n	80062f6 <USBH_CDC_Process+0x122>
      break;
 80062f4:	bf00      	nop

  }

  return status;
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	22a1      	movs	r2, #161	; 0xa1
 8006324:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2221      	movs	r2, #33	; 0x21
 800632a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2207      	movs	r2, #7
 800633c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2207      	movs	r2, #7
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f001 fa83 	bl	8007850 <USBH_CtlReq>
 800634a:	4603      	mov	r3, r0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2221      	movs	r2, #33	; 0x21
 8006362:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2220      	movs	r2, #32
 8006368:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2207      	movs	r2, #7
 800637a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2207      	movs	r2, #7
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f001 fa64 	bl	8007850 <USBH_CtlReq>
 8006388:	4603      	mov	r3, r0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b086      	sub	sp, #24
 8006396:	af02      	add	r7, sp, #8
 8006398:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80063a4:	2300      	movs	r3, #0
 80063a6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d002      	beq.n	80063b8 <CDC_ProcessTransmission+0x26>
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d023      	beq.n	80063fe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80063b6:	e05e      	b.n	8006476 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	8b12      	ldrh	r2, [r2, #24]
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d90b      	bls.n	80063dc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	69d9      	ldr	r1, [r3, #28]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8b1a      	ldrh	r2, [r3, #24]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	7b5b      	ldrb	r3, [r3, #13]
 80063d0:	2001      	movs	r0, #1
 80063d2:	9000      	str	r0, [sp, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 fc4a 	bl	8007c6e <USBH_BulkSendData>
 80063da:	e00b      	b.n	80063f4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	7b5b      	ldrb	r3, [r3, #13]
 80063ea:	2001      	movs	r0, #1
 80063ec:	9000      	str	r0, [sp, #0]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 fc3d 	bl	8007c6e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063fc:	e03b      	b.n	8006476 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	7b5b      	ldrb	r3, [r3, #13]
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f001 ff61 	bl	80082cc <USBH_LL_GetURBState>
 800640a:	4603      	mov	r3, r0
 800640c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800640e:	7afb      	ldrb	r3, [r7, #11]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d128      	bne.n	8006466 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	8b12      	ldrh	r2, [r2, #24]
 800641c:	4293      	cmp	r3, r2
 800641e:	d90e      	bls.n	800643e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	8b12      	ldrh	r2, [r2, #24]
 8006428:	1a9a      	subs	r2, r3, r2
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	8b12      	ldrh	r2, [r2, #24]
 8006436:	441a      	add	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	61da      	str	r2, [r3, #28]
 800643c:	e002      	b.n	8006444 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	2b00      	cmp	r3, #0
 800644a:	d004      	beq.n	8006456 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006454:	e00e      	b.n	8006474 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f868 	bl	8006534 <USBH_CDC_TransmitCallback>
      break;
 8006464:	e006      	b.n	8006474 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006466:	7afb      	ldrb	r3, [r7, #11]
 8006468:	2b02      	cmp	r3, #2
 800646a:	d103      	bne.n	8006474 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006474:	bf00      	nop
  }
}
 8006476:	bf00      	nop
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b086      	sub	sp, #24
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006490:	2300      	movs	r3, #0
 8006492:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800649a:	2b03      	cmp	r3, #3
 800649c:	d002      	beq.n	80064a4 <CDC_ProcessReception+0x26>
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d00e      	beq.n	80064c0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80064a2:	e043      	b.n	800652c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	6a19      	ldr	r1, [r3, #32]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	8b5a      	ldrh	r2, [r3, #26]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	7b1b      	ldrb	r3, [r3, #12]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f001 fc01 	bl	8007cb8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2204      	movs	r2, #4
 80064ba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80064be:	e035      	b.n	800652c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	7b1b      	ldrb	r3, [r3, #12]
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f001 ff00 	bl	80082cc <USBH_LL_GetURBState>
 80064cc:	4603      	mov	r3, r0
 80064ce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80064d0:	7cfb      	ldrb	r3, [r7, #19]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d129      	bne.n	800652a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	7b1b      	ldrb	r3, [r3, #12]
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 fe63 	bl	80081a8 <USBH_LL_GetLastXferSize>
 80064e2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d016      	beq.n	800651c <CDC_ProcessReception+0x9e>
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	8b5b      	ldrh	r3, [r3, #26]
 80064f2:	461a      	mov	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d910      	bls.n	800651c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	1ad2      	subs	r2, r2, r3
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	6a1a      	ldr	r2, [r3, #32]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	441a      	add	r2, r3
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2203      	movs	r2, #3
 8006516:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800651a:	e006      	b.n	800652a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f80f 	bl	8006548 <USBH_CDC_ReceiveCallback>
      break;
 800652a:	bf00      	nop
  }
}
 800652c:	bf00      	nop
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	4613      	mov	r3, r2
 800657c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006584:	2302      	movs	r3, #2
 8006586:	e029      	b.n	80065dc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	79fa      	ldrb	r2, [r7, #7]
 800658c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f81f 	bl	80065e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f001 fd33 	bl	8008040 <USBH_LL_Init>

  return USBH_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	e009      	b.n	800660a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	33e0      	adds	r3, #224	; 0xe0
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	2200      	movs	r2, #0
 8006602:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3301      	adds	r3, #1
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b0f      	cmp	r3, #15
 800660e:	d9f2      	bls.n	80065f6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006610:	2300      	movs	r3, #0
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	e009      	b.n	800662a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006620:	2200      	movs	r2, #0
 8006622:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3301      	adds	r3, #1
 8006628:	60fb      	str	r3, [r7, #12]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006630:	d3f1      	bcc.n	8006616 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2240      	movs	r2, #64	; 0x40
 8006656:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d016      	beq.n	80066ce <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10e      	bne.n	80066c8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80066b0:	1c59      	adds	r1, r3, #1
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	33de      	adds	r3, #222	; 0xde
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	73fb      	strb	r3, [r7, #15]
 80066c6:	e004      	b.n	80066d2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80066c8:	2302      	movs	r3, #2
 80066ca:	73fb      	strb	r3, [r7, #15]
 80066cc:	e001      	b.n	80066d2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80066ce:	2302      	movs	r3, #2
 80066d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80066f6:	78fa      	ldrb	r2, [r7, #3]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d204      	bcs.n	8006706 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	78fa      	ldrb	r2, [r7, #3]
 8006700:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006704:	e001      	b.n	800670a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006706:	2302      	movs	r3, #2
 8006708:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800670a:	7bfb      	ldrb	r3, [r7, #15]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	4608      	mov	r0, r1
 8006722:	4611      	mov	r1, r2
 8006724:	461a      	mov	r2, r3
 8006726:	4603      	mov	r3, r0
 8006728:	70fb      	strb	r3, [r7, #3]
 800672a:	460b      	mov	r3, r1
 800672c:	70bb      	strb	r3, [r7, #2]
 800672e:	4613      	mov	r3, r2
 8006730:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006736:	2300      	movs	r3, #0
 8006738:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006740:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006742:	e025      	b.n	8006790 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006744:	7dfb      	ldrb	r3, [r7, #23]
 8006746:	221a      	movs	r2, #26
 8006748:	fb02 f303 	mul.w	r3, r2, r3
 800674c:	3308      	adds	r3, #8
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	4413      	add	r3, r2
 8006752:	3302      	adds	r3, #2
 8006754:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	795b      	ldrb	r3, [r3, #5]
 800675a:	78fa      	ldrb	r2, [r7, #3]
 800675c:	429a      	cmp	r2, r3
 800675e:	d002      	beq.n	8006766 <USBH_FindInterface+0x4e>
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	2bff      	cmp	r3, #255	; 0xff
 8006764:	d111      	bne.n	800678a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800676a:	78ba      	ldrb	r2, [r7, #2]
 800676c:	429a      	cmp	r2, r3
 800676e:	d002      	beq.n	8006776 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006770:	78bb      	ldrb	r3, [r7, #2]
 8006772:	2bff      	cmp	r3, #255	; 0xff
 8006774:	d109      	bne.n	800678a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800677a:	787a      	ldrb	r2, [r7, #1]
 800677c:	429a      	cmp	r2, r3
 800677e:	d002      	beq.n	8006786 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006780:	787b      	ldrb	r3, [r7, #1]
 8006782:	2bff      	cmp	r3, #255	; 0xff
 8006784:	d101      	bne.n	800678a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006786:	7dfb      	ldrb	r3, [r7, #23]
 8006788:	e006      	b.n	8006798 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800678a:	7dfb      	ldrb	r3, [r7, #23]
 800678c:	3301      	adds	r3, #1
 800678e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006790:	7dfb      	ldrb	r3, [r7, #23]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d9d6      	bls.n	8006744 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006796:	23ff      	movs	r3, #255	; 0xff
}
 8006798:	4618      	mov	r0, r3
 800679a:	371c      	adds	r7, #28
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 fc83 	bl	80080b8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80067b2:	2101      	movs	r1, #1
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 fd9c 	bl	80082f2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af04      	add	r7, sp, #16
 80067ca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80067cc:	2302      	movs	r3, #2
 80067ce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d102      	bne.n	80067e6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2203      	movs	r2, #3
 80067e4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b0b      	cmp	r3, #11
 80067ee:	f200 81be 	bhi.w	8006b6e <USBH_Process+0x3aa>
 80067f2:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <USBH_Process+0x34>)
 80067f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f8:	08006829 	.word	0x08006829
 80067fc:	0800685b 	.word	0x0800685b
 8006800:	080068c3 	.word	0x080068c3
 8006804:	08006b09 	.word	0x08006b09
 8006808:	08006b6f 	.word	0x08006b6f
 800680c:	08006967 	.word	0x08006967
 8006810:	08006aaf 	.word	0x08006aaf
 8006814:	0800699d 	.word	0x0800699d
 8006818:	080069bd 	.word	0x080069bd
 800681c:	080069dd 	.word	0x080069dd
 8006820:	08006a21 	.word	0x08006a21
 8006824:	08006af1 	.word	0x08006af1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 819e 	beq.w	8006b72 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800683c:	20c8      	movs	r0, #200	; 0xc8
 800683e:	f001 fd9f 	bl	8008380 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f001 fc95 	bl	8008172 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006858:	e18b      	b.n	8006b72 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006860:	2b01      	cmp	r3, #1
 8006862:	d107      	bne.n	8006874 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006872:	e18d      	b.n	8006b90 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800687a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800687e:	d914      	bls.n	80068aa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006886:	3301      	adds	r3, #1
 8006888:	b2da      	uxtb	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006896:	2b03      	cmp	r3, #3
 8006898:	d903      	bls.n	80068a2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	220d      	movs	r2, #13
 800689e:	701a      	strb	r2, [r3, #0]
      break;
 80068a0:	e176      	b.n	8006b90 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	701a      	strb	r2, [r3, #0]
      break;
 80068a8:	e172      	b.n	8006b90 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80068b0:	f103 020a 	add.w	r2, r3, #10
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80068ba:	200a      	movs	r0, #10
 80068bc:	f001 fd60 	bl	8008380 <USBH_Delay>
      break;
 80068c0:	e166      	b.n	8006b90 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d005      	beq.n	80068d8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068d2:	2104      	movs	r1, #4
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80068d8:	2064      	movs	r0, #100	; 0x64
 80068da:	f001 fd51 	bl	8008380 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 fc20 	bl	8008124 <USBH_LL_GetSpeed>
 80068e4:	4603      	mov	r3, r0
 80068e6:	461a      	mov	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2205      	movs	r2, #5
 80068f2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80068f4:	2100      	movs	r1, #0
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 fa2b 	bl	8007d52 <USBH_AllocPipe>
 80068fc:	4603      	mov	r3, r0
 80068fe:	461a      	mov	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006904:	2180      	movs	r1, #128	; 0x80
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f001 fa23 	bl	8007d52 <USBH_AllocPipe>
 800690c:	4603      	mov	r3, r0
 800690e:	461a      	mov	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	7919      	ldrb	r1, [r3, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006928:	b292      	uxth	r2, r2
 800692a:	9202      	str	r2, [sp, #8]
 800692c:	2200      	movs	r2, #0
 800692e:	9201      	str	r2, [sp, #4]
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	4603      	mov	r3, r0
 8006934:	2280      	movs	r2, #128	; 0x80
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f001 f9dc 	bl	8007cf4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	7959      	ldrb	r1, [r3, #5]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006950:	b292      	uxth	r2, r2
 8006952:	9202      	str	r2, [sp, #8]
 8006954:	2200      	movs	r2, #0
 8006956:	9201      	str	r2, [sp, #4]
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	4603      	mov	r3, r0
 800695c:	2200      	movs	r2, #0
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f001 f9c8 	bl	8007cf4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006964:	e114      	b.n	8006b90 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f918 	bl	8006b9c <USBH_HandleEnum>
 800696c:	4603      	mov	r3, r0
 800696e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006970:	7bbb      	ldrb	r3, [r7, #14]
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b00      	cmp	r3, #0
 8006976:	f040 80fe 	bne.w	8006b76 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006988:	2b01      	cmp	r3, #1
 800698a:	d103      	bne.n	8006994 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2208      	movs	r2, #8
 8006990:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006992:	e0f0      	b.n	8006b76 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2207      	movs	r2, #7
 8006998:	701a      	strb	r2, [r3, #0]
      break;
 800699a:	e0ec      	b.n	8006b76 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 80e9 	beq.w	8006b7a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069ae:	2101      	movs	r1, #1
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2208      	movs	r2, #8
 80069b8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80069ba:	e0de      	b.n	8006b7a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fc2c 	bl	8007224 <USBH_SetCfg>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f040 80d5 	bne.w	8006b7e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2209      	movs	r2, #9
 80069d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069da:	e0d0      	b.n	8006b7e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d016      	beq.n	8006a18 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80069ea:	2101      	movs	r1, #1
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fc3c 	bl	800726a <USBH_SetFeature>
 80069f2:	4603      	mov	r3, r0
 80069f4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80069f6:	7bbb      	ldrb	r3, [r7, #14]
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d103      	bne.n	8006a06 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	220a      	movs	r2, #10
 8006a02:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a04:	e0bd      	b.n	8006b82 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006a06:	7bbb      	ldrb	r3, [r7, #14]
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	f040 80b9 	bne.w	8006b82 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	220a      	movs	r2, #10
 8006a14:	701a      	strb	r2, [r3, #0]
      break;
 8006a16:	e0b4      	b.n	8006b82 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	220a      	movs	r2, #10
 8006a1c:	701a      	strb	r2, [r3, #0]
      break;
 8006a1e:	e0b0      	b.n	8006b82 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 80ad 	beq.w	8006b86 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a34:	2300      	movs	r3, #0
 8006a36:	73fb      	strb	r3, [r7, #15]
 8006a38:	e016      	b.n	8006a68 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006a3a:	7bfa      	ldrb	r2, [r7, #15]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	32de      	adds	r2, #222	; 0xde
 8006a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a44:	791a      	ldrb	r2, [r3, #4]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d108      	bne.n	8006a62 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006a50:	7bfa      	ldrb	r2, [r7, #15]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	32de      	adds	r2, #222	; 0xde
 8006a56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006a60:	e005      	b.n	8006a6e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	3301      	adds	r3, #1
 8006a66:	73fb      	strb	r3, [r7, #15]
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d0e5      	beq.n	8006a3a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d016      	beq.n	8006aa6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	4798      	blx	r3
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d109      	bne.n	8006a9e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2206      	movs	r2, #6
 8006a8e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a96:	2103      	movs	r1, #3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a9c:	e073      	b.n	8006b86 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	220d      	movs	r2, #13
 8006aa2:	701a      	strb	r2, [r3, #0]
      break;
 8006aa4:	e06f      	b.n	8006b86 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	220d      	movs	r2, #13
 8006aaa:	701a      	strb	r2, [r3, #0]
      break;
 8006aac:	e06b      	b.n	8006b86 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d017      	beq.n	8006ae8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	4798      	blx	r3
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d103      	bne.n	8006ad8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	220b      	movs	r2, #11
 8006ad4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ad6:	e058      	b.n	8006b8a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006ad8:	7bbb      	ldrb	r3, [r7, #14]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d154      	bne.n	8006b8a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	220d      	movs	r2, #13
 8006ae4:	701a      	strb	r2, [r3, #0]
      break;
 8006ae6:	e050      	b.n	8006b8a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	220d      	movs	r2, #13
 8006aec:	701a      	strb	r2, [r3, #0]
      break;
 8006aee:	e04c      	b.n	8006b8a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d049      	beq.n	8006b8e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	4798      	blx	r3
      }
      break;
 8006b06:	e042      	b.n	8006b8e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7ff fd67 	bl	80065e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d009      	beq.n	8006b34 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d005      	beq.n	8006b4a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b44:	2105      	movs	r1, #5
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d107      	bne.n	8006b66 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff fe20 	bl	80067a4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b64:	e014      	b.n	8006b90 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f001 faa6 	bl	80080b8 <USBH_LL_Start>
      break;
 8006b6c:	e010      	b.n	8006b90 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006b6e:	bf00      	nop
 8006b70:	e00e      	b.n	8006b90 <USBH_Process+0x3cc>
      break;
 8006b72:	bf00      	nop
 8006b74:	e00c      	b.n	8006b90 <USBH_Process+0x3cc>
      break;
 8006b76:	bf00      	nop
 8006b78:	e00a      	b.n	8006b90 <USBH_Process+0x3cc>
    break;
 8006b7a:	bf00      	nop
 8006b7c:	e008      	b.n	8006b90 <USBH_Process+0x3cc>
      break;
 8006b7e:	bf00      	nop
 8006b80:	e006      	b.n	8006b90 <USBH_Process+0x3cc>
      break;
 8006b82:	bf00      	nop
 8006b84:	e004      	b.n	8006b90 <USBH_Process+0x3cc>
      break;
 8006b86:	bf00      	nop
 8006b88:	e002      	b.n	8006b90 <USBH_Process+0x3cc>
      break;
 8006b8a:	bf00      	nop
 8006b8c:	e000      	b.n	8006b90 <USBH_Process+0x3cc>
      break;
 8006b8e:	bf00      	nop
  }
  return USBH_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop

08006b9c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af04      	add	r7, sp, #16
 8006ba2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	785b      	ldrb	r3, [r3, #1]
 8006bb0:	2b07      	cmp	r3, #7
 8006bb2:	f200 81c1 	bhi.w	8006f38 <USBH_HandleEnum+0x39c>
 8006bb6:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <USBH_HandleEnum+0x20>)
 8006bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbc:	08006bdd 	.word	0x08006bdd
 8006bc0:	08006c9b 	.word	0x08006c9b
 8006bc4:	08006d05 	.word	0x08006d05
 8006bc8:	08006d93 	.word	0x08006d93
 8006bcc:	08006dfd 	.word	0x08006dfd
 8006bd0:	08006e6d 	.word	0x08006e6d
 8006bd4:	08006eb3 	.word	0x08006eb3
 8006bd8:	08006ef9 	.word	0x08006ef9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006bdc:	2108      	movs	r1, #8
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fa50 	bl	8007084 <USBH_Get_DevDesc>
 8006be4:	4603      	mov	r3, r0
 8006be6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d130      	bne.n	8006c50 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	7919      	ldrb	r1, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c12:	b292      	uxth	r2, r2
 8006c14:	9202      	str	r2, [sp, #8]
 8006c16:	2200      	movs	r2, #0
 8006c18:	9201      	str	r2, [sp, #4]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2280      	movs	r2, #128	; 0x80
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 f867 	bl	8007cf4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	7959      	ldrb	r1, [r3, #5]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c3a:	b292      	uxth	r2, r2
 8006c3c:	9202      	str	r2, [sp, #8]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	9201      	str	r2, [sp, #4]
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	4603      	mov	r3, r0
 8006c46:	2200      	movs	r2, #0
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 f853 	bl	8007cf4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006c4e:	e175      	b.n	8006f3c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c50:	7bbb      	ldrb	r3, [r7, #14]
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	f040 8172 	bne.w	8006f3c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c5e:	3301      	adds	r3, #1
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d903      	bls.n	8006c7a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	220d      	movs	r2, #13
 8006c76:	701a      	strb	r2, [r3, #0]
      break;
 8006c78:	e160      	b.n	8006f3c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	795b      	ldrb	r3, [r3, #5]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 f887 	bl	8007d94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	791b      	ldrb	r3, [r3, #4]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 f881 	bl	8007d94 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	701a      	strb	r2, [r3, #0]
      break;
 8006c98:	e150      	b.n	8006f3c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006c9a:	2112      	movs	r1, #18
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f9f1 	bl	8007084 <USBH_Get_DevDesc>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ca6:	7bbb      	ldrb	r3, [r7, #14]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d103      	bne.n	8006cb4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006cb2:	e145      	b.n	8006f40 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	f040 8142 	bne.w	8006f40 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d903      	bls.n	8006cde <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	220d      	movs	r2, #13
 8006cda:	701a      	strb	r2, [r3, #0]
      break;
 8006cdc:	e130      	b.n	8006f40 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	795b      	ldrb	r3, [r3, #5]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 f855 	bl	8007d94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	791b      	ldrb	r3, [r3, #4]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f001 f84f 	bl	8007d94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	701a      	strb	r2, [r3, #0]
      break;
 8006d02:	e11d      	b.n	8006f40 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006d04:	2101      	movs	r1, #1
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fa68 	bl	80071dc <USBH_SetAddress>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d10:	7bbb      	ldrb	r3, [r7, #14]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d132      	bne.n	8006d7c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006d16:	2002      	movs	r0, #2
 8006d18:	f001 fb32 	bl	8008380 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2203      	movs	r2, #3
 8006d28:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	7919      	ldrb	r1, [r3, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d3e:	b292      	uxth	r2, r2
 8006d40:	9202      	str	r2, [sp, #8]
 8006d42:	2200      	movs	r2, #0
 8006d44:	9201      	str	r2, [sp, #4]
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2280      	movs	r2, #128	; 0x80
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 ffd1 	bl	8007cf4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	7959      	ldrb	r1, [r3, #5]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d66:	b292      	uxth	r2, r2
 8006d68:	9202      	str	r2, [sp, #8]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	9201      	str	r2, [sp, #4]
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	4603      	mov	r3, r0
 8006d72:	2200      	movs	r2, #0
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 ffbd 	bl	8007cf4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d7a:	e0e3      	b.n	8006f44 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	f040 80e0 	bne.w	8006f44 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	220d      	movs	r2, #13
 8006d88:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	705a      	strb	r2, [r3, #1]
      break;
 8006d90:	e0d8      	b.n	8006f44 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006d92:	2109      	movs	r1, #9
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f99d 	bl	80070d4 <USBH_Get_CfgDesc>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d9e:	7bbb      	ldrb	r3, [r7, #14]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d103      	bne.n	8006dac <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2204      	movs	r2, #4
 8006da8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006daa:	e0cd      	b.n	8006f48 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	f040 80ca 	bne.w	8006f48 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dba:	3301      	adds	r3, #1
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d903      	bls.n	8006dd6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	220d      	movs	r2, #13
 8006dd2:	701a      	strb	r2, [r3, #0]
      break;
 8006dd4:	e0b8      	b.n	8006f48 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	795b      	ldrb	r3, [r3, #5]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 ffd9 	bl	8007d94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	791b      	ldrb	r3, [r3, #4]
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 ffd3 	bl	8007d94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	701a      	strb	r2, [r3, #0]
      break;
 8006dfa:	e0a5      	b.n	8006f48 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f965 	bl	80070d4 <USBH_Get_CfgDesc>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d103      	bne.n	8006e1c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2205      	movs	r2, #5
 8006e18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e1a:	e097      	b.n	8006f4c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e1c:	7bbb      	ldrb	r3, [r7, #14]
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	f040 8094 	bne.w	8006f4c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d903      	bls.n	8006e46 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	220d      	movs	r2, #13
 8006e42:	701a      	strb	r2, [r3, #0]
      break;
 8006e44:	e082      	b.n	8006f4c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	795b      	ldrb	r3, [r3, #5]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 ffa1 	bl	8007d94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	791b      	ldrb	r3, [r3, #4]
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 ff9b 	bl	8007d94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	701a      	strb	r2, [r3, #0]
      break;
 8006e6a:	e06f      	b.n	8006f4c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d019      	beq.n	8006eaa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e82:	23ff      	movs	r3, #255	; 0xff
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f949 	bl	800711c <USBH_Get_StringDesc>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d103      	bne.n	8006e9c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2206      	movs	r2, #6
 8006e98:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e9a:	e059      	b.n	8006f50 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e9c:	7bbb      	ldrb	r3, [r7, #14]
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d156      	bne.n	8006f50 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2206      	movs	r2, #6
 8006ea6:	705a      	strb	r2, [r3, #1]
      break;
 8006ea8:	e052      	b.n	8006f50 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2206      	movs	r2, #6
 8006eae:	705a      	strb	r2, [r3, #1]
      break;
 8006eb0:	e04e      	b.n	8006f50 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d019      	beq.n	8006ef0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ec8:	23ff      	movs	r3, #255	; 0xff
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f926 	bl	800711c <USBH_Get_StringDesc>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d103      	bne.n	8006ee2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2207      	movs	r2, #7
 8006ede:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006ee0:	e038      	b.n	8006f54 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d135      	bne.n	8006f54 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2207      	movs	r2, #7
 8006eec:	705a      	strb	r2, [r3, #1]
      break;
 8006eee:	e031      	b.n	8006f54 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2207      	movs	r2, #7
 8006ef4:	705a      	strb	r2, [r3, #1]
      break;
 8006ef6:	e02d      	b.n	8006f54 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d017      	beq.n	8006f32 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f0e:	23ff      	movs	r3, #255	; 0xff
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f903 	bl	800711c <USBH_Get_StringDesc>
 8006f16:	4603      	mov	r3, r0
 8006f18:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f1a:	7bbb      	ldrb	r3, [r7, #14]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d102      	bne.n	8006f26 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006f24:	e018      	b.n	8006f58 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f26:	7bbb      	ldrb	r3, [r7, #14]
 8006f28:	2b03      	cmp	r3, #3
 8006f2a:	d115      	bne.n	8006f58 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f30:	e012      	b.n	8006f58 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	73fb      	strb	r3, [r7, #15]
      break;
 8006f36:	e00f      	b.n	8006f58 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006f38:	bf00      	nop
 8006f3a:	e00e      	b.n	8006f5a <USBH_HandleEnum+0x3be>
      break;
 8006f3c:	bf00      	nop
 8006f3e:	e00c      	b.n	8006f5a <USBH_HandleEnum+0x3be>
      break;
 8006f40:	bf00      	nop
 8006f42:	e00a      	b.n	8006f5a <USBH_HandleEnum+0x3be>
      break;
 8006f44:	bf00      	nop
 8006f46:	e008      	b.n	8006f5a <USBH_HandleEnum+0x3be>
      break;
 8006f48:	bf00      	nop
 8006f4a:	e006      	b.n	8006f5a <USBH_HandleEnum+0x3be>
      break;
 8006f4c:	bf00      	nop
 8006f4e:	e004      	b.n	8006f5a <USBH_HandleEnum+0x3be>
      break;
 8006f50:	bf00      	nop
 8006f52:	e002      	b.n	8006f5a <USBH_HandleEnum+0x3be>
      break;
 8006f54:	bf00      	nop
 8006f56:	e000      	b.n	8006f5a <USBH_HandleEnum+0x3be>
      break;
 8006f58:	bf00      	nop
  }
  return Status;
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006f76:	bf00      	nop
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b082      	sub	sp, #8
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f804 	bl	8006fa6 <USBH_HandleSof>
}
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b082      	sub	sp, #8
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b0b      	cmp	r3, #11
 8006fb6:	d10a      	bne.n	8006fce <USBH_HandleSof+0x28>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d005      	beq.n	8006fce <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	4798      	blx	r3
  }
}
 8006fce:	bf00      	nop
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006fe6:	bf00      	nop
}
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007002:	bf00      	nop
}
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 f846 	bl	80080ee <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	791b      	ldrb	r3, [r3, #4]
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fe93 	bl	8007d94 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	795b      	ldrb	r3, [r3, #5]
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fe8d 	bl	8007d94 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af02      	add	r7, sp, #8
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	460b      	mov	r3, r1
 800708e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007096:	78fb      	ldrb	r3, [r7, #3]
 8007098:	b29b      	uxth	r3, r3
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	4613      	mov	r3, r2
 800709e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070a2:	2100      	movs	r1, #0
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f864 	bl	8007172 <USBH_GetDescriptor>
 80070aa:	4603      	mov	r3, r0
 80070ac:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070c0:	78fa      	ldrb	r2, [r7, #3]
 80070c2:	b292      	uxth	r2, r2
 80070c4:	4619      	mov	r1, r3
 80070c6:	f000 f919 	bl	80072fc <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af02      	add	r7, sp, #8
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	331c      	adds	r3, #28
 80070e4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80070e6:	887b      	ldrh	r3, [r7, #2]
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070f0:	2100      	movs	r1, #0
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f83d 	bl	8007172 <USBH_GetDescriptor>
 80070f8:	4603      	mov	r3, r0
 80070fa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d107      	bne.n	8007112 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007102:	887b      	ldrh	r3, [r7, #2]
 8007104:	461a      	mov	r2, r3
 8007106:	68b9      	ldr	r1, [r7, #8]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f989 	bl	8007420 <USBH_ParseCfgDesc>
 800710e:	4603      	mov	r3, r0
 8007110:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007112:	7bfb      	ldrb	r3, [r7, #15]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af02      	add	r7, sp, #8
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	607a      	str	r2, [r7, #4]
 8007126:	461a      	mov	r2, r3
 8007128:	460b      	mov	r3, r1
 800712a:	72fb      	strb	r3, [r7, #11]
 800712c:	4613      	mov	r3, r2
 800712e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007130:	7afb      	ldrb	r3, [r7, #11]
 8007132:	b29b      	uxth	r3, r3
 8007134:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007138:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007140:	893b      	ldrh	r3, [r7, #8]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	460b      	mov	r3, r1
 8007146:	2100      	movs	r1, #0
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f000 f812 	bl	8007172 <USBH_GetDescriptor>
 800714e:	4603      	mov	r3, r0
 8007150:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007152:	7dfb      	ldrb	r3, [r7, #23]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d107      	bne.n	8007168 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800715e:	893a      	ldrh	r2, [r7, #8]
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fb26 	bl	80077b4 <USBH_ParseStringDesc>
  }

  return status;
 8007168:	7dfb      	ldrb	r3, [r7, #23]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	607b      	str	r3, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	72fb      	strb	r3, [r7, #11]
 8007180:	4613      	mov	r3, r2
 8007182:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	789b      	ldrb	r3, [r3, #2]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d11c      	bne.n	80071c6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800718c:	7afb      	ldrb	r3, [r7, #11]
 800718e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007192:	b2da      	uxtb	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2206      	movs	r2, #6
 800719c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	893a      	ldrh	r2, [r7, #8]
 80071a2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80071a4:	893b      	ldrh	r3, [r7, #8]
 80071a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80071aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ae:	d104      	bne.n	80071ba <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f240 4209 	movw	r2, #1033	; 0x409
 80071b6:	829a      	strh	r2, [r3, #20]
 80071b8:	e002      	b.n	80071c0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8b3a      	ldrh	r2, [r7, #24]
 80071c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80071c6:	8b3b      	ldrh	r3, [r7, #24]
 80071c8:	461a      	mov	r2, r3
 80071ca:	6879      	ldr	r1, [r7, #4]
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 fb3f 	bl	8007850 <USBH_CtlReq>
 80071d2:	4603      	mov	r3, r0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	789b      	ldrb	r3, [r3, #2]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d10f      	bne.n	8007210 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2205      	movs	r2, #5
 80071fa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	b29a      	uxth	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007210:	2200      	movs	r2, #0
 8007212:	2100      	movs	r1, #0
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fb1b 	bl	8007850 <USBH_CtlReq>
 800721a:	4603      	mov	r3, r0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	789b      	ldrb	r3, [r3, #2]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d10e      	bne.n	8007256 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2209      	movs	r2, #9
 8007242:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	887a      	ldrh	r2, [r7, #2]
 8007248:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007256:	2200      	movs	r2, #0
 8007258:	2100      	movs	r1, #0
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 faf8 	bl	8007850 <USBH_CtlReq>
 8007260:	4603      	mov	r3, r0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	460b      	mov	r3, r1
 8007274:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	789b      	ldrb	r3, [r3, #2]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d10f      	bne.n	800729e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2203      	movs	r2, #3
 8007288:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800728a:	78fb      	ldrb	r3, [r7, #3]
 800728c:	b29a      	uxth	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800729e:	2200      	movs	r2, #0
 80072a0:	2100      	movs	r1, #0
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fad4 	bl	8007850 <USBH_CtlReq>
 80072a8:	4603      	mov	r3, r0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b082      	sub	sp, #8
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	460b      	mov	r3, r1
 80072bc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	789b      	ldrb	r3, [r3, #2]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d10f      	bne.n	80072e6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2202      	movs	r2, #2
 80072ca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80072d8:	78fb      	ldrb	r3, [r7, #3]
 80072da:	b29a      	uxth	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80072e6:	2200      	movs	r2, #0
 80072e8:	2100      	movs	r1, #0
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fab0 	bl	8007850 <USBH_CtlReq>
 80072f0:	4603      	mov	r3, r0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	4613      	mov	r3, r2
 8007308:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	781a      	ldrb	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	785a      	ldrb	r2, [r3, #1]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	3302      	adds	r3, #2
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	b29a      	uxth	r2, r3
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	3303      	adds	r3, #3
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	b29b      	uxth	r3, r3
 800732a:	021b      	lsls	r3, r3, #8
 800732c:	b29b      	uxth	r3, r3
 800732e:	4313      	orrs	r3, r2
 8007330:	b29a      	uxth	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	791a      	ldrb	r2, [r3, #4]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	795a      	ldrb	r2, [r3, #5]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	799a      	ldrb	r2, [r3, #6]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	79da      	ldrb	r2, [r3, #7]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	79db      	ldrb	r3, [r3, #7]
 800735a:	2b20      	cmp	r3, #32
 800735c:	dc0f      	bgt.n	800737e <USBH_ParseDevDesc+0x82>
 800735e:	2b08      	cmp	r3, #8
 8007360:	db14      	blt.n	800738c <USBH_ParseDevDesc+0x90>
 8007362:	3b08      	subs	r3, #8
 8007364:	4a2d      	ldr	r2, [pc, #180]	; (800741c <USBH_ParseDevDesc+0x120>)
 8007366:	fa22 f303 	lsr.w	r3, r2, r3
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	bf14      	ite	ne
 8007372:	2301      	movne	r3, #1
 8007374:	2300      	moveq	r3, #0
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d102      	bne.n	8007382 <USBH_ParseDevDesc+0x86>
 800737c:	e006      	b.n	800738c <USBH_ParseDevDesc+0x90>
 800737e:	2b40      	cmp	r3, #64	; 0x40
 8007380:	d104      	bne.n	800738c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	79da      	ldrb	r2, [r3, #7]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	71da      	strb	r2, [r3, #7]
      break;
 800738a:	e003      	b.n	8007394 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2240      	movs	r2, #64	; 0x40
 8007390:	71da      	strb	r2, [r3, #7]
      break;
 8007392:	bf00      	nop
  }

  if (length > 8U)
 8007394:	88fb      	ldrh	r3, [r7, #6]
 8007396:	2b08      	cmp	r3, #8
 8007398:	d939      	bls.n	800740e <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	3308      	adds	r3, #8
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	3309      	adds	r3, #9
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	021b      	lsls	r3, r3, #8
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	4313      	orrs	r3, r2
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	330a      	adds	r3, #10
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	b29a      	uxth	r2, r3
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	330b      	adds	r3, #11
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	021b      	lsls	r3, r3, #8
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	4313      	orrs	r3, r2
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	330c      	adds	r3, #12
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	b29a      	uxth	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	330d      	adds	r3, #13
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	021b      	lsls	r3, r3, #8
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	4313      	orrs	r3, r2
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	7b9a      	ldrb	r2, [r3, #14]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	7bda      	ldrb	r2, [r3, #15]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	7c1a      	ldrb	r2, [r3, #16]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	7c5a      	ldrb	r2, [r3, #17]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	745a      	strb	r2, [r3, #17]
  }
}
 800740e:	bf00      	nop
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	01000101 	.word	0x01000101

08007420 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08c      	sub	sp, #48	; 0x30
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	4613      	mov	r3, r2
 800742c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007434:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	781a      	ldrb	r2, [r3, #0]
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	785a      	ldrb	r2, [r3, #1]
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	3302      	adds	r3, #2
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	b29a      	uxth	r2, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	3303      	adds	r3, #3
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	b29b      	uxth	r3, r3
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	b29b      	uxth	r3, r3
 8007474:	4313      	orrs	r3, r2
 8007476:	b29b      	uxth	r3, r3
 8007478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800747c:	bf28      	it	cs
 800747e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007482:	b29a      	uxth	r2, r3
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	791a      	ldrb	r2, [r3, #4]
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	795a      	ldrb	r2, [r3, #5]
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	799a      	ldrb	r2, [r3, #6]
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	79da      	ldrb	r2, [r3, #7]
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	7a1a      	ldrb	r2, [r3, #8]
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	2b09      	cmp	r3, #9
 80074b6:	d002      	beq.n	80074be <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	2209      	movs	r2, #9
 80074bc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80074be:	88fb      	ldrh	r3, [r7, #6]
 80074c0:	2b09      	cmp	r3, #9
 80074c2:	f240 809d 	bls.w	8007600 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80074c6:	2309      	movs	r3, #9
 80074c8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80074ca:	2300      	movs	r3, #0
 80074cc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80074ce:	e081      	b.n	80075d4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80074d0:	f107 0316 	add.w	r3, r7, #22
 80074d4:	4619      	mov	r1, r3
 80074d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074d8:	f000 f99f 	bl	800781a <USBH_GetNextDesc>
 80074dc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	785b      	ldrb	r3, [r3, #1]
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	d176      	bne.n	80075d4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80074e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	2b09      	cmp	r3, #9
 80074ec:	d002      	beq.n	80074f4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80074ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f0:	2209      	movs	r2, #9
 80074f2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80074f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074f8:	221a      	movs	r2, #26
 80074fa:	fb02 f303 	mul.w	r3, r2, r3
 80074fe:	3308      	adds	r3, #8
 8007500:	6a3a      	ldr	r2, [r7, #32]
 8007502:	4413      	add	r3, r2
 8007504:	3302      	adds	r3, #2
 8007506:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800750a:	69f8      	ldr	r0, [r7, #28]
 800750c:	f000 f87e 	bl	800760c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800751a:	e043      	b.n	80075a4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800751c:	f107 0316 	add.w	r3, r7, #22
 8007520:	4619      	mov	r1, r3
 8007522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007524:	f000 f979 	bl	800781a <USBH_GetNextDesc>
 8007528:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	785b      	ldrb	r3, [r3, #1]
 800752e:	2b05      	cmp	r3, #5
 8007530:	d138      	bne.n	80075a4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	795b      	ldrb	r3, [r3, #5]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d10f      	bne.n	800755a <USBH_ParseCfgDesc+0x13a>
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	799b      	ldrb	r3, [r3, #6]
 800753e:	2b02      	cmp	r3, #2
 8007540:	d10b      	bne.n	800755a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	79db      	ldrb	r3, [r3, #7]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10f      	bne.n	800756a <USBH_ParseCfgDesc+0x14a>
 800754a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	2b09      	cmp	r3, #9
 8007550:	d00b      	beq.n	800756a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007554:	2209      	movs	r2, #9
 8007556:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007558:	e007      	b.n	800756a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b07      	cmp	r3, #7
 8007560:	d004      	beq.n	800756c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	2207      	movs	r2, #7
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	e000      	b.n	800756c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800756a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800756c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007570:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007574:	3201      	adds	r2, #1
 8007576:	00d2      	lsls	r2, r2, #3
 8007578:	211a      	movs	r1, #26
 800757a:	fb01 f303 	mul.w	r3, r1, r3
 800757e:	4413      	add	r3, r2
 8007580:	3308      	adds	r3, #8
 8007582:	6a3a      	ldr	r2, [r7, #32]
 8007584:	4413      	add	r3, r2
 8007586:	3304      	adds	r3, #4
 8007588:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800758a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800758c:	69b9      	ldr	r1, [r7, #24]
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 f86b 	bl	800766a <USBH_ParseEPDesc>
 8007594:	4603      	mov	r3, r0
 8007596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800759a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800759e:	3301      	adds	r3, #1
 80075a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	791b      	ldrb	r3, [r3, #4]
 80075a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d204      	bcs.n	80075ba <USBH_ParseCfgDesc+0x19a>
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	885a      	ldrh	r2, [r3, #2]
 80075b4:	8afb      	ldrh	r3, [r7, #22]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d8b0      	bhi.n	800751c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	791b      	ldrb	r3, [r3, #4]
 80075be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d201      	bcs.n	80075ca <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e01c      	b.n	8007604 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80075ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075ce:	3301      	adds	r3, #1
 80075d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80075d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d805      	bhi.n	80075e8 <USBH_ParseCfgDesc+0x1c8>
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	885a      	ldrh	r2, [r3, #2]
 80075e0:	8afb      	ldrh	r3, [r7, #22]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	f63f af74 	bhi.w	80074d0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	791b      	ldrb	r3, [r3, #4]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	bf28      	it	cs
 80075f0:	2302      	movcs	r3, #2
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d201      	bcs.n	8007600 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e001      	b.n	8007604 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007600:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007604:	4618      	mov	r0, r3
 8007606:	3730      	adds	r7, #48	; 0x30
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781a      	ldrb	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	785a      	ldrb	r2, [r3, #1]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	789a      	ldrb	r2, [r3, #2]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	78da      	ldrb	r2, [r3, #3]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	791a      	ldrb	r2, [r3, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	795a      	ldrb	r2, [r3, #5]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	799a      	ldrb	r2, [r3, #6]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	79da      	ldrb	r2, [r3, #7]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	7a1a      	ldrb	r2, [r3, #8]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	721a      	strb	r2, [r3, #8]
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800766a:	b480      	push	{r7}
 800766c:	b087      	sub	sp, #28
 800766e:	af00      	add	r7, sp, #0
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	781a      	ldrb	r2, [r3, #0]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	785a      	ldrb	r2, [r3, #1]
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	789a      	ldrb	r2, [r3, #2]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	78da      	ldrb	r2, [r3, #3]
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3304      	adds	r3, #4
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	3305      	adds	r3, #5
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	021b      	lsls	r3, r3, #8
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	4313      	orrs	r3, r2
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	799a      	ldrb	r2, [r3, #6]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	889b      	ldrh	r3, [r3, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d102      	bne.n	80076cc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80076c6:	2303      	movs	r3, #3
 80076c8:	75fb      	strb	r3, [r7, #23]
 80076ca:	e033      	b.n	8007734 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	889b      	ldrh	r3, [r3, #4]
 80076d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80076d4:	f023 0307 	bic.w	r3, r3, #7
 80076d8:	b29a      	uxth	r2, r3
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	889b      	ldrh	r3, [r3, #4]
 80076e2:	b21a      	sxth	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	3304      	adds	r3, #4
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	b299      	uxth	r1, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3305      	adds	r3, #5
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	021b      	lsls	r3, r3, #8
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	430b      	orrs	r3, r1
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007700:	2b00      	cmp	r3, #0
 8007702:	d110      	bne.n	8007726 <USBH_ParseEPDesc+0xbc>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3304      	adds	r3, #4
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	b299      	uxth	r1, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3305      	adds	r3, #5
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	b29b      	uxth	r3, r3
 8007714:	021b      	lsls	r3, r3, #8
 8007716:	b29b      	uxth	r3, r3
 8007718:	430b      	orrs	r3, r1
 800771a:	b29b      	uxth	r3, r3
 800771c:	b21b      	sxth	r3, r3
 800771e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007722:	b21b      	sxth	r3, r3
 8007724:	e001      	b.n	800772a <USBH_ParseEPDesc+0xc0>
 8007726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800772a:	4313      	orrs	r3, r2
 800772c:	b21b      	sxth	r3, r3
 800772e:	b29a      	uxth	r2, r3
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800773a:	2b00      	cmp	r3, #0
 800773c:	d116      	bne.n	800776c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	78db      	ldrb	r3, [r3, #3]
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	2b01      	cmp	r3, #1
 8007748:	d005      	beq.n	8007756 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	78db      	ldrb	r3, [r3, #3]
 800774e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007752:	2b03      	cmp	r3, #3
 8007754:	d127      	bne.n	80077a6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	799b      	ldrb	r3, [r3, #6]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <USBH_ParseEPDesc+0xfc>
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	799b      	ldrb	r3, [r3, #6]
 8007762:	2b10      	cmp	r3, #16
 8007764:	d91f      	bls.n	80077a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007766:	2303      	movs	r3, #3
 8007768:	75fb      	strb	r3, [r7, #23]
 800776a:	e01c      	b.n	80077a6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	78db      	ldrb	r3, [r3, #3]
 8007770:	f003 0303 	and.w	r3, r3, #3
 8007774:	2b01      	cmp	r3, #1
 8007776:	d10a      	bne.n	800778e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	799b      	ldrb	r3, [r3, #6]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d003      	beq.n	8007788 <USBH_ParseEPDesc+0x11e>
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	799b      	ldrb	r3, [r3, #6]
 8007784:	2b10      	cmp	r3, #16
 8007786:	d90e      	bls.n	80077a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007788:	2303      	movs	r3, #3
 800778a:	75fb      	strb	r3, [r7, #23]
 800778c:	e00b      	b.n	80077a6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	78db      	ldrb	r3, [r3, #3]
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	2b03      	cmp	r3, #3
 8007798:	d105      	bne.n	80077a6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	799b      	ldrb	r3, [r3, #6]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80077a2:	2303      	movs	r3, #3
 80077a4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	371c      	adds	r7, #28
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b087      	sub	sp, #28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	4613      	mov	r3, r2
 80077c0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3301      	adds	r3, #1
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b03      	cmp	r3, #3
 80077ca:	d120      	bne.n	800780e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	1e9a      	subs	r2, r3, #2
 80077d2:	88fb      	ldrh	r3, [r7, #6]
 80077d4:	4293      	cmp	r3, r2
 80077d6:	bf28      	it	cs
 80077d8:	4613      	movcs	r3, r2
 80077da:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	3302      	adds	r3, #2
 80077e0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80077e2:	2300      	movs	r3, #0
 80077e4:	82fb      	strh	r3, [r7, #22]
 80077e6:	e00b      	b.n	8007800 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80077e8:	8afb      	ldrh	r3, [r7, #22]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	4413      	add	r3, r2
 80077ee:	781a      	ldrb	r2, [r3, #0]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	3301      	adds	r3, #1
 80077f8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80077fa:	8afb      	ldrh	r3, [r7, #22]
 80077fc:	3302      	adds	r3, #2
 80077fe:	82fb      	strh	r3, [r7, #22]
 8007800:	8afa      	ldrh	r2, [r7, #22]
 8007802:	8abb      	ldrh	r3, [r7, #20]
 8007804:	429a      	cmp	r2, r3
 8007806:	d3ef      	bcc.n	80077e8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2200      	movs	r2, #0
 800780c:	701a      	strb	r2, [r3, #0]
  }
}
 800780e:	bf00      	nop
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800781a:	b480      	push	{r7}
 800781c:	b085      	sub	sp, #20
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	881a      	ldrh	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	b29b      	uxth	r3, r3
 800782e:	4413      	add	r3, r2
 8007830:	b29a      	uxth	r2, r3
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4413      	add	r3, r2
 8007840:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007842:	68fb      	ldr	r3, [r7, #12]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	4613      	mov	r3, r2
 800785c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800785e:	2301      	movs	r3, #1
 8007860:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	789b      	ldrb	r3, [r3, #2]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d002      	beq.n	8007870 <USBH_CtlReq+0x20>
 800786a:	2b02      	cmp	r3, #2
 800786c:	d00f      	beq.n	800788e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800786e:	e027      	b.n	80078c0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	88fa      	ldrh	r2, [r7, #6]
 800787a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2201      	movs	r2, #1
 8007880:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2202      	movs	r2, #2
 8007886:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007888:	2301      	movs	r3, #1
 800788a:	75fb      	strb	r3, [r7, #23]
      break;
 800788c:	e018      	b.n	80078c0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 f81c 	bl	80078cc <USBH_HandleControl>
 8007894:	4603      	mov	r3, r0
 8007896:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007898:	7dfb      	ldrb	r3, [r7, #23]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <USBH_CtlReq+0x54>
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d106      	bne.n	80078b2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	761a      	strb	r2, [r3, #24]
      break;
 80078b0:	e005      	b.n	80078be <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d102      	bne.n	80078be <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	709a      	strb	r2, [r3, #2]
      break;
 80078be:	bf00      	nop
  }
  return status;
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3718      	adds	r7, #24
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af02      	add	r7, sp, #8
 80078d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80078d4:	2301      	movs	r3, #1
 80078d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078d8:	2300      	movs	r3, #0
 80078da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	7e1b      	ldrb	r3, [r3, #24]
 80078e0:	3b01      	subs	r3, #1
 80078e2:	2b0a      	cmp	r3, #10
 80078e4:	f200 8156 	bhi.w	8007b94 <USBH_HandleControl+0x2c8>
 80078e8:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <USBH_HandleControl+0x24>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	0800791d 	.word	0x0800791d
 80078f4:	08007937 	.word	0x08007937
 80078f8:	080079a1 	.word	0x080079a1
 80078fc:	080079c7 	.word	0x080079c7
 8007900:	080079ff 	.word	0x080079ff
 8007904:	08007a29 	.word	0x08007a29
 8007908:	08007a7b 	.word	0x08007a7b
 800790c:	08007a9d 	.word	0x08007a9d
 8007910:	08007ad9 	.word	0x08007ad9
 8007914:	08007aff 	.word	0x08007aff
 8007918:	08007b3d 	.word	0x08007b3d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f103 0110 	add.w	r1, r3, #16
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	795b      	ldrb	r3, [r3, #5]
 8007926:	461a      	mov	r2, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f943 	bl	8007bb4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2202      	movs	r2, #2
 8007932:	761a      	strb	r2, [r3, #24]
      break;
 8007934:	e139      	b.n	8007baa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	795b      	ldrb	r3, [r3, #5]
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fcc5 	bl	80082cc <USBH_LL_GetURBState>
 8007942:	4603      	mov	r3, r0
 8007944:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d11e      	bne.n	800798a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	7c1b      	ldrb	r3, [r3, #16]
 8007950:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007954:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	8adb      	ldrh	r3, [r3, #22]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800795e:	7b7b      	ldrb	r3, [r7, #13]
 8007960:	2b80      	cmp	r3, #128	; 0x80
 8007962:	d103      	bne.n	800796c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2203      	movs	r2, #3
 8007968:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800796a:	e115      	b.n	8007b98 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2205      	movs	r2, #5
 8007970:	761a      	strb	r2, [r3, #24]
      break;
 8007972:	e111      	b.n	8007b98 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007974:	7b7b      	ldrb	r3, [r7, #13]
 8007976:	2b80      	cmp	r3, #128	; 0x80
 8007978:	d103      	bne.n	8007982 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2209      	movs	r2, #9
 800797e:	761a      	strb	r2, [r3, #24]
      break;
 8007980:	e10a      	b.n	8007b98 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2207      	movs	r2, #7
 8007986:	761a      	strb	r2, [r3, #24]
      break;
 8007988:	e106      	b.n	8007b98 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800798a:	7bbb      	ldrb	r3, [r7, #14]
 800798c:	2b04      	cmp	r3, #4
 800798e:	d003      	beq.n	8007998 <USBH_HandleControl+0xcc>
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	2b02      	cmp	r3, #2
 8007994:	f040 8100 	bne.w	8007b98 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	220b      	movs	r2, #11
 800799c:	761a      	strb	r2, [r3, #24]
      break;
 800799e:	e0fb      	b.n	8007b98 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6899      	ldr	r1, [r3, #8]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	899a      	ldrh	r2, [r3, #12]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	791b      	ldrb	r3, [r3, #4]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f93a 	bl	8007c32 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2204      	movs	r2, #4
 80079c2:	761a      	strb	r2, [r3, #24]
      break;
 80079c4:	e0f1      	b.n	8007baa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	791b      	ldrb	r3, [r3, #4]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fc7d 	bl	80082cc <USBH_LL_GetURBState>
 80079d2:	4603      	mov	r3, r0
 80079d4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d102      	bne.n	80079e2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2209      	movs	r2, #9
 80079e0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	2b05      	cmp	r3, #5
 80079e6:	d102      	bne.n	80079ee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80079e8:	2303      	movs	r3, #3
 80079ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079ec:	e0d6      	b.n	8007b9c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	f040 80d3 	bne.w	8007b9c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	220b      	movs	r2, #11
 80079fa:	761a      	strb	r2, [r3, #24]
      break;
 80079fc:	e0ce      	b.n	8007b9c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6899      	ldr	r1, [r3, #8]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	899a      	ldrh	r2, [r3, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	795b      	ldrb	r3, [r3, #5]
 8007a0a:	2001      	movs	r0, #1
 8007a0c:	9000      	str	r0, [sp, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f8ea 	bl	8007be8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2206      	movs	r2, #6
 8007a24:	761a      	strb	r2, [r3, #24]
      break;
 8007a26:	e0c0      	b.n	8007baa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	795b      	ldrb	r3, [r3, #5]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fc4c 	bl	80082cc <USBH_LL_GetURBState>
 8007a34:	4603      	mov	r3, r0
 8007a36:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d103      	bne.n	8007a46 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2207      	movs	r2, #7
 8007a42:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a44:	e0ac      	b.n	8007ba0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	2b05      	cmp	r3, #5
 8007a4a:	d105      	bne.n	8007a58 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	220c      	movs	r2, #12
 8007a50:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007a52:	2303      	movs	r3, #3
 8007a54:	73fb      	strb	r3, [r7, #15]
      break;
 8007a56:	e0a3      	b.n	8007ba0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d103      	bne.n	8007a66 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2205      	movs	r2, #5
 8007a62:	761a      	strb	r2, [r3, #24]
      break;
 8007a64:	e09c      	b.n	8007ba0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	f040 8099 	bne.w	8007ba0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	220b      	movs	r2, #11
 8007a72:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007a74:	2302      	movs	r3, #2
 8007a76:	73fb      	strb	r3, [r7, #15]
      break;
 8007a78:	e092      	b.n	8007ba0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	791b      	ldrb	r3, [r3, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2100      	movs	r1, #0
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f8d5 	bl	8007c32 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2208      	movs	r2, #8
 8007a98:	761a      	strb	r2, [r3, #24]

      break;
 8007a9a:	e086      	b.n	8007baa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	791b      	ldrb	r3, [r3, #4]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fc12 	bl	80082cc <USBH_LL_GetURBState>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d105      	bne.n	8007abe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	220d      	movs	r2, #13
 8007ab6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007abc:	e072      	b.n	8007ba4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d103      	bne.n	8007acc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	220b      	movs	r2, #11
 8007ac8:	761a      	strb	r2, [r3, #24]
      break;
 8007aca:	e06b      	b.n	8007ba4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	2b05      	cmp	r3, #5
 8007ad0:	d168      	bne.n	8007ba4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad6:	e065      	b.n	8007ba4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	795b      	ldrb	r3, [r3, #5]
 8007adc:	2201      	movs	r2, #1
 8007ade:	9200      	str	r2, [sp, #0]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f87f 	bl	8007be8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	220a      	movs	r2, #10
 8007afa:	761a      	strb	r2, [r3, #24]
      break;
 8007afc:	e055      	b.n	8007baa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	795b      	ldrb	r3, [r3, #5]
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fbe1 	bl	80082cc <USBH_LL_GetURBState>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d105      	bne.n	8007b20 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007b14:	2300      	movs	r3, #0
 8007b16:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	220d      	movs	r2, #13
 8007b1c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b1e:	e043      	b.n	8007ba8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b20:	7bbb      	ldrb	r3, [r7, #14]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d103      	bne.n	8007b2e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2209      	movs	r2, #9
 8007b2a:	761a      	strb	r2, [r3, #24]
      break;
 8007b2c:	e03c      	b.n	8007ba8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d139      	bne.n	8007ba8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	220b      	movs	r2, #11
 8007b38:	761a      	strb	r2, [r3, #24]
      break;
 8007b3a:	e035      	b.n	8007ba8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	7e5b      	ldrb	r3, [r3, #25]
 8007b40:	3301      	adds	r3, #1
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	765a      	strb	r2, [r3, #25]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	7e5b      	ldrb	r3, [r3, #25]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d806      	bhi.n	8007b5e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007b5c:	e025      	b.n	8007baa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b64:	2106      	movs	r1, #6
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	795b      	ldrb	r3, [r3, #5]
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f90c 	bl	8007d94 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	791b      	ldrb	r3, [r3, #4]
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f906 	bl	8007d94 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007b8e:	2302      	movs	r3, #2
 8007b90:	73fb      	strb	r3, [r7, #15]
      break;
 8007b92:	e00a      	b.n	8007baa <USBH_HandleControl+0x2de>

    default:
      break;
 8007b94:	bf00      	nop
 8007b96:	e008      	b.n	8007baa <USBH_HandleControl+0x2de>
      break;
 8007b98:	bf00      	nop
 8007b9a:	e006      	b.n	8007baa <USBH_HandleControl+0x2de>
      break;
 8007b9c:	bf00      	nop
 8007b9e:	e004      	b.n	8007baa <USBH_HandleControl+0x2de>
      break;
 8007ba0:	bf00      	nop
 8007ba2:	e002      	b.n	8007baa <USBH_HandleControl+0x2de>
      break;
 8007ba4:	bf00      	nop
 8007ba6:	e000      	b.n	8007baa <USBH_HandleControl+0x2de>
      break;
 8007ba8:	bf00      	nop
  }

  return status;
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af04      	add	r7, sp, #16
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bc2:	79f9      	ldrb	r1, [r7, #7]
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	9303      	str	r3, [sp, #12]
 8007bc8:	2308      	movs	r3, #8
 8007bca:	9302      	str	r3, [sp, #8]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	9301      	str	r3, [sp, #4]
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 fb46 	bl	800826a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b088      	sub	sp, #32
 8007bec:	af04      	add	r7, sp, #16
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	80fb      	strh	r3, [r7, #6]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c0c:	7979      	ldrb	r1, [r7, #5]
 8007c0e:	7e3b      	ldrb	r3, [r7, #24]
 8007c10:	9303      	str	r3, [sp, #12]
 8007c12:	88fb      	ldrh	r3, [r7, #6]
 8007c14:	9302      	str	r3, [sp, #8]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	9301      	str	r3, [sp, #4]
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	2200      	movs	r2, #0
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 fb21 	bl	800826a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b088      	sub	sp, #32
 8007c36:	af04      	add	r7, sp, #16
 8007c38:	60f8      	str	r0, [r7, #12]
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	461a      	mov	r2, r3
 8007c40:	460b      	mov	r3, r1
 8007c42:	80fb      	strh	r3, [r7, #6]
 8007c44:	4613      	mov	r3, r2
 8007c46:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c48:	7979      	ldrb	r1, [r7, #5]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	9303      	str	r3, [sp, #12]
 8007c4e:	88fb      	ldrh	r3, [r7, #6]
 8007c50:	9302      	str	r3, [sp, #8]
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	2301      	movs	r3, #1
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 fb03 	bl	800826a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c64:	2300      	movs	r3, #0

}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b088      	sub	sp, #32
 8007c72:	af04      	add	r7, sp, #16
 8007c74:	60f8      	str	r0, [r7, #12]
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	4611      	mov	r1, r2
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	80fb      	strh	r3, [r7, #6]
 8007c80:	4613      	mov	r3, r2
 8007c82:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c92:	7979      	ldrb	r1, [r7, #5]
 8007c94:	7e3b      	ldrb	r3, [r7, #24]
 8007c96:	9303      	str	r3, [sp, #12]
 8007c98:	88fb      	ldrh	r3, [r7, #6]
 8007c9a:	9302      	str	r3, [sp, #8]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	9301      	str	r3, [sp, #4]
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f000 fade 	bl	800826a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b088      	sub	sp, #32
 8007cbc:	af04      	add	r7, sp, #16
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	80fb      	strh	r3, [r7, #6]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007cce:	7979      	ldrb	r1, [r7, #5]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	9303      	str	r3, [sp, #12]
 8007cd4:	88fb      	ldrh	r3, [r7, #6]
 8007cd6:	9302      	str	r3, [sp, #8]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	9301      	str	r3, [sp, #4]
 8007cdc:	2301      	movs	r3, #1
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f000 fac0 	bl	800826a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af04      	add	r7, sp, #16
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	4611      	mov	r1, r2
 8007d00:	461a      	mov	r2, r3
 8007d02:	4603      	mov	r3, r0
 8007d04:	70fb      	strb	r3, [r7, #3]
 8007d06:	460b      	mov	r3, r1
 8007d08:	70bb      	strb	r3, [r7, #2]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007d0e:	7878      	ldrb	r0, [r7, #1]
 8007d10:	78ba      	ldrb	r2, [r7, #2]
 8007d12:	78f9      	ldrb	r1, [r7, #3]
 8007d14:	8b3b      	ldrh	r3, [r7, #24]
 8007d16:	9302      	str	r3, [sp, #8]
 8007d18:	7d3b      	ldrb	r3, [r7, #20]
 8007d1a:	9301      	str	r3, [sp, #4]
 8007d1c:	7c3b      	ldrb	r3, [r7, #16]
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	4603      	mov	r3, r0
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa53 	bl	80081ce <USBH_LL_OpenPipe>

  return USBH_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	4619      	mov	r1, r3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa72 	bl	800822c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f836 	bl	8007dd0 <USBH_GetFreePipe>
 8007d64:	4603      	mov	r3, r0
 8007d66:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d68:	89fb      	ldrh	r3, [r7, #14]
 8007d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d00a      	beq.n	8007d88 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007d72:	78fa      	ldrb	r2, [r7, #3]
 8007d74:	89fb      	ldrh	r3, [r7, #14]
 8007d76:	f003 030f 	and.w	r3, r3, #15
 8007d7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d7e:	6879      	ldr	r1, [r7, #4]
 8007d80:	33e0      	adds	r3, #224	; 0xe0
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	440b      	add	r3, r1
 8007d86:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007d88:	89fb      	ldrh	r3, [r7, #14]
 8007d8a:	b2db      	uxtb	r3, r3
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007da0:	78fb      	ldrb	r3, [r7, #3]
 8007da2:	2b0f      	cmp	r3, #15
 8007da4:	d80d      	bhi.n	8007dc2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	33e0      	adds	r3, #224	; 0xe0
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4413      	add	r3, r2
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	78fb      	ldrb	r3, [r7, #3]
 8007db4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	33e0      	adds	r3, #224	; 0xe0
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	440b      	add	r3, r1
 8007dc0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007ddc:	2300      	movs	r3, #0
 8007dde:	73fb      	strb	r3, [r7, #15]
 8007de0:	e00f      	b.n	8007e02 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	33e0      	adds	r3, #224	; 0xe0
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d102      	bne.n	8007dfc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	e007      	b.n	8007e0c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	73fb      	strb	r3, [r7, #15]
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	2b0f      	cmp	r3, #15
 8007e06:	d9ec      	bls.n	8007de2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007e08:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	490e      	ldr	r1, [pc, #56]	; (8007e58 <MX_USB_HOST_Init+0x40>)
 8007e20:	480e      	ldr	r0, [pc, #56]	; (8007e5c <MX_USB_HOST_Init+0x44>)
 8007e22:	f7fe fba5 	bl	8006570 <USBH_Init>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007e2c:	f7f8 fdfc 	bl	8000a28 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007e30:	490b      	ldr	r1, [pc, #44]	; (8007e60 <MX_USB_HOST_Init+0x48>)
 8007e32:	480a      	ldr	r0, [pc, #40]	; (8007e5c <MX_USB_HOST_Init+0x44>)
 8007e34:	f7fe fc2a 	bl	800668c <USBH_RegisterClass>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007e3e:	f7f8 fdf3 	bl	8000a28 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007e42:	4806      	ldr	r0, [pc, #24]	; (8007e5c <MX_USB_HOST_Init+0x44>)
 8007e44:	f7fe fcae 	bl	80067a4 <USBH_Start>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007e4e:	f7f8 fdeb 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007e52:	bf00      	nop
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	08007e79 	.word	0x08007e79
 8007e5c:	200001e4 	.word	0x200001e4
 8007e60:	2000000c 	.word	0x2000000c

08007e64 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007e68:	4802      	ldr	r0, [pc, #8]	; (8007e74 <MX_USB_HOST_Process+0x10>)
 8007e6a:	f7fe fcab 	bl	80067c4 <USBH_Process>
}
 8007e6e:	bf00      	nop
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	200001e4 	.word	0x200001e4

08007e78 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e84:	78fb      	ldrb	r3, [r7, #3]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d819      	bhi.n	8007ec0 <USBH_UserProcess+0x48>
 8007e8c:	a201      	add	r2, pc, #4	; (adr r2, 8007e94 <USBH_UserProcess+0x1c>)
 8007e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e92:	bf00      	nop
 8007e94:	08007ec1 	.word	0x08007ec1
 8007e98:	08007eb1 	.word	0x08007eb1
 8007e9c:	08007ec1 	.word	0x08007ec1
 8007ea0:	08007eb9 	.word	0x08007eb9
 8007ea4:	08007ea9 	.word	0x08007ea9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007ea8:	4b09      	ldr	r3, [pc, #36]	; (8007ed0 <USBH_UserProcess+0x58>)
 8007eaa:	2203      	movs	r2, #3
 8007eac:	701a      	strb	r2, [r3, #0]
  break;
 8007eae:	e008      	b.n	8007ec2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007eb0:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <USBH_UserProcess+0x58>)
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	701a      	strb	r2, [r3, #0]
  break;
 8007eb6:	e004      	b.n	8007ec2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <USBH_UserProcess+0x58>)
 8007eba:	2201      	movs	r2, #1
 8007ebc:	701a      	strb	r2, [r3, #0]
  break;
 8007ebe:	e000      	b.n	8007ec2 <USBH_UserProcess+0x4a>

  default:
  break;
 8007ec0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	200005bc 	.word	0x200005bc

08007ed4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b08a      	sub	sp, #40	; 0x28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007edc:	f107 0314 	add.w	r3, r7, #20
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	605a      	str	r2, [r3, #4]
 8007ee6:	609a      	str	r2, [r3, #8]
 8007ee8:	60da      	str	r2, [r3, #12]
 8007eea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ef4:	d147      	bne.n	8007f86 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	613b      	str	r3, [r7, #16]
 8007efa:	4b25      	ldr	r3, [pc, #148]	; (8007f90 <HAL_HCD_MspInit+0xbc>)
 8007efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efe:	4a24      	ldr	r2, [pc, #144]	; (8007f90 <HAL_HCD_MspInit+0xbc>)
 8007f00:	f043 0301 	orr.w	r3, r3, #1
 8007f04:	6313      	str	r3, [r2, #48]	; 0x30
 8007f06:	4b22      	ldr	r3, [pc, #136]	; (8007f90 <HAL_HCD_MspInit+0xbc>)
 8007f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	613b      	str	r3, [r7, #16]
 8007f10:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007f20:	f107 0314 	add.w	r3, r7, #20
 8007f24:	4619      	mov	r1, r3
 8007f26:	481b      	ldr	r0, [pc, #108]	; (8007f94 <HAL_HCD_MspInit+0xc0>)
 8007f28:	f7f9 f9c0 	bl	80012ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007f2c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f32:	2302      	movs	r3, #2
 8007f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f3e:	230a      	movs	r3, #10
 8007f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f42:	f107 0314 	add.w	r3, r7, #20
 8007f46:	4619      	mov	r1, r3
 8007f48:	4812      	ldr	r0, [pc, #72]	; (8007f94 <HAL_HCD_MspInit+0xc0>)
 8007f4a:	f7f9 f9af 	bl	80012ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f4e:	4b10      	ldr	r3, [pc, #64]	; (8007f90 <HAL_HCD_MspInit+0xbc>)
 8007f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f52:	4a0f      	ldr	r2, [pc, #60]	; (8007f90 <HAL_HCD_MspInit+0xbc>)
 8007f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f58:	6353      	str	r3, [r2, #52]	; 0x34
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	60fb      	str	r3, [r7, #12]
 8007f5e:	4b0c      	ldr	r3, [pc, #48]	; (8007f90 <HAL_HCD_MspInit+0xbc>)
 8007f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f62:	4a0b      	ldr	r2, [pc, #44]	; (8007f90 <HAL_HCD_MspInit+0xbc>)
 8007f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f68:	6453      	str	r3, [r2, #68]	; 0x44
 8007f6a:	4b09      	ldr	r3, [pc, #36]	; (8007f90 <HAL_HCD_MspInit+0xbc>)
 8007f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f76:	2200      	movs	r2, #0
 8007f78:	2100      	movs	r1, #0
 8007f7a:	2043      	movs	r0, #67	; 0x43
 8007f7c:	f7f9 f95f 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f80:	2043      	movs	r0, #67	; 0x43
 8007f82:	f7f9 f978 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f86:	bf00      	nop
 8007f88:	3728      	adds	r7, #40	; 0x28
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	40023800 	.word	0x40023800
 8007f94:	40020000 	.word	0x40020000

08007f98 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe ffeb 	bl	8006f82 <USBH_LL_IncTimer>
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7ff f823 	bl	800700e <USBH_LL_Connect>
}
 8007fc8:	bf00      	nop
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff f82c 	bl	800703c <USBH_LL_Disconnect>
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	70fb      	strb	r3, [r7, #3]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008016:	4618      	mov	r0, r3
 8008018:	f7fe ffdd 	bl	8006fd6 <USBH_LL_PortEnabled>
}
 800801c:	bf00      	nop
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008032:	4618      	mov	r0, r3
 8008034:	f7fe ffdd 	bl	8006ff2 <USBH_LL_PortDisabled>
}
 8008038:	bf00      	nop
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800804e:	2b01      	cmp	r3, #1
 8008050:	d12a      	bne.n	80080a8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008052:	4a18      	ldr	r2, [pc, #96]	; (80080b4 <USBH_LL_Init+0x74>)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a15      	ldr	r2, [pc, #84]	; (80080b4 <USBH_LL_Init+0x74>)
 800805e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008062:	4b14      	ldr	r3, [pc, #80]	; (80080b4 <USBH_LL_Init+0x74>)
 8008064:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008068:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800806a:	4b12      	ldr	r3, [pc, #72]	; (80080b4 <USBH_LL_Init+0x74>)
 800806c:	2208      	movs	r2, #8
 800806e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008070:	4b10      	ldr	r3, [pc, #64]	; (80080b4 <USBH_LL_Init+0x74>)
 8008072:	2201      	movs	r2, #1
 8008074:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008076:	4b0f      	ldr	r3, [pc, #60]	; (80080b4 <USBH_LL_Init+0x74>)
 8008078:	2200      	movs	r2, #0
 800807a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800807c:	4b0d      	ldr	r3, [pc, #52]	; (80080b4 <USBH_LL_Init+0x74>)
 800807e:	2202      	movs	r2, #2
 8008080:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008082:	4b0c      	ldr	r3, [pc, #48]	; (80080b4 <USBH_LL_Init+0x74>)
 8008084:	2200      	movs	r2, #0
 8008086:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008088:	480a      	ldr	r0, [pc, #40]	; (80080b4 <USBH_LL_Init+0x74>)
 800808a:	f7f9 fade 	bl	800164a <HAL_HCD_Init>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008094:	f7f8 fcc8 	bl	8000a28 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008098:	4806      	ldr	r0, [pc, #24]	; (80080b4 <USBH_LL_Init+0x74>)
 800809a:	f7f9 fec2 	bl	8001e22 <HAL_HCD_GetCurrentFrame>
 800809e:	4603      	mov	r3, r0
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7fe ff5e 	bl	8006f64 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	200005c0 	.word	0x200005c0

080080b8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7f9 fe31 	bl	8001d36 <HAL_HCD_Start>
 80080d4:	4603      	mov	r3, r0
 80080d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 f95c 	bl	8008398 <USBH_Get_USB_Status>
 80080e0:	4603      	mov	r3, r0
 80080e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008104:	4618      	mov	r0, r3
 8008106:	f7f9 fe39 	bl	8001d7c <HAL_HCD_Stop>
 800810a:	4603      	mov	r3, r0
 800810c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800810e:	7bfb      	ldrb	r3, [r7, #15]
 8008110:	4618      	mov	r0, r3
 8008112:	f000 f941 	bl	8008398 <USBH_Get_USB_Status>
 8008116:	4603      	mov	r3, r0
 8008118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800811a:	7bbb      	ldrb	r3, [r7, #14]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800812c:	2301      	movs	r3, #1
 800812e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008136:	4618      	mov	r0, r3
 8008138:	f7f9 fe81 	bl	8001e3e <HAL_HCD_GetCurrentSpeed>
 800813c:	4603      	mov	r3, r0
 800813e:	2b02      	cmp	r3, #2
 8008140:	d00c      	beq.n	800815c <USBH_LL_GetSpeed+0x38>
 8008142:	2b02      	cmp	r3, #2
 8008144:	d80d      	bhi.n	8008162 <USBH_LL_GetSpeed+0x3e>
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <USBH_LL_GetSpeed+0x2c>
 800814a:	2b01      	cmp	r3, #1
 800814c:	d003      	beq.n	8008156 <USBH_LL_GetSpeed+0x32>
 800814e:	e008      	b.n	8008162 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008150:	2300      	movs	r3, #0
 8008152:	73fb      	strb	r3, [r7, #15]
    break;
 8008154:	e008      	b.n	8008168 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008156:	2301      	movs	r3, #1
 8008158:	73fb      	strb	r3, [r7, #15]
    break;
 800815a:	e005      	b.n	8008168 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800815c:	2302      	movs	r3, #2
 800815e:	73fb      	strb	r3, [r7, #15]
    break;
 8008160:	e002      	b.n	8008168 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008162:	2301      	movs	r3, #1
 8008164:	73fb      	strb	r3, [r7, #15]
    break;
 8008166:	bf00      	nop
  }
  return  speed;
 8008168:	7bfb      	ldrb	r3, [r7, #15]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b084      	sub	sp, #16
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008188:	4618      	mov	r0, r3
 800818a:	f7f9 fe14 	bl	8001db6 <HAL_HCD_ResetPort>
 800818e:	4603      	mov	r3, r0
 8008190:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008192:	7bfb      	ldrb	r3, [r7, #15]
 8008194:	4618      	mov	r0, r3
 8008196:	f000 f8ff 	bl	8008398 <USBH_Get_USB_Status>
 800819a:	4603      	mov	r3, r0
 800819c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800819e:	7bbb      	ldrb	r3, [r7, #14]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081ba:	78fa      	ldrb	r2, [r7, #3]
 80081bc:	4611      	mov	r1, r2
 80081be:	4618      	mov	r0, r3
 80081c0:	f7f9 fe1b 	bl	8001dfa <HAL_HCD_HC_GetXferCount>
 80081c4:	4603      	mov	r3, r0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80081ce:	b590      	push	{r4, r7, lr}
 80081d0:	b089      	sub	sp, #36	; 0x24
 80081d2:	af04      	add	r7, sp, #16
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	4608      	mov	r0, r1
 80081d8:	4611      	mov	r1, r2
 80081da:	461a      	mov	r2, r3
 80081dc:	4603      	mov	r3, r0
 80081de:	70fb      	strb	r3, [r7, #3]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70bb      	strb	r3, [r7, #2]
 80081e4:	4613      	mov	r3, r2
 80081e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081ec:	2300      	movs	r3, #0
 80081ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081f6:	787c      	ldrb	r4, [r7, #1]
 80081f8:	78ba      	ldrb	r2, [r7, #2]
 80081fa:	78f9      	ldrb	r1, [r7, #3]
 80081fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081fe:	9302      	str	r3, [sp, #8]
 8008200:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	f897 3020 	ldrb.w	r3, [r7, #32]
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	4623      	mov	r3, r4
 800820e:	f7f9 fa7e 	bl	800170e <HAL_HCD_HC_Init>
 8008212:	4603      	mov	r3, r0
 8008214:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	4618      	mov	r0, r3
 800821a:	f000 f8bd 	bl	8008398 <USBH_Get_USB_Status>
 800821e:	4603      	mov	r3, r0
 8008220:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008222:	7bbb      	ldrb	r3, [r7, #14]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	bd90      	pop	{r4, r7, pc}

0800822c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008246:	78fa      	ldrb	r2, [r7, #3]
 8008248:	4611      	mov	r1, r2
 800824a:	4618      	mov	r0, r3
 800824c:	f7f9 faee 	bl	800182c <HAL_HCD_HC_Halt>
 8008250:	4603      	mov	r3, r0
 8008252:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008254:	7bfb      	ldrb	r3, [r7, #15]
 8008256:	4618      	mov	r0, r3
 8008258:	f000 f89e 	bl	8008398 <USBH_Get_USB_Status>
 800825c:	4603      	mov	r3, r0
 800825e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008260:	7bbb      	ldrb	r3, [r7, #14]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800826a:	b590      	push	{r4, r7, lr}
 800826c:	b089      	sub	sp, #36	; 0x24
 800826e:	af04      	add	r7, sp, #16
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	4608      	mov	r0, r1
 8008274:	4611      	mov	r1, r2
 8008276:	461a      	mov	r2, r3
 8008278:	4603      	mov	r3, r0
 800827a:	70fb      	strb	r3, [r7, #3]
 800827c:	460b      	mov	r3, r1
 800827e:	70bb      	strb	r3, [r7, #2]
 8008280:	4613      	mov	r3, r2
 8008282:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008292:	787c      	ldrb	r4, [r7, #1]
 8008294:	78ba      	ldrb	r2, [r7, #2]
 8008296:	78f9      	ldrb	r1, [r7, #3]
 8008298:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800829c:	9303      	str	r3, [sp, #12]
 800829e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082a0:	9302      	str	r3, [sp, #8]
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	9301      	str	r3, [sp, #4]
 80082a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	4623      	mov	r3, r4
 80082ae:	f7f9 fae1 	bl	8001874 <HAL_HCD_HC_SubmitRequest>
 80082b2:	4603      	mov	r3, r0
 80082b4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 f86d 	bl	8008398 <USBH_Get_USB_Status>
 80082be:	4603      	mov	r3, r0
 80082c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd90      	pop	{r4, r7, pc}

080082cc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	460b      	mov	r3, r1
 80082d6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082de:	78fa      	ldrb	r2, [r7, #3]
 80082e0:	4611      	mov	r1, r2
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7f9 fd75 	bl	8001dd2 <HAL_HCD_HC_GetURBState>
 80082e8:	4603      	mov	r3, r0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b082      	sub	sp, #8
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	460b      	mov	r3, r1
 80082fc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008304:	2b01      	cmp	r3, #1
 8008306:	d103      	bne.n	8008310 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008308:	78fb      	ldrb	r3, [r7, #3]
 800830a:	4618      	mov	r0, r3
 800830c:	f000 f870 	bl	80083f0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008310:	20c8      	movs	r0, #200	; 0xc8
 8008312:	f7f8 fe95 	bl	8001040 <HAL_Delay>
  return USBH_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	70fb      	strb	r3, [r7, #3]
 800832c:	4613      	mov	r3, r2
 800832e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008336:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008338:	78fb      	ldrb	r3, [r7, #3]
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	212c      	movs	r1, #44	; 0x2c
 800833e:	fb01 f303 	mul.w	r3, r1, r3
 8008342:	4413      	add	r3, r2
 8008344:	333b      	adds	r3, #59	; 0x3b
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d009      	beq.n	8008360 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800834c:	78fb      	ldrb	r3, [r7, #3]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	212c      	movs	r1, #44	; 0x2c
 8008352:	fb01 f303 	mul.w	r3, r1, r3
 8008356:	4413      	add	r3, r2
 8008358:	3354      	adds	r3, #84	; 0x54
 800835a:	78ba      	ldrb	r2, [r7, #2]
 800835c:	701a      	strb	r2, [r3, #0]
 800835e:	e008      	b.n	8008372 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008360:	78fb      	ldrb	r3, [r7, #3]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	212c      	movs	r1, #44	; 0x2c
 8008366:	fb01 f303 	mul.w	r3, r1, r3
 800836a:	4413      	add	r3, r2
 800836c:	3355      	adds	r3, #85	; 0x55
 800836e:	78ba      	ldrb	r2, [r7, #2]
 8008370:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7f8 fe59 	bl	8001040 <HAL_Delay>
}
 800838e:	bf00      	nop
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
	...

08008398 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	4603      	mov	r3, r0
 80083a0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	2b03      	cmp	r3, #3
 80083aa:	d817      	bhi.n	80083dc <USBH_Get_USB_Status+0x44>
 80083ac:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <USBH_Get_USB_Status+0x1c>)
 80083ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b2:	bf00      	nop
 80083b4:	080083c5 	.word	0x080083c5
 80083b8:	080083cb 	.word	0x080083cb
 80083bc:	080083d1 	.word	0x080083d1
 80083c0:	080083d7 	.word	0x080083d7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	73fb      	strb	r3, [r7, #15]
    break;
 80083c8:	e00b      	b.n	80083e2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80083ca:	2302      	movs	r3, #2
 80083cc:	73fb      	strb	r3, [r7, #15]
    break;
 80083ce:	e008      	b.n	80083e2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80083d0:	2301      	movs	r3, #1
 80083d2:	73fb      	strb	r3, [r7, #15]
    break;
 80083d4:	e005      	b.n	80083e2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80083d6:	2302      	movs	r3, #2
 80083d8:	73fb      	strb	r3, [r7, #15]
    break;
 80083da:	e002      	b.n	80083e2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80083dc:	2302      	movs	r3, #2
 80083de:	73fb      	strb	r3, [r7, #15]
    break;
 80083e0:	bf00      	nop
  }
  return usb_status;
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80083fa:	79fb      	ldrb	r3, [r7, #7]
 80083fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80083fe:	79fb      	ldrb	r3, [r7, #7]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d102      	bne.n	800840a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]
 8008408:	e001      	b.n	800840e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800840a:	2301      	movs	r3, #1
 800840c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800840e:	7bfb      	ldrb	r3, [r7, #15]
 8008410:	461a      	mov	r2, r3
 8008412:	2101      	movs	r1, #1
 8008414:	4803      	ldr	r0, [pc, #12]	; (8008424 <MX_DriverVbusFS+0x34>)
 8008416:	f7f9 f8e5 	bl	80015e4 <HAL_GPIO_WritePin>
}
 800841a:	bf00      	nop
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	40020800 	.word	0x40020800

08008428 <malloc>:
 8008428:	4b02      	ldr	r3, [pc, #8]	; (8008434 <malloc+0xc>)
 800842a:	4601      	mov	r1, r0
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	f000 b82b 	b.w	8008488 <_malloc_r>
 8008432:	bf00      	nop
 8008434:	20000084 	.word	0x20000084

08008438 <free>:
 8008438:	4b02      	ldr	r3, [pc, #8]	; (8008444 <free+0xc>)
 800843a:	4601      	mov	r1, r0
 800843c:	6818      	ldr	r0, [r3, #0]
 800843e:	f000 ba3f 	b.w	80088c0 <_free_r>
 8008442:	bf00      	nop
 8008444:	20000084 	.word	0x20000084

08008448 <sbrk_aligned>:
 8008448:	b570      	push	{r4, r5, r6, lr}
 800844a:	4e0e      	ldr	r6, [pc, #56]	; (8008484 <sbrk_aligned+0x3c>)
 800844c:	460c      	mov	r4, r1
 800844e:	6831      	ldr	r1, [r6, #0]
 8008450:	4605      	mov	r5, r0
 8008452:	b911      	cbnz	r1, 800845a <sbrk_aligned+0x12>
 8008454:	f000 f9e6 	bl	8008824 <_sbrk_r>
 8008458:	6030      	str	r0, [r6, #0]
 800845a:	4621      	mov	r1, r4
 800845c:	4628      	mov	r0, r5
 800845e:	f000 f9e1 	bl	8008824 <_sbrk_r>
 8008462:	1c43      	adds	r3, r0, #1
 8008464:	d00a      	beq.n	800847c <sbrk_aligned+0x34>
 8008466:	1cc4      	adds	r4, r0, #3
 8008468:	f024 0403 	bic.w	r4, r4, #3
 800846c:	42a0      	cmp	r0, r4
 800846e:	d007      	beq.n	8008480 <sbrk_aligned+0x38>
 8008470:	1a21      	subs	r1, r4, r0
 8008472:	4628      	mov	r0, r5
 8008474:	f000 f9d6 	bl	8008824 <_sbrk_r>
 8008478:	3001      	adds	r0, #1
 800847a:	d101      	bne.n	8008480 <sbrk_aligned+0x38>
 800847c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008480:	4620      	mov	r0, r4
 8008482:	bd70      	pop	{r4, r5, r6, pc}
 8008484:	200008c8 	.word	0x200008c8

08008488 <_malloc_r>:
 8008488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800848c:	1ccd      	adds	r5, r1, #3
 800848e:	f025 0503 	bic.w	r5, r5, #3
 8008492:	3508      	adds	r5, #8
 8008494:	2d0c      	cmp	r5, #12
 8008496:	bf38      	it	cc
 8008498:	250c      	movcc	r5, #12
 800849a:	2d00      	cmp	r5, #0
 800849c:	4607      	mov	r7, r0
 800849e:	db01      	blt.n	80084a4 <_malloc_r+0x1c>
 80084a0:	42a9      	cmp	r1, r5
 80084a2:	d905      	bls.n	80084b0 <_malloc_r+0x28>
 80084a4:	230c      	movs	r3, #12
 80084a6:	603b      	str	r3, [r7, #0]
 80084a8:	2600      	movs	r6, #0
 80084aa:	4630      	mov	r0, r6
 80084ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008584 <_malloc_r+0xfc>
 80084b4:	f000 f868 	bl	8008588 <__malloc_lock>
 80084b8:	f8d8 3000 	ldr.w	r3, [r8]
 80084bc:	461c      	mov	r4, r3
 80084be:	bb5c      	cbnz	r4, 8008518 <_malloc_r+0x90>
 80084c0:	4629      	mov	r1, r5
 80084c2:	4638      	mov	r0, r7
 80084c4:	f7ff ffc0 	bl	8008448 <sbrk_aligned>
 80084c8:	1c43      	adds	r3, r0, #1
 80084ca:	4604      	mov	r4, r0
 80084cc:	d155      	bne.n	800857a <_malloc_r+0xf2>
 80084ce:	f8d8 4000 	ldr.w	r4, [r8]
 80084d2:	4626      	mov	r6, r4
 80084d4:	2e00      	cmp	r6, #0
 80084d6:	d145      	bne.n	8008564 <_malloc_r+0xdc>
 80084d8:	2c00      	cmp	r4, #0
 80084da:	d048      	beq.n	800856e <_malloc_r+0xe6>
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	4631      	mov	r1, r6
 80084e0:	4638      	mov	r0, r7
 80084e2:	eb04 0903 	add.w	r9, r4, r3
 80084e6:	f000 f99d 	bl	8008824 <_sbrk_r>
 80084ea:	4581      	cmp	r9, r0
 80084ec:	d13f      	bne.n	800856e <_malloc_r+0xe6>
 80084ee:	6821      	ldr	r1, [r4, #0]
 80084f0:	1a6d      	subs	r5, r5, r1
 80084f2:	4629      	mov	r1, r5
 80084f4:	4638      	mov	r0, r7
 80084f6:	f7ff ffa7 	bl	8008448 <sbrk_aligned>
 80084fa:	3001      	adds	r0, #1
 80084fc:	d037      	beq.n	800856e <_malloc_r+0xe6>
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	442b      	add	r3, r5
 8008502:	6023      	str	r3, [r4, #0]
 8008504:	f8d8 3000 	ldr.w	r3, [r8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d038      	beq.n	800857e <_malloc_r+0xf6>
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	42a2      	cmp	r2, r4
 8008510:	d12b      	bne.n	800856a <_malloc_r+0xe2>
 8008512:	2200      	movs	r2, #0
 8008514:	605a      	str	r2, [r3, #4]
 8008516:	e00f      	b.n	8008538 <_malloc_r+0xb0>
 8008518:	6822      	ldr	r2, [r4, #0]
 800851a:	1b52      	subs	r2, r2, r5
 800851c:	d41f      	bmi.n	800855e <_malloc_r+0xd6>
 800851e:	2a0b      	cmp	r2, #11
 8008520:	d917      	bls.n	8008552 <_malloc_r+0xca>
 8008522:	1961      	adds	r1, r4, r5
 8008524:	42a3      	cmp	r3, r4
 8008526:	6025      	str	r5, [r4, #0]
 8008528:	bf18      	it	ne
 800852a:	6059      	strne	r1, [r3, #4]
 800852c:	6863      	ldr	r3, [r4, #4]
 800852e:	bf08      	it	eq
 8008530:	f8c8 1000 	streq.w	r1, [r8]
 8008534:	5162      	str	r2, [r4, r5]
 8008536:	604b      	str	r3, [r1, #4]
 8008538:	4638      	mov	r0, r7
 800853a:	f104 060b 	add.w	r6, r4, #11
 800853e:	f000 f829 	bl	8008594 <__malloc_unlock>
 8008542:	f026 0607 	bic.w	r6, r6, #7
 8008546:	1d23      	adds	r3, r4, #4
 8008548:	1af2      	subs	r2, r6, r3
 800854a:	d0ae      	beq.n	80084aa <_malloc_r+0x22>
 800854c:	1b9b      	subs	r3, r3, r6
 800854e:	50a3      	str	r3, [r4, r2]
 8008550:	e7ab      	b.n	80084aa <_malloc_r+0x22>
 8008552:	42a3      	cmp	r3, r4
 8008554:	6862      	ldr	r2, [r4, #4]
 8008556:	d1dd      	bne.n	8008514 <_malloc_r+0x8c>
 8008558:	f8c8 2000 	str.w	r2, [r8]
 800855c:	e7ec      	b.n	8008538 <_malloc_r+0xb0>
 800855e:	4623      	mov	r3, r4
 8008560:	6864      	ldr	r4, [r4, #4]
 8008562:	e7ac      	b.n	80084be <_malloc_r+0x36>
 8008564:	4634      	mov	r4, r6
 8008566:	6876      	ldr	r6, [r6, #4]
 8008568:	e7b4      	b.n	80084d4 <_malloc_r+0x4c>
 800856a:	4613      	mov	r3, r2
 800856c:	e7cc      	b.n	8008508 <_malloc_r+0x80>
 800856e:	230c      	movs	r3, #12
 8008570:	603b      	str	r3, [r7, #0]
 8008572:	4638      	mov	r0, r7
 8008574:	f000 f80e 	bl	8008594 <__malloc_unlock>
 8008578:	e797      	b.n	80084aa <_malloc_r+0x22>
 800857a:	6025      	str	r5, [r4, #0]
 800857c:	e7dc      	b.n	8008538 <_malloc_r+0xb0>
 800857e:	605b      	str	r3, [r3, #4]
 8008580:	deff      	udf	#255	; 0xff
 8008582:	bf00      	nop
 8008584:	200008c4 	.word	0x200008c4

08008588 <__malloc_lock>:
 8008588:	4801      	ldr	r0, [pc, #4]	; (8008590 <__malloc_lock+0x8>)
 800858a:	f000 b997 	b.w	80088bc <__retarget_lock_acquire_recursive>
 800858e:	bf00      	nop
 8008590:	20000a0c 	.word	0x20000a0c

08008594 <__malloc_unlock>:
 8008594:	4801      	ldr	r0, [pc, #4]	; (800859c <__malloc_unlock+0x8>)
 8008596:	f000 b992 	b.w	80088be <__retarget_lock_release_recursive>
 800859a:	bf00      	nop
 800859c:	20000a0c 	.word	0x20000a0c

080085a0 <std>:
 80085a0:	2300      	movs	r3, #0
 80085a2:	b510      	push	{r4, lr}
 80085a4:	4604      	mov	r4, r0
 80085a6:	e9c0 3300 	strd	r3, r3, [r0]
 80085aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085ae:	6083      	str	r3, [r0, #8]
 80085b0:	8181      	strh	r1, [r0, #12]
 80085b2:	6643      	str	r3, [r0, #100]	; 0x64
 80085b4:	81c2      	strh	r2, [r0, #14]
 80085b6:	6183      	str	r3, [r0, #24]
 80085b8:	4619      	mov	r1, r3
 80085ba:	2208      	movs	r2, #8
 80085bc:	305c      	adds	r0, #92	; 0x5c
 80085be:	f000 f8f4 	bl	80087aa <memset>
 80085c2:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <std+0x38>)
 80085c4:	6263      	str	r3, [r4, #36]	; 0x24
 80085c6:	4b05      	ldr	r3, [pc, #20]	; (80085dc <std+0x3c>)
 80085c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80085ca:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <std+0x40>)
 80085cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085ce:	4b05      	ldr	r3, [pc, #20]	; (80085e4 <std+0x44>)
 80085d0:	6224      	str	r4, [r4, #32]
 80085d2:	6323      	str	r3, [r4, #48]	; 0x30
 80085d4:	bd10      	pop	{r4, pc}
 80085d6:	bf00      	nop
 80085d8:	08008725 	.word	0x08008725
 80085dc:	08008747 	.word	0x08008747
 80085e0:	0800877f 	.word	0x0800877f
 80085e4:	080087a3 	.word	0x080087a3

080085e8 <stdio_exit_handler>:
 80085e8:	4a02      	ldr	r2, [pc, #8]	; (80085f4 <stdio_exit_handler+0xc>)
 80085ea:	4903      	ldr	r1, [pc, #12]	; (80085f8 <stdio_exit_handler+0x10>)
 80085ec:	4803      	ldr	r0, [pc, #12]	; (80085fc <stdio_exit_handler+0x14>)
 80085ee:	f000 b869 	b.w	80086c4 <_fwalk_sglue>
 80085f2:	bf00      	nop
 80085f4:	2000002c 	.word	0x2000002c
 80085f8:	0800900d 	.word	0x0800900d
 80085fc:	20000038 	.word	0x20000038

08008600 <cleanup_stdio>:
 8008600:	6841      	ldr	r1, [r0, #4]
 8008602:	4b0c      	ldr	r3, [pc, #48]	; (8008634 <cleanup_stdio+0x34>)
 8008604:	4299      	cmp	r1, r3
 8008606:	b510      	push	{r4, lr}
 8008608:	4604      	mov	r4, r0
 800860a:	d001      	beq.n	8008610 <cleanup_stdio+0x10>
 800860c:	f000 fcfe 	bl	800900c <_fflush_r>
 8008610:	68a1      	ldr	r1, [r4, #8]
 8008612:	4b09      	ldr	r3, [pc, #36]	; (8008638 <cleanup_stdio+0x38>)
 8008614:	4299      	cmp	r1, r3
 8008616:	d002      	beq.n	800861e <cleanup_stdio+0x1e>
 8008618:	4620      	mov	r0, r4
 800861a:	f000 fcf7 	bl	800900c <_fflush_r>
 800861e:	68e1      	ldr	r1, [r4, #12]
 8008620:	4b06      	ldr	r3, [pc, #24]	; (800863c <cleanup_stdio+0x3c>)
 8008622:	4299      	cmp	r1, r3
 8008624:	d004      	beq.n	8008630 <cleanup_stdio+0x30>
 8008626:	4620      	mov	r0, r4
 8008628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800862c:	f000 bcee 	b.w	800900c <_fflush_r>
 8008630:	bd10      	pop	{r4, pc}
 8008632:	bf00      	nop
 8008634:	200008cc 	.word	0x200008cc
 8008638:	20000934 	.word	0x20000934
 800863c:	2000099c 	.word	0x2000099c

08008640 <global_stdio_init.part.0>:
 8008640:	b510      	push	{r4, lr}
 8008642:	4b0b      	ldr	r3, [pc, #44]	; (8008670 <global_stdio_init.part.0+0x30>)
 8008644:	4c0b      	ldr	r4, [pc, #44]	; (8008674 <global_stdio_init.part.0+0x34>)
 8008646:	4a0c      	ldr	r2, [pc, #48]	; (8008678 <global_stdio_init.part.0+0x38>)
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	4620      	mov	r0, r4
 800864c:	2200      	movs	r2, #0
 800864e:	2104      	movs	r1, #4
 8008650:	f7ff ffa6 	bl	80085a0 <std>
 8008654:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008658:	2201      	movs	r2, #1
 800865a:	2109      	movs	r1, #9
 800865c:	f7ff ffa0 	bl	80085a0 <std>
 8008660:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008664:	2202      	movs	r2, #2
 8008666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800866a:	2112      	movs	r1, #18
 800866c:	f7ff bf98 	b.w	80085a0 <std>
 8008670:	20000a04 	.word	0x20000a04
 8008674:	200008cc 	.word	0x200008cc
 8008678:	080085e9 	.word	0x080085e9

0800867c <__sfp_lock_acquire>:
 800867c:	4801      	ldr	r0, [pc, #4]	; (8008684 <__sfp_lock_acquire+0x8>)
 800867e:	f000 b91d 	b.w	80088bc <__retarget_lock_acquire_recursive>
 8008682:	bf00      	nop
 8008684:	20000a0d 	.word	0x20000a0d

08008688 <__sfp_lock_release>:
 8008688:	4801      	ldr	r0, [pc, #4]	; (8008690 <__sfp_lock_release+0x8>)
 800868a:	f000 b918 	b.w	80088be <__retarget_lock_release_recursive>
 800868e:	bf00      	nop
 8008690:	20000a0d 	.word	0x20000a0d

08008694 <__sinit>:
 8008694:	b510      	push	{r4, lr}
 8008696:	4604      	mov	r4, r0
 8008698:	f7ff fff0 	bl	800867c <__sfp_lock_acquire>
 800869c:	6a23      	ldr	r3, [r4, #32]
 800869e:	b11b      	cbz	r3, 80086a8 <__sinit+0x14>
 80086a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086a4:	f7ff bff0 	b.w	8008688 <__sfp_lock_release>
 80086a8:	4b04      	ldr	r3, [pc, #16]	; (80086bc <__sinit+0x28>)
 80086aa:	6223      	str	r3, [r4, #32]
 80086ac:	4b04      	ldr	r3, [pc, #16]	; (80086c0 <__sinit+0x2c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1f5      	bne.n	80086a0 <__sinit+0xc>
 80086b4:	f7ff ffc4 	bl	8008640 <global_stdio_init.part.0>
 80086b8:	e7f2      	b.n	80086a0 <__sinit+0xc>
 80086ba:	bf00      	nop
 80086bc:	08008601 	.word	0x08008601
 80086c0:	20000a04 	.word	0x20000a04

080086c4 <_fwalk_sglue>:
 80086c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086c8:	4607      	mov	r7, r0
 80086ca:	4688      	mov	r8, r1
 80086cc:	4614      	mov	r4, r2
 80086ce:	2600      	movs	r6, #0
 80086d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086d4:	f1b9 0901 	subs.w	r9, r9, #1
 80086d8:	d505      	bpl.n	80086e6 <_fwalk_sglue+0x22>
 80086da:	6824      	ldr	r4, [r4, #0]
 80086dc:	2c00      	cmp	r4, #0
 80086de:	d1f7      	bne.n	80086d0 <_fwalk_sglue+0xc>
 80086e0:	4630      	mov	r0, r6
 80086e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086e6:	89ab      	ldrh	r3, [r5, #12]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d907      	bls.n	80086fc <_fwalk_sglue+0x38>
 80086ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086f0:	3301      	adds	r3, #1
 80086f2:	d003      	beq.n	80086fc <_fwalk_sglue+0x38>
 80086f4:	4629      	mov	r1, r5
 80086f6:	4638      	mov	r0, r7
 80086f8:	47c0      	blx	r8
 80086fa:	4306      	orrs	r6, r0
 80086fc:	3568      	adds	r5, #104	; 0x68
 80086fe:	e7e9      	b.n	80086d4 <_fwalk_sglue+0x10>

08008700 <iprintf>:
 8008700:	b40f      	push	{r0, r1, r2, r3}
 8008702:	b507      	push	{r0, r1, r2, lr}
 8008704:	4906      	ldr	r1, [pc, #24]	; (8008720 <iprintf+0x20>)
 8008706:	ab04      	add	r3, sp, #16
 8008708:	6808      	ldr	r0, [r1, #0]
 800870a:	f853 2b04 	ldr.w	r2, [r3], #4
 800870e:	6881      	ldr	r1, [r0, #8]
 8008710:	9301      	str	r3, [sp, #4]
 8008712:	f000 f94b 	bl	80089ac <_vfiprintf_r>
 8008716:	b003      	add	sp, #12
 8008718:	f85d eb04 	ldr.w	lr, [sp], #4
 800871c:	b004      	add	sp, #16
 800871e:	4770      	bx	lr
 8008720:	20000084 	.word	0x20000084

08008724 <__sread>:
 8008724:	b510      	push	{r4, lr}
 8008726:	460c      	mov	r4, r1
 8008728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800872c:	f000 f868 	bl	8008800 <_read_r>
 8008730:	2800      	cmp	r0, #0
 8008732:	bfab      	itete	ge
 8008734:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008736:	89a3      	ldrhlt	r3, [r4, #12]
 8008738:	181b      	addge	r3, r3, r0
 800873a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800873e:	bfac      	ite	ge
 8008740:	6563      	strge	r3, [r4, #84]	; 0x54
 8008742:	81a3      	strhlt	r3, [r4, #12]
 8008744:	bd10      	pop	{r4, pc}

08008746 <__swrite>:
 8008746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800874a:	461f      	mov	r7, r3
 800874c:	898b      	ldrh	r3, [r1, #12]
 800874e:	05db      	lsls	r3, r3, #23
 8008750:	4605      	mov	r5, r0
 8008752:	460c      	mov	r4, r1
 8008754:	4616      	mov	r6, r2
 8008756:	d505      	bpl.n	8008764 <__swrite+0x1e>
 8008758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800875c:	2302      	movs	r3, #2
 800875e:	2200      	movs	r2, #0
 8008760:	f000 f83c 	bl	80087dc <_lseek_r>
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800876a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800876e:	81a3      	strh	r3, [r4, #12]
 8008770:	4632      	mov	r2, r6
 8008772:	463b      	mov	r3, r7
 8008774:	4628      	mov	r0, r5
 8008776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800877a:	f000 b863 	b.w	8008844 <_write_r>

0800877e <__sseek>:
 800877e:	b510      	push	{r4, lr}
 8008780:	460c      	mov	r4, r1
 8008782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008786:	f000 f829 	bl	80087dc <_lseek_r>
 800878a:	1c43      	adds	r3, r0, #1
 800878c:	89a3      	ldrh	r3, [r4, #12]
 800878e:	bf15      	itete	ne
 8008790:	6560      	strne	r0, [r4, #84]	; 0x54
 8008792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800879a:	81a3      	strheq	r3, [r4, #12]
 800879c:	bf18      	it	ne
 800879e:	81a3      	strhne	r3, [r4, #12]
 80087a0:	bd10      	pop	{r4, pc}

080087a2 <__sclose>:
 80087a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a6:	f000 b809 	b.w	80087bc <_close_r>

080087aa <memset>:
 80087aa:	4402      	add	r2, r0
 80087ac:	4603      	mov	r3, r0
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d100      	bne.n	80087b4 <memset+0xa>
 80087b2:	4770      	bx	lr
 80087b4:	f803 1b01 	strb.w	r1, [r3], #1
 80087b8:	e7f9      	b.n	80087ae <memset+0x4>
	...

080087bc <_close_r>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	4d06      	ldr	r5, [pc, #24]	; (80087d8 <_close_r+0x1c>)
 80087c0:	2300      	movs	r3, #0
 80087c2:	4604      	mov	r4, r0
 80087c4:	4608      	mov	r0, r1
 80087c6:	602b      	str	r3, [r5, #0]
 80087c8:	f7f8 fb21 	bl	8000e0e <_close>
 80087cc:	1c43      	adds	r3, r0, #1
 80087ce:	d102      	bne.n	80087d6 <_close_r+0x1a>
 80087d0:	682b      	ldr	r3, [r5, #0]
 80087d2:	b103      	cbz	r3, 80087d6 <_close_r+0x1a>
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
 80087d8:	20000a08 	.word	0x20000a08

080087dc <_lseek_r>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	4d07      	ldr	r5, [pc, #28]	; (80087fc <_lseek_r+0x20>)
 80087e0:	4604      	mov	r4, r0
 80087e2:	4608      	mov	r0, r1
 80087e4:	4611      	mov	r1, r2
 80087e6:	2200      	movs	r2, #0
 80087e8:	602a      	str	r2, [r5, #0]
 80087ea:	461a      	mov	r2, r3
 80087ec:	f7f8 fb36 	bl	8000e5c <_lseek>
 80087f0:	1c43      	adds	r3, r0, #1
 80087f2:	d102      	bne.n	80087fa <_lseek_r+0x1e>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	b103      	cbz	r3, 80087fa <_lseek_r+0x1e>
 80087f8:	6023      	str	r3, [r4, #0]
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
 80087fc:	20000a08 	.word	0x20000a08

08008800 <_read_r>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	4d07      	ldr	r5, [pc, #28]	; (8008820 <_read_r+0x20>)
 8008804:	4604      	mov	r4, r0
 8008806:	4608      	mov	r0, r1
 8008808:	4611      	mov	r1, r2
 800880a:	2200      	movs	r2, #0
 800880c:	602a      	str	r2, [r5, #0]
 800880e:	461a      	mov	r2, r3
 8008810:	f7f8 fac4 	bl	8000d9c <_read>
 8008814:	1c43      	adds	r3, r0, #1
 8008816:	d102      	bne.n	800881e <_read_r+0x1e>
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	b103      	cbz	r3, 800881e <_read_r+0x1e>
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	bd38      	pop	{r3, r4, r5, pc}
 8008820:	20000a08 	.word	0x20000a08

08008824 <_sbrk_r>:
 8008824:	b538      	push	{r3, r4, r5, lr}
 8008826:	4d06      	ldr	r5, [pc, #24]	; (8008840 <_sbrk_r+0x1c>)
 8008828:	2300      	movs	r3, #0
 800882a:	4604      	mov	r4, r0
 800882c:	4608      	mov	r0, r1
 800882e:	602b      	str	r3, [r5, #0]
 8008830:	f7f8 fb22 	bl	8000e78 <_sbrk>
 8008834:	1c43      	adds	r3, r0, #1
 8008836:	d102      	bne.n	800883e <_sbrk_r+0x1a>
 8008838:	682b      	ldr	r3, [r5, #0]
 800883a:	b103      	cbz	r3, 800883e <_sbrk_r+0x1a>
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	bd38      	pop	{r3, r4, r5, pc}
 8008840:	20000a08 	.word	0x20000a08

08008844 <_write_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4d07      	ldr	r5, [pc, #28]	; (8008864 <_write_r+0x20>)
 8008848:	4604      	mov	r4, r0
 800884a:	4608      	mov	r0, r1
 800884c:	4611      	mov	r1, r2
 800884e:	2200      	movs	r2, #0
 8008850:	602a      	str	r2, [r5, #0]
 8008852:	461a      	mov	r2, r3
 8008854:	f7f8 fabf 	bl	8000dd6 <_write>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d102      	bne.n	8008862 <_write_r+0x1e>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b103      	cbz	r3, 8008862 <_write_r+0x1e>
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	20000a08 	.word	0x20000a08

08008868 <__errno>:
 8008868:	4b01      	ldr	r3, [pc, #4]	; (8008870 <__errno+0x8>)
 800886a:	6818      	ldr	r0, [r3, #0]
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	20000084 	.word	0x20000084

08008874 <__libc_init_array>:
 8008874:	b570      	push	{r4, r5, r6, lr}
 8008876:	4d0d      	ldr	r5, [pc, #52]	; (80088ac <__libc_init_array+0x38>)
 8008878:	4c0d      	ldr	r4, [pc, #52]	; (80088b0 <__libc_init_array+0x3c>)
 800887a:	1b64      	subs	r4, r4, r5
 800887c:	10a4      	asrs	r4, r4, #2
 800887e:	2600      	movs	r6, #0
 8008880:	42a6      	cmp	r6, r4
 8008882:	d109      	bne.n	8008898 <__libc_init_array+0x24>
 8008884:	4d0b      	ldr	r5, [pc, #44]	; (80088b4 <__libc_init_array+0x40>)
 8008886:	4c0c      	ldr	r4, [pc, #48]	; (80088b8 <__libc_init_array+0x44>)
 8008888:	f000 fd02 	bl	8009290 <_init>
 800888c:	1b64      	subs	r4, r4, r5
 800888e:	10a4      	asrs	r4, r4, #2
 8008890:	2600      	movs	r6, #0
 8008892:	42a6      	cmp	r6, r4
 8008894:	d105      	bne.n	80088a2 <__libc_init_array+0x2e>
 8008896:	bd70      	pop	{r4, r5, r6, pc}
 8008898:	f855 3b04 	ldr.w	r3, [r5], #4
 800889c:	4798      	blx	r3
 800889e:	3601      	adds	r6, #1
 80088a0:	e7ee      	b.n	8008880 <__libc_init_array+0xc>
 80088a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80088a6:	4798      	blx	r3
 80088a8:	3601      	adds	r6, #1
 80088aa:	e7f2      	b.n	8008892 <__libc_init_array+0x1e>
 80088ac:	08009310 	.word	0x08009310
 80088b0:	08009310 	.word	0x08009310
 80088b4:	08009310 	.word	0x08009310
 80088b8:	08009314 	.word	0x08009314

080088bc <__retarget_lock_acquire_recursive>:
 80088bc:	4770      	bx	lr

080088be <__retarget_lock_release_recursive>:
 80088be:	4770      	bx	lr

080088c0 <_free_r>:
 80088c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088c2:	2900      	cmp	r1, #0
 80088c4:	d044      	beq.n	8008950 <_free_r+0x90>
 80088c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088ca:	9001      	str	r0, [sp, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f1a1 0404 	sub.w	r4, r1, #4
 80088d2:	bfb8      	it	lt
 80088d4:	18e4      	addlt	r4, r4, r3
 80088d6:	f7ff fe57 	bl	8008588 <__malloc_lock>
 80088da:	4a1e      	ldr	r2, [pc, #120]	; (8008954 <_free_r+0x94>)
 80088dc:	9801      	ldr	r0, [sp, #4]
 80088de:	6813      	ldr	r3, [r2, #0]
 80088e0:	b933      	cbnz	r3, 80088f0 <_free_r+0x30>
 80088e2:	6063      	str	r3, [r4, #4]
 80088e4:	6014      	str	r4, [r2, #0]
 80088e6:	b003      	add	sp, #12
 80088e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088ec:	f7ff be52 	b.w	8008594 <__malloc_unlock>
 80088f0:	42a3      	cmp	r3, r4
 80088f2:	d908      	bls.n	8008906 <_free_r+0x46>
 80088f4:	6825      	ldr	r5, [r4, #0]
 80088f6:	1961      	adds	r1, r4, r5
 80088f8:	428b      	cmp	r3, r1
 80088fa:	bf01      	itttt	eq
 80088fc:	6819      	ldreq	r1, [r3, #0]
 80088fe:	685b      	ldreq	r3, [r3, #4]
 8008900:	1949      	addeq	r1, r1, r5
 8008902:	6021      	streq	r1, [r4, #0]
 8008904:	e7ed      	b.n	80088e2 <_free_r+0x22>
 8008906:	461a      	mov	r2, r3
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	b10b      	cbz	r3, 8008910 <_free_r+0x50>
 800890c:	42a3      	cmp	r3, r4
 800890e:	d9fa      	bls.n	8008906 <_free_r+0x46>
 8008910:	6811      	ldr	r1, [r2, #0]
 8008912:	1855      	adds	r5, r2, r1
 8008914:	42a5      	cmp	r5, r4
 8008916:	d10b      	bne.n	8008930 <_free_r+0x70>
 8008918:	6824      	ldr	r4, [r4, #0]
 800891a:	4421      	add	r1, r4
 800891c:	1854      	adds	r4, r2, r1
 800891e:	42a3      	cmp	r3, r4
 8008920:	6011      	str	r1, [r2, #0]
 8008922:	d1e0      	bne.n	80088e6 <_free_r+0x26>
 8008924:	681c      	ldr	r4, [r3, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	6053      	str	r3, [r2, #4]
 800892a:	440c      	add	r4, r1
 800892c:	6014      	str	r4, [r2, #0]
 800892e:	e7da      	b.n	80088e6 <_free_r+0x26>
 8008930:	d902      	bls.n	8008938 <_free_r+0x78>
 8008932:	230c      	movs	r3, #12
 8008934:	6003      	str	r3, [r0, #0]
 8008936:	e7d6      	b.n	80088e6 <_free_r+0x26>
 8008938:	6825      	ldr	r5, [r4, #0]
 800893a:	1961      	adds	r1, r4, r5
 800893c:	428b      	cmp	r3, r1
 800893e:	bf04      	itt	eq
 8008940:	6819      	ldreq	r1, [r3, #0]
 8008942:	685b      	ldreq	r3, [r3, #4]
 8008944:	6063      	str	r3, [r4, #4]
 8008946:	bf04      	itt	eq
 8008948:	1949      	addeq	r1, r1, r5
 800894a:	6021      	streq	r1, [r4, #0]
 800894c:	6054      	str	r4, [r2, #4]
 800894e:	e7ca      	b.n	80088e6 <_free_r+0x26>
 8008950:	b003      	add	sp, #12
 8008952:	bd30      	pop	{r4, r5, pc}
 8008954:	200008c4 	.word	0x200008c4

08008958 <__sfputc_r>:
 8008958:	6893      	ldr	r3, [r2, #8]
 800895a:	3b01      	subs	r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	b410      	push	{r4}
 8008960:	6093      	str	r3, [r2, #8]
 8008962:	da08      	bge.n	8008976 <__sfputc_r+0x1e>
 8008964:	6994      	ldr	r4, [r2, #24]
 8008966:	42a3      	cmp	r3, r4
 8008968:	db01      	blt.n	800896e <__sfputc_r+0x16>
 800896a:	290a      	cmp	r1, #10
 800896c:	d103      	bne.n	8008976 <__sfputc_r+0x1e>
 800896e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008972:	f000 bb73 	b.w	800905c <__swbuf_r>
 8008976:	6813      	ldr	r3, [r2, #0]
 8008978:	1c58      	adds	r0, r3, #1
 800897a:	6010      	str	r0, [r2, #0]
 800897c:	7019      	strb	r1, [r3, #0]
 800897e:	4608      	mov	r0, r1
 8008980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008984:	4770      	bx	lr

08008986 <__sfputs_r>:
 8008986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008988:	4606      	mov	r6, r0
 800898a:	460f      	mov	r7, r1
 800898c:	4614      	mov	r4, r2
 800898e:	18d5      	adds	r5, r2, r3
 8008990:	42ac      	cmp	r4, r5
 8008992:	d101      	bne.n	8008998 <__sfputs_r+0x12>
 8008994:	2000      	movs	r0, #0
 8008996:	e007      	b.n	80089a8 <__sfputs_r+0x22>
 8008998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899c:	463a      	mov	r2, r7
 800899e:	4630      	mov	r0, r6
 80089a0:	f7ff ffda 	bl	8008958 <__sfputc_r>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d1f3      	bne.n	8008990 <__sfputs_r+0xa>
 80089a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089ac <_vfiprintf_r>:
 80089ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b0:	460d      	mov	r5, r1
 80089b2:	b09d      	sub	sp, #116	; 0x74
 80089b4:	4614      	mov	r4, r2
 80089b6:	4698      	mov	r8, r3
 80089b8:	4606      	mov	r6, r0
 80089ba:	b118      	cbz	r0, 80089c4 <_vfiprintf_r+0x18>
 80089bc:	6a03      	ldr	r3, [r0, #32]
 80089be:	b90b      	cbnz	r3, 80089c4 <_vfiprintf_r+0x18>
 80089c0:	f7ff fe68 	bl	8008694 <__sinit>
 80089c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089c6:	07d9      	lsls	r1, r3, #31
 80089c8:	d405      	bmi.n	80089d6 <_vfiprintf_r+0x2a>
 80089ca:	89ab      	ldrh	r3, [r5, #12]
 80089cc:	059a      	lsls	r2, r3, #22
 80089ce:	d402      	bmi.n	80089d6 <_vfiprintf_r+0x2a>
 80089d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089d2:	f7ff ff73 	bl	80088bc <__retarget_lock_acquire_recursive>
 80089d6:	89ab      	ldrh	r3, [r5, #12]
 80089d8:	071b      	lsls	r3, r3, #28
 80089da:	d501      	bpl.n	80089e0 <_vfiprintf_r+0x34>
 80089dc:	692b      	ldr	r3, [r5, #16]
 80089de:	b99b      	cbnz	r3, 8008a08 <_vfiprintf_r+0x5c>
 80089e0:	4629      	mov	r1, r5
 80089e2:	4630      	mov	r0, r6
 80089e4:	f000 fb78 	bl	80090d8 <__swsetup_r>
 80089e8:	b170      	cbz	r0, 8008a08 <_vfiprintf_r+0x5c>
 80089ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089ec:	07dc      	lsls	r4, r3, #31
 80089ee:	d504      	bpl.n	80089fa <_vfiprintf_r+0x4e>
 80089f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089f4:	b01d      	add	sp, #116	; 0x74
 80089f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fa:	89ab      	ldrh	r3, [r5, #12]
 80089fc:	0598      	lsls	r0, r3, #22
 80089fe:	d4f7      	bmi.n	80089f0 <_vfiprintf_r+0x44>
 8008a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a02:	f7ff ff5c 	bl	80088be <__retarget_lock_release_recursive>
 8008a06:	e7f3      	b.n	80089f0 <_vfiprintf_r+0x44>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a0c:	2320      	movs	r3, #32
 8008a0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a16:	2330      	movs	r3, #48	; 0x30
 8008a18:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008bcc <_vfiprintf_r+0x220>
 8008a1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a20:	f04f 0901 	mov.w	r9, #1
 8008a24:	4623      	mov	r3, r4
 8008a26:	469a      	mov	sl, r3
 8008a28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a2c:	b10a      	cbz	r2, 8008a32 <_vfiprintf_r+0x86>
 8008a2e:	2a25      	cmp	r2, #37	; 0x25
 8008a30:	d1f9      	bne.n	8008a26 <_vfiprintf_r+0x7a>
 8008a32:	ebba 0b04 	subs.w	fp, sl, r4
 8008a36:	d00b      	beq.n	8008a50 <_vfiprintf_r+0xa4>
 8008a38:	465b      	mov	r3, fp
 8008a3a:	4622      	mov	r2, r4
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f7ff ffa1 	bl	8008986 <__sfputs_r>
 8008a44:	3001      	adds	r0, #1
 8008a46:	f000 80a9 	beq.w	8008b9c <_vfiprintf_r+0x1f0>
 8008a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a4c:	445a      	add	r2, fp
 8008a4e:	9209      	str	r2, [sp, #36]	; 0x24
 8008a50:	f89a 3000 	ldrb.w	r3, [sl]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f000 80a1 	beq.w	8008b9c <_vfiprintf_r+0x1f0>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a64:	f10a 0a01 	add.w	sl, sl, #1
 8008a68:	9304      	str	r3, [sp, #16]
 8008a6a:	9307      	str	r3, [sp, #28]
 8008a6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a70:	931a      	str	r3, [sp, #104]	; 0x68
 8008a72:	4654      	mov	r4, sl
 8008a74:	2205      	movs	r2, #5
 8008a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a7a:	4854      	ldr	r0, [pc, #336]	; (8008bcc <_vfiprintf_r+0x220>)
 8008a7c:	f7f7 fba8 	bl	80001d0 <memchr>
 8008a80:	9a04      	ldr	r2, [sp, #16]
 8008a82:	b9d8      	cbnz	r0, 8008abc <_vfiprintf_r+0x110>
 8008a84:	06d1      	lsls	r1, r2, #27
 8008a86:	bf44      	itt	mi
 8008a88:	2320      	movmi	r3, #32
 8008a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a8e:	0713      	lsls	r3, r2, #28
 8008a90:	bf44      	itt	mi
 8008a92:	232b      	movmi	r3, #43	; 0x2b
 8008a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a98:	f89a 3000 	ldrb.w	r3, [sl]
 8008a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a9e:	d015      	beq.n	8008acc <_vfiprintf_r+0x120>
 8008aa0:	9a07      	ldr	r2, [sp, #28]
 8008aa2:	4654      	mov	r4, sl
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	f04f 0c0a 	mov.w	ip, #10
 8008aaa:	4621      	mov	r1, r4
 8008aac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ab0:	3b30      	subs	r3, #48	; 0x30
 8008ab2:	2b09      	cmp	r3, #9
 8008ab4:	d94d      	bls.n	8008b52 <_vfiprintf_r+0x1a6>
 8008ab6:	b1b0      	cbz	r0, 8008ae6 <_vfiprintf_r+0x13a>
 8008ab8:	9207      	str	r2, [sp, #28]
 8008aba:	e014      	b.n	8008ae6 <_vfiprintf_r+0x13a>
 8008abc:	eba0 0308 	sub.w	r3, r0, r8
 8008ac0:	fa09 f303 	lsl.w	r3, r9, r3
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	9304      	str	r3, [sp, #16]
 8008ac8:	46a2      	mov	sl, r4
 8008aca:	e7d2      	b.n	8008a72 <_vfiprintf_r+0xc6>
 8008acc:	9b03      	ldr	r3, [sp, #12]
 8008ace:	1d19      	adds	r1, r3, #4
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	9103      	str	r1, [sp, #12]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	bfbb      	ittet	lt
 8008ad8:	425b      	neglt	r3, r3
 8008ada:	f042 0202 	orrlt.w	r2, r2, #2
 8008ade:	9307      	strge	r3, [sp, #28]
 8008ae0:	9307      	strlt	r3, [sp, #28]
 8008ae2:	bfb8      	it	lt
 8008ae4:	9204      	strlt	r2, [sp, #16]
 8008ae6:	7823      	ldrb	r3, [r4, #0]
 8008ae8:	2b2e      	cmp	r3, #46	; 0x2e
 8008aea:	d10c      	bne.n	8008b06 <_vfiprintf_r+0x15a>
 8008aec:	7863      	ldrb	r3, [r4, #1]
 8008aee:	2b2a      	cmp	r3, #42	; 0x2a
 8008af0:	d134      	bne.n	8008b5c <_vfiprintf_r+0x1b0>
 8008af2:	9b03      	ldr	r3, [sp, #12]
 8008af4:	1d1a      	adds	r2, r3, #4
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	9203      	str	r2, [sp, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	bfb8      	it	lt
 8008afe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008b02:	3402      	adds	r4, #2
 8008b04:	9305      	str	r3, [sp, #20]
 8008b06:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008bdc <_vfiprintf_r+0x230>
 8008b0a:	7821      	ldrb	r1, [r4, #0]
 8008b0c:	2203      	movs	r2, #3
 8008b0e:	4650      	mov	r0, sl
 8008b10:	f7f7 fb5e 	bl	80001d0 <memchr>
 8008b14:	b138      	cbz	r0, 8008b26 <_vfiprintf_r+0x17a>
 8008b16:	9b04      	ldr	r3, [sp, #16]
 8008b18:	eba0 000a 	sub.w	r0, r0, sl
 8008b1c:	2240      	movs	r2, #64	; 0x40
 8008b1e:	4082      	lsls	r2, r0
 8008b20:	4313      	orrs	r3, r2
 8008b22:	3401      	adds	r4, #1
 8008b24:	9304      	str	r3, [sp, #16]
 8008b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b2a:	4829      	ldr	r0, [pc, #164]	; (8008bd0 <_vfiprintf_r+0x224>)
 8008b2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b30:	2206      	movs	r2, #6
 8008b32:	f7f7 fb4d 	bl	80001d0 <memchr>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d03f      	beq.n	8008bba <_vfiprintf_r+0x20e>
 8008b3a:	4b26      	ldr	r3, [pc, #152]	; (8008bd4 <_vfiprintf_r+0x228>)
 8008b3c:	bb1b      	cbnz	r3, 8008b86 <_vfiprintf_r+0x1da>
 8008b3e:	9b03      	ldr	r3, [sp, #12]
 8008b40:	3307      	adds	r3, #7
 8008b42:	f023 0307 	bic.w	r3, r3, #7
 8008b46:	3308      	adds	r3, #8
 8008b48:	9303      	str	r3, [sp, #12]
 8008b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b4c:	443b      	add	r3, r7
 8008b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b50:	e768      	b.n	8008a24 <_vfiprintf_r+0x78>
 8008b52:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b56:	460c      	mov	r4, r1
 8008b58:	2001      	movs	r0, #1
 8008b5a:	e7a6      	b.n	8008aaa <_vfiprintf_r+0xfe>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	3401      	adds	r4, #1
 8008b60:	9305      	str	r3, [sp, #20]
 8008b62:	4619      	mov	r1, r3
 8008b64:	f04f 0c0a 	mov.w	ip, #10
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b6e:	3a30      	subs	r2, #48	; 0x30
 8008b70:	2a09      	cmp	r2, #9
 8008b72:	d903      	bls.n	8008b7c <_vfiprintf_r+0x1d0>
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d0c6      	beq.n	8008b06 <_vfiprintf_r+0x15a>
 8008b78:	9105      	str	r1, [sp, #20]
 8008b7a:	e7c4      	b.n	8008b06 <_vfiprintf_r+0x15a>
 8008b7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b80:	4604      	mov	r4, r0
 8008b82:	2301      	movs	r3, #1
 8008b84:	e7f0      	b.n	8008b68 <_vfiprintf_r+0x1bc>
 8008b86:	ab03      	add	r3, sp, #12
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	462a      	mov	r2, r5
 8008b8c:	4b12      	ldr	r3, [pc, #72]	; (8008bd8 <_vfiprintf_r+0x22c>)
 8008b8e:	a904      	add	r1, sp, #16
 8008b90:	4630      	mov	r0, r6
 8008b92:	f3af 8000 	nop.w
 8008b96:	4607      	mov	r7, r0
 8008b98:	1c78      	adds	r0, r7, #1
 8008b9a:	d1d6      	bne.n	8008b4a <_vfiprintf_r+0x19e>
 8008b9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b9e:	07d9      	lsls	r1, r3, #31
 8008ba0:	d405      	bmi.n	8008bae <_vfiprintf_r+0x202>
 8008ba2:	89ab      	ldrh	r3, [r5, #12]
 8008ba4:	059a      	lsls	r2, r3, #22
 8008ba6:	d402      	bmi.n	8008bae <_vfiprintf_r+0x202>
 8008ba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008baa:	f7ff fe88 	bl	80088be <__retarget_lock_release_recursive>
 8008bae:	89ab      	ldrh	r3, [r5, #12]
 8008bb0:	065b      	lsls	r3, r3, #25
 8008bb2:	f53f af1d 	bmi.w	80089f0 <_vfiprintf_r+0x44>
 8008bb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bb8:	e71c      	b.n	80089f4 <_vfiprintf_r+0x48>
 8008bba:	ab03      	add	r3, sp, #12
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	462a      	mov	r2, r5
 8008bc0:	4b05      	ldr	r3, [pc, #20]	; (8008bd8 <_vfiprintf_r+0x22c>)
 8008bc2:	a904      	add	r1, sp, #16
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	f000 f879 	bl	8008cbc <_printf_i>
 8008bca:	e7e4      	b.n	8008b96 <_vfiprintf_r+0x1ea>
 8008bcc:	080092d4 	.word	0x080092d4
 8008bd0:	080092de 	.word	0x080092de
 8008bd4:	00000000 	.word	0x00000000
 8008bd8:	08008987 	.word	0x08008987
 8008bdc:	080092da 	.word	0x080092da

08008be0 <_printf_common>:
 8008be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be4:	4616      	mov	r6, r2
 8008be6:	4699      	mov	r9, r3
 8008be8:	688a      	ldr	r2, [r1, #8]
 8008bea:	690b      	ldr	r3, [r1, #16]
 8008bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	bfb8      	it	lt
 8008bf4:	4613      	movlt	r3, r2
 8008bf6:	6033      	str	r3, [r6, #0]
 8008bf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bfc:	4607      	mov	r7, r0
 8008bfe:	460c      	mov	r4, r1
 8008c00:	b10a      	cbz	r2, 8008c06 <_printf_common+0x26>
 8008c02:	3301      	adds	r3, #1
 8008c04:	6033      	str	r3, [r6, #0]
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	0699      	lsls	r1, r3, #26
 8008c0a:	bf42      	ittt	mi
 8008c0c:	6833      	ldrmi	r3, [r6, #0]
 8008c0e:	3302      	addmi	r3, #2
 8008c10:	6033      	strmi	r3, [r6, #0]
 8008c12:	6825      	ldr	r5, [r4, #0]
 8008c14:	f015 0506 	ands.w	r5, r5, #6
 8008c18:	d106      	bne.n	8008c28 <_printf_common+0x48>
 8008c1a:	f104 0a19 	add.w	sl, r4, #25
 8008c1e:	68e3      	ldr	r3, [r4, #12]
 8008c20:	6832      	ldr	r2, [r6, #0]
 8008c22:	1a9b      	subs	r3, r3, r2
 8008c24:	42ab      	cmp	r3, r5
 8008c26:	dc26      	bgt.n	8008c76 <_printf_common+0x96>
 8008c28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c2c:	1e13      	subs	r3, r2, #0
 8008c2e:	6822      	ldr	r2, [r4, #0]
 8008c30:	bf18      	it	ne
 8008c32:	2301      	movne	r3, #1
 8008c34:	0692      	lsls	r2, r2, #26
 8008c36:	d42b      	bmi.n	8008c90 <_printf_common+0xb0>
 8008c38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	4638      	mov	r0, r7
 8008c40:	47c0      	blx	r8
 8008c42:	3001      	adds	r0, #1
 8008c44:	d01e      	beq.n	8008c84 <_printf_common+0xa4>
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	6922      	ldr	r2, [r4, #16]
 8008c4a:	f003 0306 	and.w	r3, r3, #6
 8008c4e:	2b04      	cmp	r3, #4
 8008c50:	bf02      	ittt	eq
 8008c52:	68e5      	ldreq	r5, [r4, #12]
 8008c54:	6833      	ldreq	r3, [r6, #0]
 8008c56:	1aed      	subeq	r5, r5, r3
 8008c58:	68a3      	ldr	r3, [r4, #8]
 8008c5a:	bf0c      	ite	eq
 8008c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c60:	2500      	movne	r5, #0
 8008c62:	4293      	cmp	r3, r2
 8008c64:	bfc4      	itt	gt
 8008c66:	1a9b      	subgt	r3, r3, r2
 8008c68:	18ed      	addgt	r5, r5, r3
 8008c6a:	2600      	movs	r6, #0
 8008c6c:	341a      	adds	r4, #26
 8008c6e:	42b5      	cmp	r5, r6
 8008c70:	d11a      	bne.n	8008ca8 <_printf_common+0xc8>
 8008c72:	2000      	movs	r0, #0
 8008c74:	e008      	b.n	8008c88 <_printf_common+0xa8>
 8008c76:	2301      	movs	r3, #1
 8008c78:	4652      	mov	r2, sl
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	47c0      	blx	r8
 8008c80:	3001      	adds	r0, #1
 8008c82:	d103      	bne.n	8008c8c <_printf_common+0xac>
 8008c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8c:	3501      	adds	r5, #1
 8008c8e:	e7c6      	b.n	8008c1e <_printf_common+0x3e>
 8008c90:	18e1      	adds	r1, r4, r3
 8008c92:	1c5a      	adds	r2, r3, #1
 8008c94:	2030      	movs	r0, #48	; 0x30
 8008c96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c9a:	4422      	add	r2, r4
 8008c9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ca0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ca4:	3302      	adds	r3, #2
 8008ca6:	e7c7      	b.n	8008c38 <_printf_common+0x58>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	4622      	mov	r2, r4
 8008cac:	4649      	mov	r1, r9
 8008cae:	4638      	mov	r0, r7
 8008cb0:	47c0      	blx	r8
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	d0e6      	beq.n	8008c84 <_printf_common+0xa4>
 8008cb6:	3601      	adds	r6, #1
 8008cb8:	e7d9      	b.n	8008c6e <_printf_common+0x8e>
	...

08008cbc <_printf_i>:
 8008cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc0:	7e0f      	ldrb	r7, [r1, #24]
 8008cc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cc4:	2f78      	cmp	r7, #120	; 0x78
 8008cc6:	4691      	mov	r9, r2
 8008cc8:	4680      	mov	r8, r0
 8008cca:	460c      	mov	r4, r1
 8008ccc:	469a      	mov	sl, r3
 8008cce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cd2:	d807      	bhi.n	8008ce4 <_printf_i+0x28>
 8008cd4:	2f62      	cmp	r7, #98	; 0x62
 8008cd6:	d80a      	bhi.n	8008cee <_printf_i+0x32>
 8008cd8:	2f00      	cmp	r7, #0
 8008cda:	f000 80d4 	beq.w	8008e86 <_printf_i+0x1ca>
 8008cde:	2f58      	cmp	r7, #88	; 0x58
 8008ce0:	f000 80c0 	beq.w	8008e64 <_printf_i+0x1a8>
 8008ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ce8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cec:	e03a      	b.n	8008d64 <_printf_i+0xa8>
 8008cee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cf2:	2b15      	cmp	r3, #21
 8008cf4:	d8f6      	bhi.n	8008ce4 <_printf_i+0x28>
 8008cf6:	a101      	add	r1, pc, #4	; (adr r1, 8008cfc <_printf_i+0x40>)
 8008cf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cfc:	08008d55 	.word	0x08008d55
 8008d00:	08008d69 	.word	0x08008d69
 8008d04:	08008ce5 	.word	0x08008ce5
 8008d08:	08008ce5 	.word	0x08008ce5
 8008d0c:	08008ce5 	.word	0x08008ce5
 8008d10:	08008ce5 	.word	0x08008ce5
 8008d14:	08008d69 	.word	0x08008d69
 8008d18:	08008ce5 	.word	0x08008ce5
 8008d1c:	08008ce5 	.word	0x08008ce5
 8008d20:	08008ce5 	.word	0x08008ce5
 8008d24:	08008ce5 	.word	0x08008ce5
 8008d28:	08008e6d 	.word	0x08008e6d
 8008d2c:	08008d95 	.word	0x08008d95
 8008d30:	08008e27 	.word	0x08008e27
 8008d34:	08008ce5 	.word	0x08008ce5
 8008d38:	08008ce5 	.word	0x08008ce5
 8008d3c:	08008e8f 	.word	0x08008e8f
 8008d40:	08008ce5 	.word	0x08008ce5
 8008d44:	08008d95 	.word	0x08008d95
 8008d48:	08008ce5 	.word	0x08008ce5
 8008d4c:	08008ce5 	.word	0x08008ce5
 8008d50:	08008e2f 	.word	0x08008e2f
 8008d54:	682b      	ldr	r3, [r5, #0]
 8008d56:	1d1a      	adds	r2, r3, #4
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	602a      	str	r2, [r5, #0]
 8008d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d64:	2301      	movs	r3, #1
 8008d66:	e09f      	b.n	8008ea8 <_printf_i+0x1ec>
 8008d68:	6820      	ldr	r0, [r4, #0]
 8008d6a:	682b      	ldr	r3, [r5, #0]
 8008d6c:	0607      	lsls	r7, r0, #24
 8008d6e:	f103 0104 	add.w	r1, r3, #4
 8008d72:	6029      	str	r1, [r5, #0]
 8008d74:	d501      	bpl.n	8008d7a <_printf_i+0xbe>
 8008d76:	681e      	ldr	r6, [r3, #0]
 8008d78:	e003      	b.n	8008d82 <_printf_i+0xc6>
 8008d7a:	0646      	lsls	r6, r0, #25
 8008d7c:	d5fb      	bpl.n	8008d76 <_printf_i+0xba>
 8008d7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008d82:	2e00      	cmp	r6, #0
 8008d84:	da03      	bge.n	8008d8e <_printf_i+0xd2>
 8008d86:	232d      	movs	r3, #45	; 0x2d
 8008d88:	4276      	negs	r6, r6
 8008d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d8e:	485a      	ldr	r0, [pc, #360]	; (8008ef8 <_printf_i+0x23c>)
 8008d90:	230a      	movs	r3, #10
 8008d92:	e012      	b.n	8008dba <_printf_i+0xfe>
 8008d94:	682b      	ldr	r3, [r5, #0]
 8008d96:	6820      	ldr	r0, [r4, #0]
 8008d98:	1d19      	adds	r1, r3, #4
 8008d9a:	6029      	str	r1, [r5, #0]
 8008d9c:	0605      	lsls	r5, r0, #24
 8008d9e:	d501      	bpl.n	8008da4 <_printf_i+0xe8>
 8008da0:	681e      	ldr	r6, [r3, #0]
 8008da2:	e002      	b.n	8008daa <_printf_i+0xee>
 8008da4:	0641      	lsls	r1, r0, #25
 8008da6:	d5fb      	bpl.n	8008da0 <_printf_i+0xe4>
 8008da8:	881e      	ldrh	r6, [r3, #0]
 8008daa:	4853      	ldr	r0, [pc, #332]	; (8008ef8 <_printf_i+0x23c>)
 8008dac:	2f6f      	cmp	r7, #111	; 0x6f
 8008dae:	bf0c      	ite	eq
 8008db0:	2308      	moveq	r3, #8
 8008db2:	230a      	movne	r3, #10
 8008db4:	2100      	movs	r1, #0
 8008db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dba:	6865      	ldr	r5, [r4, #4]
 8008dbc:	60a5      	str	r5, [r4, #8]
 8008dbe:	2d00      	cmp	r5, #0
 8008dc0:	bfa2      	ittt	ge
 8008dc2:	6821      	ldrge	r1, [r4, #0]
 8008dc4:	f021 0104 	bicge.w	r1, r1, #4
 8008dc8:	6021      	strge	r1, [r4, #0]
 8008dca:	b90e      	cbnz	r6, 8008dd0 <_printf_i+0x114>
 8008dcc:	2d00      	cmp	r5, #0
 8008dce:	d04b      	beq.n	8008e68 <_printf_i+0x1ac>
 8008dd0:	4615      	mov	r5, r2
 8008dd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dd6:	fb03 6711 	mls	r7, r3, r1, r6
 8008dda:	5dc7      	ldrb	r7, [r0, r7]
 8008ddc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008de0:	4637      	mov	r7, r6
 8008de2:	42bb      	cmp	r3, r7
 8008de4:	460e      	mov	r6, r1
 8008de6:	d9f4      	bls.n	8008dd2 <_printf_i+0x116>
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d10b      	bne.n	8008e04 <_printf_i+0x148>
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	07de      	lsls	r6, r3, #31
 8008df0:	d508      	bpl.n	8008e04 <_printf_i+0x148>
 8008df2:	6923      	ldr	r3, [r4, #16]
 8008df4:	6861      	ldr	r1, [r4, #4]
 8008df6:	4299      	cmp	r1, r3
 8008df8:	bfde      	ittt	le
 8008dfa:	2330      	movle	r3, #48	; 0x30
 8008dfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008e04:	1b52      	subs	r2, r2, r5
 8008e06:	6122      	str	r2, [r4, #16]
 8008e08:	f8cd a000 	str.w	sl, [sp]
 8008e0c:	464b      	mov	r3, r9
 8008e0e:	aa03      	add	r2, sp, #12
 8008e10:	4621      	mov	r1, r4
 8008e12:	4640      	mov	r0, r8
 8008e14:	f7ff fee4 	bl	8008be0 <_printf_common>
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d14a      	bne.n	8008eb2 <_printf_i+0x1f6>
 8008e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e20:	b004      	add	sp, #16
 8008e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	f043 0320 	orr.w	r3, r3, #32
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	4833      	ldr	r0, [pc, #204]	; (8008efc <_printf_i+0x240>)
 8008e30:	2778      	movs	r7, #120	; 0x78
 8008e32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	6829      	ldr	r1, [r5, #0]
 8008e3a:	061f      	lsls	r7, r3, #24
 8008e3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e40:	d402      	bmi.n	8008e48 <_printf_i+0x18c>
 8008e42:	065f      	lsls	r7, r3, #25
 8008e44:	bf48      	it	mi
 8008e46:	b2b6      	uxthmi	r6, r6
 8008e48:	07df      	lsls	r7, r3, #31
 8008e4a:	bf48      	it	mi
 8008e4c:	f043 0320 	orrmi.w	r3, r3, #32
 8008e50:	6029      	str	r1, [r5, #0]
 8008e52:	bf48      	it	mi
 8008e54:	6023      	strmi	r3, [r4, #0]
 8008e56:	b91e      	cbnz	r6, 8008e60 <_printf_i+0x1a4>
 8008e58:	6823      	ldr	r3, [r4, #0]
 8008e5a:	f023 0320 	bic.w	r3, r3, #32
 8008e5e:	6023      	str	r3, [r4, #0]
 8008e60:	2310      	movs	r3, #16
 8008e62:	e7a7      	b.n	8008db4 <_printf_i+0xf8>
 8008e64:	4824      	ldr	r0, [pc, #144]	; (8008ef8 <_printf_i+0x23c>)
 8008e66:	e7e4      	b.n	8008e32 <_printf_i+0x176>
 8008e68:	4615      	mov	r5, r2
 8008e6a:	e7bd      	b.n	8008de8 <_printf_i+0x12c>
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	6826      	ldr	r6, [r4, #0]
 8008e70:	6961      	ldr	r1, [r4, #20]
 8008e72:	1d18      	adds	r0, r3, #4
 8008e74:	6028      	str	r0, [r5, #0]
 8008e76:	0635      	lsls	r5, r6, #24
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	d501      	bpl.n	8008e80 <_printf_i+0x1c4>
 8008e7c:	6019      	str	r1, [r3, #0]
 8008e7e:	e002      	b.n	8008e86 <_printf_i+0x1ca>
 8008e80:	0670      	lsls	r0, r6, #25
 8008e82:	d5fb      	bpl.n	8008e7c <_printf_i+0x1c0>
 8008e84:	8019      	strh	r1, [r3, #0]
 8008e86:	2300      	movs	r3, #0
 8008e88:	6123      	str	r3, [r4, #16]
 8008e8a:	4615      	mov	r5, r2
 8008e8c:	e7bc      	b.n	8008e08 <_printf_i+0x14c>
 8008e8e:	682b      	ldr	r3, [r5, #0]
 8008e90:	1d1a      	adds	r2, r3, #4
 8008e92:	602a      	str	r2, [r5, #0]
 8008e94:	681d      	ldr	r5, [r3, #0]
 8008e96:	6862      	ldr	r2, [r4, #4]
 8008e98:	2100      	movs	r1, #0
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f7f7 f998 	bl	80001d0 <memchr>
 8008ea0:	b108      	cbz	r0, 8008ea6 <_printf_i+0x1ea>
 8008ea2:	1b40      	subs	r0, r0, r5
 8008ea4:	6060      	str	r0, [r4, #4]
 8008ea6:	6863      	ldr	r3, [r4, #4]
 8008ea8:	6123      	str	r3, [r4, #16]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eb0:	e7aa      	b.n	8008e08 <_printf_i+0x14c>
 8008eb2:	6923      	ldr	r3, [r4, #16]
 8008eb4:	462a      	mov	r2, r5
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	4640      	mov	r0, r8
 8008eba:	47d0      	blx	sl
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	d0ad      	beq.n	8008e1c <_printf_i+0x160>
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	079b      	lsls	r3, r3, #30
 8008ec4:	d413      	bmi.n	8008eee <_printf_i+0x232>
 8008ec6:	68e0      	ldr	r0, [r4, #12]
 8008ec8:	9b03      	ldr	r3, [sp, #12]
 8008eca:	4298      	cmp	r0, r3
 8008ecc:	bfb8      	it	lt
 8008ece:	4618      	movlt	r0, r3
 8008ed0:	e7a6      	b.n	8008e20 <_printf_i+0x164>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	4632      	mov	r2, r6
 8008ed6:	4649      	mov	r1, r9
 8008ed8:	4640      	mov	r0, r8
 8008eda:	47d0      	blx	sl
 8008edc:	3001      	adds	r0, #1
 8008ede:	d09d      	beq.n	8008e1c <_printf_i+0x160>
 8008ee0:	3501      	adds	r5, #1
 8008ee2:	68e3      	ldr	r3, [r4, #12]
 8008ee4:	9903      	ldr	r1, [sp, #12]
 8008ee6:	1a5b      	subs	r3, r3, r1
 8008ee8:	42ab      	cmp	r3, r5
 8008eea:	dcf2      	bgt.n	8008ed2 <_printf_i+0x216>
 8008eec:	e7eb      	b.n	8008ec6 <_printf_i+0x20a>
 8008eee:	2500      	movs	r5, #0
 8008ef0:	f104 0619 	add.w	r6, r4, #25
 8008ef4:	e7f5      	b.n	8008ee2 <_printf_i+0x226>
 8008ef6:	bf00      	nop
 8008ef8:	080092e5 	.word	0x080092e5
 8008efc:	080092f6 	.word	0x080092f6

08008f00 <__sflush_r>:
 8008f00:	898a      	ldrh	r2, [r1, #12]
 8008f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f06:	4605      	mov	r5, r0
 8008f08:	0710      	lsls	r0, r2, #28
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	d458      	bmi.n	8008fc0 <__sflush_r+0xc0>
 8008f0e:	684b      	ldr	r3, [r1, #4]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	dc05      	bgt.n	8008f20 <__sflush_r+0x20>
 8008f14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	dc02      	bgt.n	8008f20 <__sflush_r+0x20>
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f22:	2e00      	cmp	r6, #0
 8008f24:	d0f9      	beq.n	8008f1a <__sflush_r+0x1a>
 8008f26:	2300      	movs	r3, #0
 8008f28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f2c:	682f      	ldr	r7, [r5, #0]
 8008f2e:	6a21      	ldr	r1, [r4, #32]
 8008f30:	602b      	str	r3, [r5, #0]
 8008f32:	d032      	beq.n	8008f9a <__sflush_r+0x9a>
 8008f34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f36:	89a3      	ldrh	r3, [r4, #12]
 8008f38:	075a      	lsls	r2, r3, #29
 8008f3a:	d505      	bpl.n	8008f48 <__sflush_r+0x48>
 8008f3c:	6863      	ldr	r3, [r4, #4]
 8008f3e:	1ac0      	subs	r0, r0, r3
 8008f40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f42:	b10b      	cbz	r3, 8008f48 <__sflush_r+0x48>
 8008f44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f46:	1ac0      	subs	r0, r0, r3
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f4e:	6a21      	ldr	r1, [r4, #32]
 8008f50:	4628      	mov	r0, r5
 8008f52:	47b0      	blx	r6
 8008f54:	1c43      	adds	r3, r0, #1
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	d106      	bne.n	8008f68 <__sflush_r+0x68>
 8008f5a:	6829      	ldr	r1, [r5, #0]
 8008f5c:	291d      	cmp	r1, #29
 8008f5e:	d82b      	bhi.n	8008fb8 <__sflush_r+0xb8>
 8008f60:	4a29      	ldr	r2, [pc, #164]	; (8009008 <__sflush_r+0x108>)
 8008f62:	410a      	asrs	r2, r1
 8008f64:	07d6      	lsls	r6, r2, #31
 8008f66:	d427      	bmi.n	8008fb8 <__sflush_r+0xb8>
 8008f68:	2200      	movs	r2, #0
 8008f6a:	6062      	str	r2, [r4, #4]
 8008f6c:	04d9      	lsls	r1, r3, #19
 8008f6e:	6922      	ldr	r2, [r4, #16]
 8008f70:	6022      	str	r2, [r4, #0]
 8008f72:	d504      	bpl.n	8008f7e <__sflush_r+0x7e>
 8008f74:	1c42      	adds	r2, r0, #1
 8008f76:	d101      	bne.n	8008f7c <__sflush_r+0x7c>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	b903      	cbnz	r3, 8008f7e <__sflush_r+0x7e>
 8008f7c:	6560      	str	r0, [r4, #84]	; 0x54
 8008f7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f80:	602f      	str	r7, [r5, #0]
 8008f82:	2900      	cmp	r1, #0
 8008f84:	d0c9      	beq.n	8008f1a <__sflush_r+0x1a>
 8008f86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f8a:	4299      	cmp	r1, r3
 8008f8c:	d002      	beq.n	8008f94 <__sflush_r+0x94>
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f7ff fc96 	bl	80088c0 <_free_r>
 8008f94:	2000      	movs	r0, #0
 8008f96:	6360      	str	r0, [r4, #52]	; 0x34
 8008f98:	e7c0      	b.n	8008f1c <__sflush_r+0x1c>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	47b0      	blx	r6
 8008fa0:	1c41      	adds	r1, r0, #1
 8008fa2:	d1c8      	bne.n	8008f36 <__sflush_r+0x36>
 8008fa4:	682b      	ldr	r3, [r5, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d0c5      	beq.n	8008f36 <__sflush_r+0x36>
 8008faa:	2b1d      	cmp	r3, #29
 8008fac:	d001      	beq.n	8008fb2 <__sflush_r+0xb2>
 8008fae:	2b16      	cmp	r3, #22
 8008fb0:	d101      	bne.n	8008fb6 <__sflush_r+0xb6>
 8008fb2:	602f      	str	r7, [r5, #0]
 8008fb4:	e7b1      	b.n	8008f1a <__sflush_r+0x1a>
 8008fb6:	89a3      	ldrh	r3, [r4, #12]
 8008fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fbc:	81a3      	strh	r3, [r4, #12]
 8008fbe:	e7ad      	b.n	8008f1c <__sflush_r+0x1c>
 8008fc0:	690f      	ldr	r7, [r1, #16]
 8008fc2:	2f00      	cmp	r7, #0
 8008fc4:	d0a9      	beq.n	8008f1a <__sflush_r+0x1a>
 8008fc6:	0793      	lsls	r3, r2, #30
 8008fc8:	680e      	ldr	r6, [r1, #0]
 8008fca:	bf08      	it	eq
 8008fcc:	694b      	ldreq	r3, [r1, #20]
 8008fce:	600f      	str	r7, [r1, #0]
 8008fd0:	bf18      	it	ne
 8008fd2:	2300      	movne	r3, #0
 8008fd4:	eba6 0807 	sub.w	r8, r6, r7
 8008fd8:	608b      	str	r3, [r1, #8]
 8008fda:	f1b8 0f00 	cmp.w	r8, #0
 8008fde:	dd9c      	ble.n	8008f1a <__sflush_r+0x1a>
 8008fe0:	6a21      	ldr	r1, [r4, #32]
 8008fe2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fe4:	4643      	mov	r3, r8
 8008fe6:	463a      	mov	r2, r7
 8008fe8:	4628      	mov	r0, r5
 8008fea:	47b0      	blx	r6
 8008fec:	2800      	cmp	r0, #0
 8008fee:	dc06      	bgt.n	8008ffe <__sflush_r+0xfe>
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ff6:	81a3      	strh	r3, [r4, #12]
 8008ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ffc:	e78e      	b.n	8008f1c <__sflush_r+0x1c>
 8008ffe:	4407      	add	r7, r0
 8009000:	eba8 0800 	sub.w	r8, r8, r0
 8009004:	e7e9      	b.n	8008fda <__sflush_r+0xda>
 8009006:	bf00      	nop
 8009008:	dfbffffe 	.word	0xdfbffffe

0800900c <_fflush_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	690b      	ldr	r3, [r1, #16]
 8009010:	4605      	mov	r5, r0
 8009012:	460c      	mov	r4, r1
 8009014:	b913      	cbnz	r3, 800901c <_fflush_r+0x10>
 8009016:	2500      	movs	r5, #0
 8009018:	4628      	mov	r0, r5
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	b118      	cbz	r0, 8009026 <_fflush_r+0x1a>
 800901e:	6a03      	ldr	r3, [r0, #32]
 8009020:	b90b      	cbnz	r3, 8009026 <_fflush_r+0x1a>
 8009022:	f7ff fb37 	bl	8008694 <__sinit>
 8009026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0f3      	beq.n	8009016 <_fflush_r+0xa>
 800902e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009030:	07d0      	lsls	r0, r2, #31
 8009032:	d404      	bmi.n	800903e <_fflush_r+0x32>
 8009034:	0599      	lsls	r1, r3, #22
 8009036:	d402      	bmi.n	800903e <_fflush_r+0x32>
 8009038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800903a:	f7ff fc3f 	bl	80088bc <__retarget_lock_acquire_recursive>
 800903e:	4628      	mov	r0, r5
 8009040:	4621      	mov	r1, r4
 8009042:	f7ff ff5d 	bl	8008f00 <__sflush_r>
 8009046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009048:	07da      	lsls	r2, r3, #31
 800904a:	4605      	mov	r5, r0
 800904c:	d4e4      	bmi.n	8009018 <_fflush_r+0xc>
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	059b      	lsls	r3, r3, #22
 8009052:	d4e1      	bmi.n	8009018 <_fflush_r+0xc>
 8009054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009056:	f7ff fc32 	bl	80088be <__retarget_lock_release_recursive>
 800905a:	e7dd      	b.n	8009018 <_fflush_r+0xc>

0800905c <__swbuf_r>:
 800905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905e:	460e      	mov	r6, r1
 8009060:	4614      	mov	r4, r2
 8009062:	4605      	mov	r5, r0
 8009064:	b118      	cbz	r0, 800906e <__swbuf_r+0x12>
 8009066:	6a03      	ldr	r3, [r0, #32]
 8009068:	b90b      	cbnz	r3, 800906e <__swbuf_r+0x12>
 800906a:	f7ff fb13 	bl	8008694 <__sinit>
 800906e:	69a3      	ldr	r3, [r4, #24]
 8009070:	60a3      	str	r3, [r4, #8]
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	071a      	lsls	r2, r3, #28
 8009076:	d525      	bpl.n	80090c4 <__swbuf_r+0x68>
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	b31b      	cbz	r3, 80090c4 <__swbuf_r+0x68>
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	6922      	ldr	r2, [r4, #16]
 8009080:	1a98      	subs	r0, r3, r2
 8009082:	6963      	ldr	r3, [r4, #20]
 8009084:	b2f6      	uxtb	r6, r6
 8009086:	4283      	cmp	r3, r0
 8009088:	4637      	mov	r7, r6
 800908a:	dc04      	bgt.n	8009096 <__swbuf_r+0x3a>
 800908c:	4621      	mov	r1, r4
 800908e:	4628      	mov	r0, r5
 8009090:	f7ff ffbc 	bl	800900c <_fflush_r>
 8009094:	b9e0      	cbnz	r0, 80090d0 <__swbuf_r+0x74>
 8009096:	68a3      	ldr	r3, [r4, #8]
 8009098:	3b01      	subs	r3, #1
 800909a:	60a3      	str	r3, [r4, #8]
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	6022      	str	r2, [r4, #0]
 80090a2:	701e      	strb	r6, [r3, #0]
 80090a4:	6962      	ldr	r2, [r4, #20]
 80090a6:	1c43      	adds	r3, r0, #1
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d004      	beq.n	80090b6 <__swbuf_r+0x5a>
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	07db      	lsls	r3, r3, #31
 80090b0:	d506      	bpl.n	80090c0 <__swbuf_r+0x64>
 80090b2:	2e0a      	cmp	r6, #10
 80090b4:	d104      	bne.n	80090c0 <__swbuf_r+0x64>
 80090b6:	4621      	mov	r1, r4
 80090b8:	4628      	mov	r0, r5
 80090ba:	f7ff ffa7 	bl	800900c <_fflush_r>
 80090be:	b938      	cbnz	r0, 80090d0 <__swbuf_r+0x74>
 80090c0:	4638      	mov	r0, r7
 80090c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c4:	4621      	mov	r1, r4
 80090c6:	4628      	mov	r0, r5
 80090c8:	f000 f806 	bl	80090d8 <__swsetup_r>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d0d5      	beq.n	800907c <__swbuf_r+0x20>
 80090d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80090d4:	e7f4      	b.n	80090c0 <__swbuf_r+0x64>
	...

080090d8 <__swsetup_r>:
 80090d8:	b538      	push	{r3, r4, r5, lr}
 80090da:	4b2a      	ldr	r3, [pc, #168]	; (8009184 <__swsetup_r+0xac>)
 80090dc:	4605      	mov	r5, r0
 80090de:	6818      	ldr	r0, [r3, #0]
 80090e0:	460c      	mov	r4, r1
 80090e2:	b118      	cbz	r0, 80090ec <__swsetup_r+0x14>
 80090e4:	6a03      	ldr	r3, [r0, #32]
 80090e6:	b90b      	cbnz	r3, 80090ec <__swsetup_r+0x14>
 80090e8:	f7ff fad4 	bl	8008694 <__sinit>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090f2:	0718      	lsls	r0, r3, #28
 80090f4:	d422      	bmi.n	800913c <__swsetup_r+0x64>
 80090f6:	06d9      	lsls	r1, r3, #27
 80090f8:	d407      	bmi.n	800910a <__swsetup_r+0x32>
 80090fa:	2309      	movs	r3, #9
 80090fc:	602b      	str	r3, [r5, #0]
 80090fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009102:	81a3      	strh	r3, [r4, #12]
 8009104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009108:	e034      	b.n	8009174 <__swsetup_r+0x9c>
 800910a:	0758      	lsls	r0, r3, #29
 800910c:	d512      	bpl.n	8009134 <__swsetup_r+0x5c>
 800910e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009110:	b141      	cbz	r1, 8009124 <__swsetup_r+0x4c>
 8009112:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009116:	4299      	cmp	r1, r3
 8009118:	d002      	beq.n	8009120 <__swsetup_r+0x48>
 800911a:	4628      	mov	r0, r5
 800911c:	f7ff fbd0 	bl	80088c0 <_free_r>
 8009120:	2300      	movs	r3, #0
 8009122:	6363      	str	r3, [r4, #52]	; 0x34
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800912a:	81a3      	strh	r3, [r4, #12]
 800912c:	2300      	movs	r3, #0
 800912e:	6063      	str	r3, [r4, #4]
 8009130:	6923      	ldr	r3, [r4, #16]
 8009132:	6023      	str	r3, [r4, #0]
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	f043 0308 	orr.w	r3, r3, #8
 800913a:	81a3      	strh	r3, [r4, #12]
 800913c:	6923      	ldr	r3, [r4, #16]
 800913e:	b94b      	cbnz	r3, 8009154 <__swsetup_r+0x7c>
 8009140:	89a3      	ldrh	r3, [r4, #12]
 8009142:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800914a:	d003      	beq.n	8009154 <__swsetup_r+0x7c>
 800914c:	4621      	mov	r1, r4
 800914e:	4628      	mov	r0, r5
 8009150:	f000 f840 	bl	80091d4 <__smakebuf_r>
 8009154:	89a0      	ldrh	r0, [r4, #12]
 8009156:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800915a:	f010 0301 	ands.w	r3, r0, #1
 800915e:	d00a      	beq.n	8009176 <__swsetup_r+0x9e>
 8009160:	2300      	movs	r3, #0
 8009162:	60a3      	str	r3, [r4, #8]
 8009164:	6963      	ldr	r3, [r4, #20]
 8009166:	425b      	negs	r3, r3
 8009168:	61a3      	str	r3, [r4, #24]
 800916a:	6923      	ldr	r3, [r4, #16]
 800916c:	b943      	cbnz	r3, 8009180 <__swsetup_r+0xa8>
 800916e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009172:	d1c4      	bne.n	80090fe <__swsetup_r+0x26>
 8009174:	bd38      	pop	{r3, r4, r5, pc}
 8009176:	0781      	lsls	r1, r0, #30
 8009178:	bf58      	it	pl
 800917a:	6963      	ldrpl	r3, [r4, #20]
 800917c:	60a3      	str	r3, [r4, #8]
 800917e:	e7f4      	b.n	800916a <__swsetup_r+0x92>
 8009180:	2000      	movs	r0, #0
 8009182:	e7f7      	b.n	8009174 <__swsetup_r+0x9c>
 8009184:	20000084 	.word	0x20000084

08009188 <__swhatbuf_r>:
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	460c      	mov	r4, r1
 800918c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009190:	2900      	cmp	r1, #0
 8009192:	b096      	sub	sp, #88	; 0x58
 8009194:	4615      	mov	r5, r2
 8009196:	461e      	mov	r6, r3
 8009198:	da0d      	bge.n	80091b6 <__swhatbuf_r+0x2e>
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80091a0:	f04f 0100 	mov.w	r1, #0
 80091a4:	bf0c      	ite	eq
 80091a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80091aa:	2340      	movne	r3, #64	; 0x40
 80091ac:	2000      	movs	r0, #0
 80091ae:	6031      	str	r1, [r6, #0]
 80091b0:	602b      	str	r3, [r5, #0]
 80091b2:	b016      	add	sp, #88	; 0x58
 80091b4:	bd70      	pop	{r4, r5, r6, pc}
 80091b6:	466a      	mov	r2, sp
 80091b8:	f000 f848 	bl	800924c <_fstat_r>
 80091bc:	2800      	cmp	r0, #0
 80091be:	dbec      	blt.n	800919a <__swhatbuf_r+0x12>
 80091c0:	9901      	ldr	r1, [sp, #4]
 80091c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80091c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80091ca:	4259      	negs	r1, r3
 80091cc:	4159      	adcs	r1, r3
 80091ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091d2:	e7eb      	b.n	80091ac <__swhatbuf_r+0x24>

080091d4 <__smakebuf_r>:
 80091d4:	898b      	ldrh	r3, [r1, #12]
 80091d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091d8:	079d      	lsls	r5, r3, #30
 80091da:	4606      	mov	r6, r0
 80091dc:	460c      	mov	r4, r1
 80091de:	d507      	bpl.n	80091f0 <__smakebuf_r+0x1c>
 80091e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091e4:	6023      	str	r3, [r4, #0]
 80091e6:	6123      	str	r3, [r4, #16]
 80091e8:	2301      	movs	r3, #1
 80091ea:	6163      	str	r3, [r4, #20]
 80091ec:	b002      	add	sp, #8
 80091ee:	bd70      	pop	{r4, r5, r6, pc}
 80091f0:	ab01      	add	r3, sp, #4
 80091f2:	466a      	mov	r2, sp
 80091f4:	f7ff ffc8 	bl	8009188 <__swhatbuf_r>
 80091f8:	9900      	ldr	r1, [sp, #0]
 80091fa:	4605      	mov	r5, r0
 80091fc:	4630      	mov	r0, r6
 80091fe:	f7ff f943 	bl	8008488 <_malloc_r>
 8009202:	b948      	cbnz	r0, 8009218 <__smakebuf_r+0x44>
 8009204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009208:	059a      	lsls	r2, r3, #22
 800920a:	d4ef      	bmi.n	80091ec <__smakebuf_r+0x18>
 800920c:	f023 0303 	bic.w	r3, r3, #3
 8009210:	f043 0302 	orr.w	r3, r3, #2
 8009214:	81a3      	strh	r3, [r4, #12]
 8009216:	e7e3      	b.n	80091e0 <__smakebuf_r+0xc>
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	6020      	str	r0, [r4, #0]
 800921c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009220:	81a3      	strh	r3, [r4, #12]
 8009222:	9b00      	ldr	r3, [sp, #0]
 8009224:	6163      	str	r3, [r4, #20]
 8009226:	9b01      	ldr	r3, [sp, #4]
 8009228:	6120      	str	r0, [r4, #16]
 800922a:	b15b      	cbz	r3, 8009244 <__smakebuf_r+0x70>
 800922c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009230:	4630      	mov	r0, r6
 8009232:	f000 f81d 	bl	8009270 <_isatty_r>
 8009236:	b128      	cbz	r0, 8009244 <__smakebuf_r+0x70>
 8009238:	89a3      	ldrh	r3, [r4, #12]
 800923a:	f023 0303 	bic.w	r3, r3, #3
 800923e:	f043 0301 	orr.w	r3, r3, #1
 8009242:	81a3      	strh	r3, [r4, #12]
 8009244:	89a3      	ldrh	r3, [r4, #12]
 8009246:	431d      	orrs	r5, r3
 8009248:	81a5      	strh	r5, [r4, #12]
 800924a:	e7cf      	b.n	80091ec <__smakebuf_r+0x18>

0800924c <_fstat_r>:
 800924c:	b538      	push	{r3, r4, r5, lr}
 800924e:	4d07      	ldr	r5, [pc, #28]	; (800926c <_fstat_r+0x20>)
 8009250:	2300      	movs	r3, #0
 8009252:	4604      	mov	r4, r0
 8009254:	4608      	mov	r0, r1
 8009256:	4611      	mov	r1, r2
 8009258:	602b      	str	r3, [r5, #0]
 800925a:	f7f7 fde4 	bl	8000e26 <_fstat>
 800925e:	1c43      	adds	r3, r0, #1
 8009260:	d102      	bne.n	8009268 <_fstat_r+0x1c>
 8009262:	682b      	ldr	r3, [r5, #0]
 8009264:	b103      	cbz	r3, 8009268 <_fstat_r+0x1c>
 8009266:	6023      	str	r3, [r4, #0]
 8009268:	bd38      	pop	{r3, r4, r5, pc}
 800926a:	bf00      	nop
 800926c:	20000a08 	.word	0x20000a08

08009270 <_isatty_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	4d06      	ldr	r5, [pc, #24]	; (800928c <_isatty_r+0x1c>)
 8009274:	2300      	movs	r3, #0
 8009276:	4604      	mov	r4, r0
 8009278:	4608      	mov	r0, r1
 800927a:	602b      	str	r3, [r5, #0]
 800927c:	f7f7 fde3 	bl	8000e46 <_isatty>
 8009280:	1c43      	adds	r3, r0, #1
 8009282:	d102      	bne.n	800928a <_isatty_r+0x1a>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	b103      	cbz	r3, 800928a <_isatty_r+0x1a>
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	bd38      	pop	{r3, r4, r5, pc}
 800928c:	20000a08 	.word	0x20000a08

08009290 <_init>:
 8009290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009292:	bf00      	nop
 8009294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009296:	bc08      	pop	{r3}
 8009298:	469e      	mov	lr, r3
 800929a:	4770      	bx	lr

0800929c <_fini>:
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	bf00      	nop
 80092a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a2:	bc08      	pop	{r3}
 80092a4:	469e      	mov	lr, r3
 80092a6:	4770      	bx	lr
